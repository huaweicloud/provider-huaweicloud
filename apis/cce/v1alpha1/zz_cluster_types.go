// SPDX-FileCopyrightText: 2023 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

/*
Copyright 2022 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type CertificateClustersInitParameters struct {
}

type CertificateClustersObservation struct {

	// The certificate data.
	CertificateAuthorityData *string `json:"certificateAuthorityData,omitempty" tf:"certificate_authority_data,omitempty"`

	// The cluster name.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// The server IP address.
	Server *string `json:"server,omitempty" tf:"server,omitempty"`
}

type CertificateClustersParameters struct {
}

type CertificateUsersInitParameters struct {
}

type CertificateUsersObservation struct {

	// The client certificate data.
	ClientCertificateData *string `json:"clientCertificateData,omitempty" tf:"client_certificate_data,omitempty"`

	// The client key data.
	ClientKeyData *string `json:"clientKeyData,omitempty" tf:"client_key_data,omitempty"`

	// The user name.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`
}

type CertificateUsersParameters struct {
}

type ClusterInitParameters struct {

	// Specifies the display name of a cluster. The value of alias cannot be the same as the name
	// and display names of other clusters.
	Alias *string `json:"alias,omitempty" tf:"alias,omitempty"`

	// schema: Internal
	Annotations map[string]*string `json:"annotations,omitempty" tf:"annotations,omitempty"`

	// Specifies the CA root certificate provided in the
	// authenticating_proxy mode. The input value can be a Base64 encoded string or not.
	// Changing this parameter will create a new cluster resource.
	AuthenticatingProxyCA *string `json:"authenticatingProxyCa,omitempty" tf:"authenticating_proxy_ca,omitempty"`

	// Specifies the Client certificate provided in the
	// authenticating_proxy mode. The input value can be a Base64 encoded string or not.
	// Changing this parameter will create a new cluster resource.
	AuthenticatingProxyCert *string `json:"authenticatingProxyCert,omitempty" tf:"authenticating_proxy_cert,omitempty"`

	// Specifies the private key of the client certificate
	// provided in the authenticating_proxy mode. The input value can be a Base64 encoded string or not.
	// Changing this parameter will create a new cluster resource.
	AuthenticatingProxyPrivateKey *string `json:"authenticatingProxyPrivateKey,omitempty" tf:"authenticating_proxy_private_key,omitempty"`

	// Specifies the authentication mode of the cluster, possible values
	// are rbac and authenticating_proxy. Defaults to rbac.
	// Changing this parameter will create a new cluster resource.
	AuthenticationMode *string `json:"authenticationMode,omitempty" tf:"authentication_mode,omitempty"`

	AutoPay *string `json:"autoPay,omitempty" tf:"auto_pay,omitempty"`

	// Specifies whether auto renew is enabled. Valid values are true and false.
	AutoRenew *string `json:"autoRenew,omitempty" tf:"auto_renew,omitempty"`

	BillingMode *float64 `json:"billingMode,omitempty" tf:"billing_mode,omitempty"`

	// Specifies the charging mode of the CCE cluster.
	// Valid values are prePaid and postPaid, defaults to postPaid.
	// Changing this parameter will create a new cluster resource.
	ChargingMode *string `json:"chargingMode,omitempty" tf:"charging_mode,omitempty"`

	// Specifies the cluster Type, possible values are VirtualMachine and
	// ARM64. Defaults to VirtualMachine. Changing this parameter will create a new cluster resource.
	ClusterType *string `json:"clusterType,omitempty" tf:"cluster_type,omitempty"`

	// Specifies the cluster version, defaults to the latest supported
	// version. Changing this parameter will create a new cluster resource.
	ClusterVersion *string `json:"clusterVersion,omitempty" tf:"cluster_version,omitempty"`

	// Specifies the kubernetes component configurations.
	// For details, see documentation.
	// The object structure is documented below.
	// Changing this parameter will create a new cluster resource.
	ComponentConfigurations []ComponentConfigurationsInitParameters `json:"componentConfigurations,omitempty" tf:"component_configurations,omitempty"`

	// Specifies the container network segments.
	// In clusters of v1.21 and later, when the container_network_type is vpc-router, you can add multiple container
	// segments, separated with comma (,). In other situations, only the first segment takes effect.
	ContainerNetworkCidr *string `json:"containerNetworkCidr,omitempty" tf:"container_network_cidr,omitempty"`

	// Specifies the container network type.
	// Changing this parameter will create a new cluster resource. Possible values:
	ContainerNetworkType *string `json:"containerNetworkType,omitempty" tf:"container_network_type,omitempty"`

	// Specifies the custom san to add to certificate (array of string).
	CustomSan []*string `json:"customSan,omitempty" tf:"custom_san,omitempty"`

	// Specified whether to delete all associated storage resources when deleting the CCE
	// cluster. valid values are true, try and false. Default is false.
	DeleteAll *string `json:"deleteAll,omitempty" tf:"delete_all,omitempty"`

	// Specified whether to unbind associated SFS Turbo file systems when deleting the CCE
	// cluster. valid values are true, try and false. Default is false.
	DeleteEFS *string `json:"deleteEfs,omitempty" tf:"delete_efs,omitempty"`

	// schema: Internal
	DeleteEni *string `json:"deleteEni,omitempty" tf:"delete_eni,omitempty"`

	// Specified whether to delete associated EVS disks when deleting the CCE cluster.
	// valid values are true, try and false. Default is false.
	DeleteEvs *string `json:"deleteEvs,omitempty" tf:"delete_evs,omitempty"`

	// schema: Internal
	DeleteNet *string `json:"deleteNet,omitempty" tf:"delete_net,omitempty"`

	// Specified whether to delete associated OBS buckets when deleting the CCE cluster.
	// valid values are true, try and false. Default is false.
	DeleteObs *string `json:"deleteObs,omitempty" tf:"delete_obs,omitempty"`

	// Specified whether to delete associated SFS file systems when deleting the CCE
	// cluster. valid values are true, try and false. Default is false.
	DeleteSfs *string `json:"deleteSfs,omitempty" tf:"delete_sfs,omitempty"`

	// Specifies the cluster description.
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// Specifies the EIP address of the cluster.
	EIP *string `json:"eip,omitempty" tf:"eip,omitempty"`

	// schema: Internal
	EnableDistributeManagement *bool `json:"enableDistributeManagement,omitempty" tf:"enable_distribute_management,omitempty"`

	// The ENI network segment. This value is valid when only one eni_subnet_id is specified.
	// schema: Computed
	EniSubnetCidr *string `json:"eniSubnetCidr,omitempty" tf:"eni_subnet_cidr,omitempty"`

	// Specifies the IPv4 subnet ID of the subnet where the ENI resides.
	// Specified when creating a CCE Turbo cluster. You can add multiple IPv4 subnet ID, separated with comma (,).
	// Only adding subnets is allowed, removing subnets is not allowed.
	// the IPv4 subnet ID of the subnet where the ENI resides
	EniSubnetID *string `json:"eniSubnetId,omitempty" tf:"eni_subnet_id,omitempty"`

	// The enterprise project ID of the CCE cluster.
	EnterpriseProjectID *string `json:"enterpriseProjectId,omitempty" tf:"enterprise_project_id,omitempty"`

	// schema: Internal
	ExtendParam map[string]*string `json:"extendParam,omitempty" tf:"extend_param,omitempty"`

	// Specifies the extended parameter.
	// The object structure is documented below.
	// Changing this parameter will create a new cluster resource.
	ExtendParams []ExtendParamsInitParameters `json:"extendParams,omitempty" tf:"extend_params,omitempty"`

	// Specifies the cluster specifications.
	// Possible values:
	FlavorID *string `json:"flavorId,omitempty" tf:"flavor_id,omitempty"`

	// Specifies whether to hibernate the CCE cluster. Defaults to false. After a cluster is
	// hibernated, resources such as workloads cannot be created or managed in the cluster, and the cluster cannot be
	// deleted.
	Hibernate *bool `json:"hibernate,omitempty" tf:"hibernate,omitempty"`

	// Specifies the ID of the subnet used to create the node which should be
	// configured with a DNS address. Changing this parameter will create a new cluster resource.
	// schema: Internal
	HighwaySubnetID *string `json:"highwaySubnetId,omitempty" tf:"highway_subnet_id,omitempty"`

	// Specifies whether to enable IPv6 in the cluster.
	// Changing this parameter will create a new cluster resource.
	IPv6Enable *bool `json:"ipv6Enable,omitempty" tf:"ipv6_enable,omitempty"`

	// Specifies the service forwarding mode.
	// Changing this parameter will create a new cluster resource. Two modes are available:
	KubeProxyMode *string `json:"kubeProxyMode,omitempty" tf:"kube_proxy_mode,omitempty"`

	// schema: Internal
	Labels map[string]*string `json:"labels,omitempty" tf:"labels,omitempty"`

	// Specifies the advanced configuration of master nodes.
	// The object structure is documented below.
	// This parameter and multi_az are alternative. Changing this parameter will create a new cluster resource.
	Masters []MastersInitParameters `json:"masters,omitempty" tf:"masters,omitempty"`

	// Specifies whether to enable multiple AZs for the cluster, only when using HA
	// flavors. Changing this parameter will create a new cluster resource. This parameter and masters are alternative.
	MultiAz *bool `json:"multiAz,omitempty" tf:"multi_az,omitempty"`

	// Specifies the cluster name.
	// Changing this parameter will create a new cluster resource.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// Specifies the charging period of the CCE cluster.
	// If period_unit is set to month, the value ranges from 1 to 9.
	// If period_unit is set to year, the value ranges from 1 to 3.
	// This parameter is mandatory if charging_mode is set to prePaid.
	// Changing this parameter will create a new cluster resource.
	Period *float64 `json:"period,omitempty" tf:"period,omitempty"`

	// Specifies the charging period unit of the CCE cluster.
	// Valid values are month and year. This parameter is mandatory if charging_mode is set to prePaid.
	// Changing this parameter will create a new cluster resource.
	PeriodUnit *string `json:"periodUnit,omitempty" tf:"period_unit,omitempty"`

	// Specifies the region in which to create the CCE cluster resource.
	// If omitted, the provider-level region will be used. Changing this parameter will create a new cluster resource.
	Region *string `json:"region,omitempty" tf:"region,omitempty"`

	// Specifies the default worker node security group ID of the cluster.
	// If left empty, the system will automatically create a default worker node security group for you.
	// The default worker node security group needs to allow access from certain ports to ensure normal communications.
	// For details, see documentation.
	// If updated, the modified security group will only be applied to nodes newly created or accepted.
	// For existing nodes, you need to manually modify the security group rules for them.
	SecurityGroupID *string `json:"securityGroupId,omitempty" tf:"security_group_id,omitempty"`

	// Specifies the service network segment.
	// Changing this parameter will create a new cluster resource.
	ServiceNetworkCidr *string `json:"serviceNetworkCidr,omitempty" tf:"service_network_cidr,omitempty"`

	// Specifies the ID of the subnet used to create the node which should be
	// configured with a DNS address. Changing this parameter will create a new cluster resource.
	SubnetID *string `json:"subnetId,omitempty" tf:"subnet_id,omitempty"`

	// Specifies whether to support Istio in the cluster.
	// Changing this parameter will create a new cluster resource.
	SupportIstio *bool `json:"supportIstio,omitempty" tf:"support_istio,omitempty"`

	// Specifies the tags of the CCE cluster, key/value pair format.
	Tags map[string]*string `json:"tags,omitempty" tf:"tags,omitempty"`

	// Specifies the ID of the VPC used to create the node.
	// Changing this parameter will create a new cluster resource.
	VPCID *string `json:"vpcId,omitempty" tf:"vpc_id,omitempty"`
}

type ClusterObservation struct {

	// Specifies the display name of a cluster. The value of alias cannot be the same as the name
	// and display names of other clusters.
	Alias *string `json:"alias,omitempty" tf:"alias,omitempty"`

	// schema: Internal
	Annotations map[string]*string `json:"annotations,omitempty" tf:"annotations,omitempty"`

	// Specifies the CA root certificate provided in the
	// authenticating_proxy mode. The input value can be a Base64 encoded string or not.
	// Changing this parameter will create a new cluster resource.
	AuthenticatingProxyCA *string `json:"authenticatingProxyCa,omitempty" tf:"authenticating_proxy_ca,omitempty"`

	// Specifies the Client certificate provided in the
	// authenticating_proxy mode. The input value can be a Base64 encoded string or not.
	// Changing this parameter will create a new cluster resource.
	AuthenticatingProxyCert *string `json:"authenticatingProxyCert,omitempty" tf:"authenticating_proxy_cert,omitempty"`

	// Specifies the private key of the client certificate
	// provided in the authenticating_proxy mode. The input value can be a Base64 encoded string or not.
	// Changing this parameter will create a new cluster resource.
	AuthenticatingProxyPrivateKey *string `json:"authenticatingProxyPrivateKey,omitempty" tf:"authenticating_proxy_private_key,omitempty"`

	// Specifies the authentication mode of the cluster, possible values
	// are rbac and authenticating_proxy. Defaults to rbac.
	// Changing this parameter will create a new cluster resource.
	AuthenticationMode *string `json:"authenticationMode,omitempty" tf:"authentication_mode,omitempty"`

	AutoPay *string `json:"autoPay,omitempty" tf:"auto_pay,omitempty"`

	// Specifies whether auto renew is enabled. Valid values are true and false.
	AutoRenew *string `json:"autoRenew,omitempty" tf:"auto_renew,omitempty"`

	BillingMode *float64 `json:"billingMode,omitempty" tf:"billing_mode,omitempty"`

	// The category of the cluster. The value can be CCE and Turbo.
	Category *string `json:"category,omitempty" tf:"category,omitempty"`

	// The certificate clusters. Structure is documented below.
	CertificateClusters []CertificateClustersObservation `json:"certificateClusters,omitempty" tf:"certificate_clusters,omitempty"`

	// The certificate users. Structure is documented below.
	CertificateUsers []CertificateUsersObservation `json:"certificateUsers,omitempty" tf:"certificate_users,omitempty"`

	// Specifies the charging mode of the CCE cluster.
	// Valid values are prePaid and postPaid, defaults to postPaid.
	// Changing this parameter will create a new cluster resource.
	ChargingMode *string `json:"chargingMode,omitempty" tf:"charging_mode,omitempty"`

	// Specifies the cluster Type, possible values are VirtualMachine and
	// ARM64. Defaults to VirtualMachine. Changing this parameter will create a new cluster resource.
	ClusterType *string `json:"clusterType,omitempty" tf:"cluster_type,omitempty"`

	// Specifies the cluster version, defaults to the latest supported
	// version. Changing this parameter will create a new cluster resource.
	ClusterVersion *string `json:"clusterVersion,omitempty" tf:"cluster_version,omitempty"`

	// Specifies the kubernetes component configurations.
	// For details, see documentation.
	// The object structure is documented below.
	// Changing this parameter will create a new cluster resource.
	ComponentConfigurations []ComponentConfigurationsObservation `json:"componentConfigurations,omitempty" tf:"component_configurations,omitempty"`

	// Specifies the container network segments.
	// In clusters of v1.21 and later, when the container_network_type is vpc-router, you can add multiple container
	// segments, separated with comma (,). In other situations, only the first segment takes effect.
	ContainerNetworkCidr *string `json:"containerNetworkCidr,omitempty" tf:"container_network_cidr,omitempty"`

	// Specifies the container network type.
	// Changing this parameter will create a new cluster resource. Possible values:
	ContainerNetworkType *string `json:"containerNetworkType,omitempty" tf:"container_network_type,omitempty"`

	// Specifies the custom san to add to certificate (array of string).
	CustomSan []*string `json:"customSan,omitempty" tf:"custom_san,omitempty"`

	// Specified whether to delete all associated storage resources when deleting the CCE
	// cluster. valid values are true, try and false. Default is false.
	DeleteAll *string `json:"deleteAll,omitempty" tf:"delete_all,omitempty"`

	// Specified whether to unbind associated SFS Turbo file systems when deleting the CCE
	// cluster. valid values are true, try and false. Default is false.
	DeleteEFS *string `json:"deleteEfs,omitempty" tf:"delete_efs,omitempty"`

	// schema: Internal
	DeleteEni *string `json:"deleteEni,omitempty" tf:"delete_eni,omitempty"`

	// Specified whether to delete associated EVS disks when deleting the CCE cluster.
	// valid values are true, try and false. Default is false.
	DeleteEvs *string `json:"deleteEvs,omitempty" tf:"delete_evs,omitempty"`

	// schema: Internal
	DeleteNet *string `json:"deleteNet,omitempty" tf:"delete_net,omitempty"`

	// Specified whether to delete associated OBS buckets when deleting the CCE cluster.
	// valid values are true, try and false. Default is false.
	DeleteObs *string `json:"deleteObs,omitempty" tf:"delete_obs,omitempty"`

	// Specified whether to delete associated SFS file systems when deleting the CCE
	// cluster. valid values are true, try and false. Default is false.
	DeleteSfs *string `json:"deleteSfs,omitempty" tf:"delete_sfs,omitempty"`

	// Specifies the cluster description.
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// Specifies the EIP address of the cluster.
	EIP *string `json:"eip,omitempty" tf:"eip,omitempty"`

	// schema: Internal
	EnableDistributeManagement *bool `json:"enableDistributeManagement,omitempty" tf:"enable_distribute_management,omitempty"`

	// The ENI network segment. This value is valid when only one eni_subnet_id is specified.
	// schema: Computed
	EniSubnetCidr *string `json:"eniSubnetCidr,omitempty" tf:"eni_subnet_cidr,omitempty"`

	// Specifies the IPv4 subnet ID of the subnet where the ENI resides.
	// Specified when creating a CCE Turbo cluster. You can add multiple IPv4 subnet ID, separated with comma (,).
	// Only adding subnets is allowed, removing subnets is not allowed.
	// the IPv4 subnet ID of the subnet where the ENI resides
	EniSubnetID *string `json:"eniSubnetId,omitempty" tf:"eni_subnet_id,omitempty"`

	// The enterprise project ID of the CCE cluster.
	EnterpriseProjectID *string `json:"enterpriseProjectId,omitempty" tf:"enterprise_project_id,omitempty"`

	// schema: Internal
	ExtendParam map[string]*string `json:"extendParam,omitempty" tf:"extend_param,omitempty"`

	// Specifies the extended parameter.
	// The object structure is documented below.
	// Changing this parameter will create a new cluster resource.
	ExtendParams []ExtendParamsObservation `json:"extendParams,omitempty" tf:"extend_params,omitempty"`

	// Specifies the cluster specifications.
	// Possible values:
	FlavorID *string `json:"flavorId,omitempty" tf:"flavor_id,omitempty"`

	// Specifies whether to hibernate the CCE cluster. Defaults to false. After a cluster is
	// hibernated, resources such as workloads cannot be created or managed in the cluster, and the cluster cannot be
	// deleted.
	Hibernate *bool `json:"hibernate,omitempty" tf:"hibernate,omitempty"`

	// Specifies the ID of the subnet used to create the node which should be
	// configured with a DNS address. Changing this parameter will create a new cluster resource.
	// schema: Internal
	HighwaySubnetID *string `json:"highwaySubnetId,omitempty" tf:"highway_subnet_id,omitempty"`

	// ID of the cluster resource.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// Specifies whether to enable IPv6 in the cluster.
	// Changing this parameter will create a new cluster resource.
	IPv6Enable *bool `json:"ipv6Enable,omitempty" tf:"ipv6_enable,omitempty"`

	// Raw Kubernetes config to be used by kubectl and other compatible tools.
	KubeConfigRaw *string `json:"kubeConfigRaw,omitempty" tf:"kube_config_raw,omitempty"`

	// Specifies the service forwarding mode.
	// Changing this parameter will create a new cluster resource. Two modes are available:
	KubeProxyMode *string `json:"kubeProxyMode,omitempty" tf:"kube_proxy_mode,omitempty"`

	// schema: Internal
	Labels map[string]*string `json:"labels,omitempty" tf:"labels,omitempty"`

	// Specifies the advanced configuration of master nodes.
	// The object structure is documented below.
	// This parameter and multi_az are alternative. Changing this parameter will create a new cluster resource.
	Masters []MastersObservation `json:"masters,omitempty" tf:"masters,omitempty"`

	// Specifies whether to enable multiple AZs for the cluster, only when using HA
	// flavors. Changing this parameter will create a new cluster resource. This parameter and masters are alternative.
	MultiAz *bool `json:"multiAz,omitempty" tf:"multi_az,omitempty"`

	// Specifies the cluster name.
	// Changing this parameter will create a new cluster resource.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// Specifies the charging period of the CCE cluster.
	// If period_unit is set to month, the value ranges from 1 to 9.
	// If period_unit is set to year, the value ranges from 1 to 3.
	// This parameter is mandatory if charging_mode is set to prePaid.
	// Changing this parameter will create a new cluster resource.
	Period *float64 `json:"period,omitempty" tf:"period,omitempty"`

	// Specifies the charging period unit of the CCE cluster.
	// Valid values are month and year. This parameter is mandatory if charging_mode is set to prePaid.
	// Changing this parameter will create a new cluster resource.
	PeriodUnit *string `json:"periodUnit,omitempty" tf:"period_unit,omitempty"`

	// Specifies the region in which to create the CCE cluster resource.
	// If omitted, the provider-level region will be used. Changing this parameter will create a new cluster resource.
	Region *string `json:"region,omitempty" tf:"region,omitempty"`

	// Specifies the default worker node security group ID of the cluster.
	// If left empty, the system will automatically create a default worker node security group for you.
	// The default worker node security group needs to allow access from certain ports to ensure normal communications.
	// For details, see documentation.
	// If updated, the modified security group will only be applied to nodes newly created or accepted.
	// For existing nodes, you need to manually modify the security group rules for them.
	SecurityGroupID *string `json:"securityGroupId,omitempty" tf:"security_group_id,omitempty"`

	// Specifies the service network segment.
	// Changing this parameter will create a new cluster resource.
	ServiceNetworkCidr *string `json:"serviceNetworkCidr,omitempty" tf:"service_network_cidr,omitempty"`

	// Cluster status information.
	Status *string `json:"status,omitempty" tf:"status,omitempty"`

	// Specifies the ID of the subnet used to create the node which should be
	// configured with a DNS address. Changing this parameter will create a new cluster resource.
	SubnetID *string `json:"subnetId,omitempty" tf:"subnet_id,omitempty"`

	// Specifies whether to support Istio in the cluster.
	// Changing this parameter will create a new cluster resource.
	SupportIstio *bool `json:"supportIstio,omitempty" tf:"support_istio,omitempty"`

	// Specifies the tags of the CCE cluster, key/value pair format.
	Tags map[string]*string `json:"tags,omitempty" tf:"tags,omitempty"`

	// Specifies the ID of the VPC used to create the node.
	// Changing this parameter will create a new cluster resource.
	VPCID *string `json:"vpcId,omitempty" tf:"vpc_id,omitempty"`
}

type ClusterParameters struct {

	// Specifies the display name of a cluster. The value of alias cannot be the same as the name
	// and display names of other clusters.
	// +kubebuilder:validation:Optional
	Alias *string `json:"alias,omitempty" tf:"alias,omitempty"`

	// schema: Internal
	// +kubebuilder:validation:Optional
	Annotations map[string]*string `json:"annotations,omitempty" tf:"annotations,omitempty"`

	// Specifies the CA root certificate provided in the
	// authenticating_proxy mode. The input value can be a Base64 encoded string or not.
	// Changing this parameter will create a new cluster resource.
	// +kubebuilder:validation:Optional
	AuthenticatingProxyCA *string `json:"authenticatingProxyCa,omitempty" tf:"authenticating_proxy_ca,omitempty"`

	// Specifies the Client certificate provided in the
	// authenticating_proxy mode. The input value can be a Base64 encoded string or not.
	// Changing this parameter will create a new cluster resource.
	// +kubebuilder:validation:Optional
	AuthenticatingProxyCert *string `json:"authenticatingProxyCert,omitempty" tf:"authenticating_proxy_cert,omitempty"`

	// Specifies the private key of the client certificate
	// provided in the authenticating_proxy mode. The input value can be a Base64 encoded string or not.
	// Changing this parameter will create a new cluster resource.
	// +kubebuilder:validation:Optional
	AuthenticatingProxyPrivateKey *string `json:"authenticatingProxyPrivateKey,omitempty" tf:"authenticating_proxy_private_key,omitempty"`

	// Specifies the authentication mode of the cluster, possible values
	// are rbac and authenticating_proxy. Defaults to rbac.
	// Changing this parameter will create a new cluster resource.
	// +kubebuilder:validation:Optional
	AuthenticationMode *string `json:"authenticationMode,omitempty" tf:"authentication_mode,omitempty"`

	// +kubebuilder:validation:Optional
	AutoPay *string `json:"autoPay,omitempty" tf:"auto_pay,omitempty"`

	// Specifies whether auto renew is enabled. Valid values are true and false.
	// +kubebuilder:validation:Optional
	AutoRenew *string `json:"autoRenew,omitempty" tf:"auto_renew,omitempty"`

	// +kubebuilder:validation:Optional
	BillingMode *float64 `json:"billingMode,omitempty" tf:"billing_mode,omitempty"`

	// Specifies the charging mode of the CCE cluster.
	// Valid values are prePaid and postPaid, defaults to postPaid.
	// Changing this parameter will create a new cluster resource.
	// +kubebuilder:validation:Optional
	ChargingMode *string `json:"chargingMode,omitempty" tf:"charging_mode,omitempty"`

	// Specifies the cluster Type, possible values are VirtualMachine and
	// ARM64. Defaults to VirtualMachine. Changing this parameter will create a new cluster resource.
	// +kubebuilder:validation:Optional
	ClusterType *string `json:"clusterType,omitempty" tf:"cluster_type,omitempty"`

	// Specifies the cluster version, defaults to the latest supported
	// version. Changing this parameter will create a new cluster resource.
	// +kubebuilder:validation:Optional
	ClusterVersion *string `json:"clusterVersion,omitempty" tf:"cluster_version,omitempty"`

	// Specifies the kubernetes component configurations.
	// For details, see documentation.
	// The object structure is documented below.
	// Changing this parameter will create a new cluster resource.
	// +kubebuilder:validation:Optional
	ComponentConfigurations []ComponentConfigurationsParameters `json:"componentConfigurations,omitempty" tf:"component_configurations,omitempty"`

	// Specifies the container network segments.
	// In clusters of v1.21 and later, when the container_network_type is vpc-router, you can add multiple container
	// segments, separated with comma (,). In other situations, only the first segment takes effect.
	// +kubebuilder:validation:Optional
	ContainerNetworkCidr *string `json:"containerNetworkCidr,omitempty" tf:"container_network_cidr,omitempty"`

	// Specifies the container network type.
	// Changing this parameter will create a new cluster resource. Possible values:
	// +kubebuilder:validation:Optional
	ContainerNetworkType *string `json:"containerNetworkType,omitempty" tf:"container_network_type,omitempty"`

	// Specifies the custom san to add to certificate (array of string).
	// +kubebuilder:validation:Optional
	CustomSan []*string `json:"customSan,omitempty" tf:"custom_san,omitempty"`

	// Specified whether to delete all associated storage resources when deleting the CCE
	// cluster. valid values are true, try and false. Default is false.
	// +kubebuilder:validation:Optional
	DeleteAll *string `json:"deleteAll,omitempty" tf:"delete_all,omitempty"`

	// Specified whether to unbind associated SFS Turbo file systems when deleting the CCE
	// cluster. valid values are true, try and false. Default is false.
	// +kubebuilder:validation:Optional
	DeleteEFS *string `json:"deleteEfs,omitempty" tf:"delete_efs,omitempty"`

	// schema: Internal
	// +kubebuilder:validation:Optional
	DeleteEni *string `json:"deleteEni,omitempty" tf:"delete_eni,omitempty"`

	// Specified whether to delete associated EVS disks when deleting the CCE cluster.
	// valid values are true, try and false. Default is false.
	// +kubebuilder:validation:Optional
	DeleteEvs *string `json:"deleteEvs,omitempty" tf:"delete_evs,omitempty"`

	// schema: Internal
	// +kubebuilder:validation:Optional
	DeleteNet *string `json:"deleteNet,omitempty" tf:"delete_net,omitempty"`

	// Specified whether to delete associated OBS buckets when deleting the CCE cluster.
	// valid values are true, try and false. Default is false.
	// +kubebuilder:validation:Optional
	DeleteObs *string `json:"deleteObs,omitempty" tf:"delete_obs,omitempty"`

	// Specified whether to delete associated SFS file systems when deleting the CCE
	// cluster. valid values are true, try and false. Default is false.
	// +kubebuilder:validation:Optional
	DeleteSfs *string `json:"deleteSfs,omitempty" tf:"delete_sfs,omitempty"`

	// Specifies the cluster description.
	// +kubebuilder:validation:Optional
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// Specifies the EIP address of the cluster.
	// +kubebuilder:validation:Optional
	EIP *string `json:"eip,omitempty" tf:"eip,omitempty"`

	// schema: Internal
	// +kubebuilder:validation:Optional
	EnableDistributeManagement *bool `json:"enableDistributeManagement,omitempty" tf:"enable_distribute_management,omitempty"`

	// The ENI network segment. This value is valid when only one eni_subnet_id is specified.
	// schema: Computed
	// +kubebuilder:validation:Optional
	EniSubnetCidr *string `json:"eniSubnetCidr,omitempty" tf:"eni_subnet_cidr,omitempty"`

	// Specifies the IPv4 subnet ID of the subnet where the ENI resides.
	// Specified when creating a CCE Turbo cluster. You can add multiple IPv4 subnet ID, separated with comma (,).
	// Only adding subnets is allowed, removing subnets is not allowed.
	// the IPv4 subnet ID of the subnet where the ENI resides
	// +kubebuilder:validation:Optional
	EniSubnetID *string `json:"eniSubnetId,omitempty" tf:"eni_subnet_id,omitempty"`

	// The enterprise project ID of the CCE cluster.
	// +kubebuilder:validation:Optional
	EnterpriseProjectID *string `json:"enterpriseProjectId,omitempty" tf:"enterprise_project_id,omitempty"`

	// schema: Internal
	// +kubebuilder:validation:Optional
	ExtendParam map[string]*string `json:"extendParam,omitempty" tf:"extend_param,omitempty"`

	// Specifies the extended parameter.
	// The object structure is documented below.
	// Changing this parameter will create a new cluster resource.
	// +kubebuilder:validation:Optional
	ExtendParams []ExtendParamsParameters `json:"extendParams,omitempty" tf:"extend_params,omitempty"`

	// Specifies the cluster specifications.
	// Possible values:
	// +kubebuilder:validation:Optional
	FlavorID *string `json:"flavorId,omitempty" tf:"flavor_id,omitempty"`

	// Specifies whether to hibernate the CCE cluster. Defaults to false. After a cluster is
	// hibernated, resources such as workloads cannot be created or managed in the cluster, and the cluster cannot be
	// deleted.
	// +kubebuilder:validation:Optional
	Hibernate *bool `json:"hibernate,omitempty" tf:"hibernate,omitempty"`

	// Specifies the ID of the subnet used to create the node which should be
	// configured with a DNS address. Changing this parameter will create a new cluster resource.
	// schema: Internal
	// +kubebuilder:validation:Optional
	HighwaySubnetID *string `json:"highwaySubnetId,omitempty" tf:"highway_subnet_id,omitempty"`

	// Specifies whether to enable IPv6 in the cluster.
	// Changing this parameter will create a new cluster resource.
	// +kubebuilder:validation:Optional
	IPv6Enable *bool `json:"ipv6Enable,omitempty" tf:"ipv6_enable,omitempty"`

	// Specifies the service forwarding mode.
	// Changing this parameter will create a new cluster resource. Two modes are available:
	// +kubebuilder:validation:Optional
	KubeProxyMode *string `json:"kubeProxyMode,omitempty" tf:"kube_proxy_mode,omitempty"`

	// schema: Internal
	// +kubebuilder:validation:Optional
	Labels map[string]*string `json:"labels,omitempty" tf:"labels,omitempty"`

	// Specifies the advanced configuration of master nodes.
	// The object structure is documented below.
	// This parameter and multi_az are alternative. Changing this parameter will create a new cluster resource.
	// +kubebuilder:validation:Optional
	Masters []MastersParameters `json:"masters,omitempty" tf:"masters,omitempty"`

	// Specifies whether to enable multiple AZs for the cluster, only when using HA
	// flavors. Changing this parameter will create a new cluster resource. This parameter and masters are alternative.
	// +kubebuilder:validation:Optional
	MultiAz *bool `json:"multiAz,omitempty" tf:"multi_az,omitempty"`

	// Specifies the cluster name.
	// Changing this parameter will create a new cluster resource.
	// +kubebuilder:validation:Optional
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// Specifies the charging period of the CCE cluster.
	// If period_unit is set to month, the value ranges from 1 to 9.
	// If period_unit is set to year, the value ranges from 1 to 3.
	// This parameter is mandatory if charging_mode is set to prePaid.
	// Changing this parameter will create a new cluster resource.
	// +kubebuilder:validation:Optional
	Period *float64 `json:"period,omitempty" tf:"period,omitempty"`

	// Specifies the charging period unit of the CCE cluster.
	// Valid values are month and year. This parameter is mandatory if charging_mode is set to prePaid.
	// Changing this parameter will create a new cluster resource.
	// +kubebuilder:validation:Optional
	PeriodUnit *string `json:"periodUnit,omitempty" tf:"period_unit,omitempty"`

	// Specifies the region in which to create the CCE cluster resource.
	// If omitted, the provider-level region will be used. Changing this parameter will create a new cluster resource.
	// +kubebuilder:validation:Optional
	Region *string `json:"region,omitempty" tf:"region,omitempty"`

	// Specifies the default worker node security group ID of the cluster.
	// If left empty, the system will automatically create a default worker node security group for you.
	// The default worker node security group needs to allow access from certain ports to ensure normal communications.
	// For details, see documentation.
	// If updated, the modified security group will only be applied to nodes newly created or accepted.
	// For existing nodes, you need to manually modify the security group rules for them.
	// +kubebuilder:validation:Optional
	SecurityGroupID *string `json:"securityGroupId,omitempty" tf:"security_group_id,omitempty"`

	// Specifies the service network segment.
	// Changing this parameter will create a new cluster resource.
	// +kubebuilder:validation:Optional
	ServiceNetworkCidr *string `json:"serviceNetworkCidr,omitempty" tf:"service_network_cidr,omitempty"`

	// Specifies the ID of the subnet used to create the node which should be
	// configured with a DNS address. Changing this parameter will create a new cluster resource.
	// +kubebuilder:validation:Optional
	SubnetID *string `json:"subnetId,omitempty" tf:"subnet_id,omitempty"`

	// Specifies whether to support Istio in the cluster.
	// Changing this parameter will create a new cluster resource.
	// +kubebuilder:validation:Optional
	SupportIstio *bool `json:"supportIstio,omitempty" tf:"support_istio,omitempty"`

	// Specifies the tags of the CCE cluster, key/value pair format.
	// +kubebuilder:validation:Optional
	Tags map[string]*string `json:"tags,omitempty" tf:"tags,omitempty"`

	// Specifies the ID of the VPC used to create the node.
	// Changing this parameter will create a new cluster resource.
	// +kubebuilder:validation:Optional
	VPCID *string `json:"vpcId,omitempty" tf:"vpc_id,omitempty"`
}

type ComponentConfigurationsInitParameters struct {

	// Specifies JSON string of the component configurations.
	// Changing this parameter will create a new cluster resource.
	Configurations *string `json:"configurations,omitempty" tf:"configurations,omitempty"`

	// Specifies the component name.
	// Changing this parameter will create a new cluster resource.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`
}

type ComponentConfigurationsObservation struct {

	// Specifies JSON string of the component configurations.
	// Changing this parameter will create a new cluster resource.
	Configurations *string `json:"configurations,omitempty" tf:"configurations,omitempty"`

	// Specifies the component name.
	// Changing this parameter will create a new cluster resource.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`
}

type ComponentConfigurationsParameters struct {

	// Specifies JSON string of the component configurations.
	// Changing this parameter will create a new cluster resource.
	// +kubebuilder:validation:Optional
	Configurations *string `json:"configurations,omitempty" tf:"configurations,omitempty"`

	// Specifies the component name.
	// Changing this parameter will create a new cluster resource.
	// +kubebuilder:validation:Optional
	Name *string `json:"name" tf:"name,omitempty"`
}

type ExtendParamsInitParameters struct {

	// Specifies the cluster CPU management policy.
	// The value can be:
	CPUManagerPolicy *string `json:"cpuManagerPolicy,omitempty" tf:"cpu_manager_policy,omitempty"`

	// Specifies the AZ of master nodes in the cluster. The value can be:
	ClusterAz *string `json:"clusterAz,omitempty" tf:"cluster_az,omitempty"`

	// Specifies the specifications of the master node
	// in the dedicated hybrid cluster.
	// Changing this parameter will create a new cluster resource.
	DecMasterFlavor *string `json:"decMasterFlavor,omitempty" tf:"dec_master_flavor,omitempty"`

	// Specifies the default UmaskMode configuration of Docker in a
	// cluster. The value can be secure or normal, defaults to normal.
	// Changing this parameter will create a new cluster resource.
	DockerUmaskMode *string `json:"dockerUmaskMode,omitempty" tf:"docker_umask_mode,omitempty"`

	// Specifies whether the system and data disks of a master node
	// use dedicated distributed storage. If left unspecified, EVS disks are used by default.
	// This parameter is mandatory for dedicated CCE clusters.
	// It is in the following format:
	DssMasterVolumes *string `json:"dssMasterVolumes,omitempty" tf:"dss_master_volumes,omitempty"`

	// Specifies the number of mask bits of the fixed IP address pool
	// of the container network model. This field can only be used when container_network_type is set to vpc-router.
	// Changing this parameter will create a new cluster resource.
	FixPoolMask *string `json:"fixPoolMask,omitempty" tf:"fix_pool_mask,omitempty"`
}

type ExtendParamsObservation struct {

	// Specifies the cluster CPU management policy.
	// The value can be:
	CPUManagerPolicy *string `json:"cpuManagerPolicy,omitempty" tf:"cpu_manager_policy,omitempty"`

	// Specifies the AZ of master nodes in the cluster. The value can be:
	ClusterAz *string `json:"clusterAz,omitempty" tf:"cluster_az,omitempty"`

	// Specifies the specifications of the master node
	// in the dedicated hybrid cluster.
	// Changing this parameter will create a new cluster resource.
	DecMasterFlavor *string `json:"decMasterFlavor,omitempty" tf:"dec_master_flavor,omitempty"`

	// Specifies the default UmaskMode configuration of Docker in a
	// cluster. The value can be secure or normal, defaults to normal.
	// Changing this parameter will create a new cluster resource.
	DockerUmaskMode *string `json:"dockerUmaskMode,omitempty" tf:"docker_umask_mode,omitempty"`

	// Specifies whether the system and data disks of a master node
	// use dedicated distributed storage. If left unspecified, EVS disks are used by default.
	// This parameter is mandatory for dedicated CCE clusters.
	// It is in the following format:
	DssMasterVolumes *string `json:"dssMasterVolumes,omitempty" tf:"dss_master_volumes,omitempty"`

	// Specifies the number of mask bits of the fixed IP address pool
	// of the container network model. This field can only be used when container_network_type is set to vpc-router.
	// Changing this parameter will create a new cluster resource.
	FixPoolMask *string `json:"fixPoolMask,omitempty" tf:"fix_pool_mask,omitempty"`
}

type ExtendParamsParameters struct {

	// Specifies the cluster CPU management policy.
	// The value can be:
	// +kubebuilder:validation:Optional
	CPUManagerPolicy *string `json:"cpuManagerPolicy,omitempty" tf:"cpu_manager_policy,omitempty"`

	// Specifies the AZ of master nodes in the cluster. The value can be:
	// +kubebuilder:validation:Optional
	ClusterAz *string `json:"clusterAz,omitempty" tf:"cluster_az,omitempty"`

	// Specifies the specifications of the master node
	// in the dedicated hybrid cluster.
	// Changing this parameter will create a new cluster resource.
	// +kubebuilder:validation:Optional
	DecMasterFlavor *string `json:"decMasterFlavor,omitempty" tf:"dec_master_flavor,omitempty"`

	// Specifies the default UmaskMode configuration of Docker in a
	// cluster. The value can be secure or normal, defaults to normal.
	// Changing this parameter will create a new cluster resource.
	// +kubebuilder:validation:Optional
	DockerUmaskMode *string `json:"dockerUmaskMode,omitempty" tf:"docker_umask_mode,omitempty"`

	// Specifies whether the system and data disks of a master node
	// use dedicated distributed storage. If left unspecified, EVS disks are used by default.
	// This parameter is mandatory for dedicated CCE clusters.
	// It is in the following format:
	// +kubebuilder:validation:Optional
	DssMasterVolumes *string `json:"dssMasterVolumes,omitempty" tf:"dss_master_volumes,omitempty"`

	// Specifies the number of mask bits of the fixed IP address pool
	// of the container network model. This field can only be used when container_network_type is set to vpc-router.
	// Changing this parameter will create a new cluster resource.
	// +kubebuilder:validation:Optional
	FixPoolMask *string `json:"fixPoolMask,omitempty" tf:"fix_pool_mask,omitempty"`
}

type MastersInitParameters struct {

	// Specifies the availability zone of the master node.
	// Changing this parameter will create a new cluster resource.
	AvailabilityZone *string `json:"availabilityZone,omitempty" tf:"availability_zone,omitempty"`
}

type MastersObservation struct {

	// Specifies the availability zone of the master node.
	// Changing this parameter will create a new cluster resource.
	AvailabilityZone *string `json:"availabilityZone,omitempty" tf:"availability_zone,omitempty"`
}

type MastersParameters struct {

	// Specifies the availability zone of the master node.
	// Changing this parameter will create a new cluster resource.
	// +kubebuilder:validation:Optional
	AvailabilityZone *string `json:"availabilityZone,omitempty" tf:"availability_zone,omitempty"`
}

// ClusterSpec defines the desired state of Cluster
type ClusterSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     ClusterParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider ClusterInitParameters `json:"initProvider,omitempty"`
}

// ClusterStatus defines the observed state of Cluster.
type ClusterStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        ClusterObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// Cluster is the Schema for the Clusters API. ""
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,huaweicloud}
type Cluster struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.containerNetworkType) || (has(self.initProvider) && has(self.initProvider.containerNetworkType))",message="spec.forProvider.containerNetworkType is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.flavorId) || (has(self.initProvider) && has(self.initProvider.flavorId))",message="spec.forProvider.flavorId is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.name) || (has(self.initProvider) && has(self.initProvider.name))",message="spec.forProvider.name is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.subnetId) || (has(self.initProvider) && has(self.initProvider.subnetId))",message="spec.forProvider.subnetId is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.vpcId) || (has(self.initProvider) && has(self.initProvider.vpcId))",message="spec.forProvider.vpcId is a required parameter"
	Spec   ClusterSpec   `json:"spec"`
	Status ClusterStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// ClusterList contains a list of Clusters
type ClusterList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []Cluster `json:"items"`
}

// Repository type metadata.
var (
	Cluster_Kind             = "Cluster"
	Cluster_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: Cluster_Kind}.String()
	Cluster_KindAPIVersion   = Cluster_Kind + "." + CRDGroupVersion.String()
	Cluster_GroupVersionKind = CRDGroupVersion.WithKind(Cluster_Kind)
)

func init() {
	SchemeBuilder.Register(&Cluster{}, &ClusterList{})
}
