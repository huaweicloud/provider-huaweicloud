// SPDX-FileCopyrightText: 2024 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type AutoscalingInitParameters struct {

	// Specifies whether to enable auto scaling for the scaling group, defaults to false.
	Enable *bool `json:"enable,omitempty" tf:"enable,omitempty"`

	// Specifies the priority of the scaling group, defaults to 0.
	// A higher value indicates a greater priority.
	ExtensionPriority *float64 `json:"extensionPriority,omitempty" tf:"extension_priority,omitempty"`

	// Specifies the maximum number of nodes allowed if auto scaling is enabled.
	MaxNodeCount *float64 `json:"maxNodeCount,omitempty" tf:"max_node_count,omitempty"`

	// Specifies the minimum number of nodes allowed if auto scaling is enabled.
	MinNodeCount *float64 `json:"minNodeCount,omitempty" tf:"min_node_count,omitempty"`
}

type AutoscalingObservation struct {

	// Specifies whether to enable auto scaling for the scaling group, defaults to false.
	Enable *bool `json:"enable,omitempty" tf:"enable,omitempty"`

	// Specifies the priority of the scaling group, defaults to 0.
	// A higher value indicates a greater priority.
	ExtensionPriority *float64 `json:"extensionPriority,omitempty" tf:"extension_priority,omitempty"`

	// Specifies the maximum number of nodes allowed if auto scaling is enabled.
	MaxNodeCount *float64 `json:"maxNodeCount,omitempty" tf:"max_node_count,omitempty"`

	// Specifies the minimum number of nodes allowed if auto scaling is enabled.
	MinNodeCount *float64 `json:"minNodeCount,omitempty" tf:"min_node_count,omitempty"`
}

type AutoscalingParameters struct {

	// Specifies whether to enable auto scaling for the scaling group, defaults to false.
	// +kubebuilder:validation:Optional
	Enable *bool `json:"enable,omitempty" tf:"enable,omitempty"`

	// Specifies the priority of the scaling group, defaults to 0.
	// A higher value indicates a greater priority.
	// +kubebuilder:validation:Optional
	ExtensionPriority *float64 `json:"extensionPriority,omitempty" tf:"extension_priority,omitempty"`

	// Specifies the maximum number of nodes allowed if auto scaling is enabled.
	// +kubebuilder:validation:Optional
	MaxNodeCount *float64 `json:"maxNodeCount,omitempty" tf:"max_node_count,omitempty"`

	// Specifies the minimum number of nodes allowed if auto scaling is enabled.
	// +kubebuilder:validation:Optional
	MinNodeCount *float64 `json:"minNodeCount,omitempty" tf:"min_node_count,omitempty"`
}

type CapacityReservationSpecificationInitParameters struct {

	// The resource ID in UUID format.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// Specifies the capacity of a private storage pool. If the value is none,
	// the capacity reservation is not specified. If the value is targeted, the capacity reservation is specified.
	// In this case, the id cannot be left blank.
	Preference *string `json:"preference,omitempty" tf:"preference,omitempty"`
}

type CapacityReservationSpecificationObservation struct {

	// The resource ID in UUID format.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// Specifies the capacity of a private storage pool. If the value is none,
	// the capacity reservation is not specified. If the value is targeted, the capacity reservation is specified.
	// In this case, the id cannot be left blank.
	Preference *string `json:"preference,omitempty" tf:"preference,omitempty"`
}

type CapacityReservationSpecificationParameters struct {

	// The resource ID in UUID format.
	// +kubebuilder:validation:Optional
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// Specifies the capacity of a private storage pool. If the value is none,
	// the capacity reservation is not specified. If the value is targeted, the capacity reservation is specified.
	// In this case, the id cannot be left blank.
	// +kubebuilder:validation:Optional
	Preference *string `json:"preference,omitempty" tf:"preference,omitempty"`
}

type ExtensionScaleGroupsInitParameters struct {

	// Specifies the basic information about the extended scaling group.
	// The object structure is documented below.
	Metadata []MetadataInitParameters `json:"metadata,omitempty" tf:"metadata,omitempty"`

	// Specifies the configurations of the extended scaling group,
	// which carry different configurations from those of the default scaling group.
	// The object structure is documented below.
	Spec []SpecInitParameters `json:"spec,omitempty" tf:"spec,omitempty"`
}

type ExtensionScaleGroupsObservation struct {

	// Specifies the basic information about the extended scaling group.
	// The object structure is documented below.
	Metadata []MetadataObservation `json:"metadata,omitempty" tf:"metadata,omitempty"`

	// Specifies the configurations of the extended scaling group,
	// which carry different configurations from those of the default scaling group.
	// The object structure is documented below.
	Spec []SpecObservation `json:"spec,omitempty" tf:"spec,omitempty"`
}

type ExtensionScaleGroupsParameters struct {

	// Specifies the basic information about the extended scaling group.
	// The object structure is documented below.
	// +kubebuilder:validation:Optional
	Metadata []MetadataParameters `json:"metadata,omitempty" tf:"metadata,omitempty"`

	// Specifies the configurations of the extended scaling group,
	// which carry different configurations from those of the default scaling group.
	// The object structure is documented below.
	// +kubebuilder:validation:Optional
	Spec []SpecParameters `json:"spec,omitempty" tf:"spec,omitempty"`
}

type MetadataInitParameters struct {

	// Specifies the selector name, used as the index of selector_names in storage group.
	// The name of each selector must be unique. Changing this parameter will create a new resource.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`
}

type MetadataObservation struct {

	// Specifies the selector name, used as the index of selector_names in storage group.
	// The name of each selector must be unique. Changing this parameter will create a new resource.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`
}

type MetadataParameters struct {

	// Specifies the selector name, used as the index of selector_names in storage group.
	// The name of each selector must be unique. Changing this parameter will create a new resource.
	// +kubebuilder:validation:Optional
	Name *string `json:"name,omitempty" tf:"name,omitempty"`
}

type NodePoolDataVolumesInitParameters struct {

	// Specifies the DSS pool ID. This field is used only for dedicated storage.
	// Changing this parameter will create a new resource.
	DssPoolID *string `json:"dssPoolId,omitempty" tf:"dss_pool_id,omitempty"`

	ExtendParam *string `json:"extendParam,omitempty" tf:"extend_param,omitempty"`

	// Specifies the disk expansion parameters.
	// Changing this parameter will create a new resource.
	// +mapType=granular
	ExtendParams map[string]*string `json:"extendParams,omitempty" tf:"extend_params,omitempty"`

	// schema: Internal
	HwPassthrough *bool `json:"hwPassthrough,omitempty" tf:"hw_passthrough,omitempty"`

	// Specifies the KMS key ID. This is used to encrypt the volume.
	// Changing this parameter will create a new resource.
	KMSKeyID *string `json:"kmsKeyId,omitempty" tf:"kms_key_id,omitempty"`

	// Specifies the disk size in GB. Changing this parameter will create a new resource.
	Size *float64 `json:"size,omitempty" tf:"size,omitempty"`

	// Specifies the disk type. Changing this parameter will create a new resource.
	Volumetype *string `json:"volumetype,omitempty" tf:"volumetype,omitempty"`
}

type NodePoolDataVolumesObservation struct {

	// Specifies the DSS pool ID. This field is used only for dedicated storage.
	// Changing this parameter will create a new resource.
	DssPoolID *string `json:"dssPoolId,omitempty" tf:"dss_pool_id,omitempty"`

	ExtendParam *string `json:"extendParam,omitempty" tf:"extend_param,omitempty"`

	// Specifies the disk expansion parameters.
	// Changing this parameter will create a new resource.
	// +mapType=granular
	ExtendParams map[string]*string `json:"extendParams,omitempty" tf:"extend_params,omitempty"`

	// schema: Internal
	HwPassthrough *bool `json:"hwPassthrough,omitempty" tf:"hw_passthrough,omitempty"`

	// Specifies the KMS key ID. This is used to encrypt the volume.
	// Changing this parameter will create a new resource.
	KMSKeyID *string `json:"kmsKeyId,omitempty" tf:"kms_key_id,omitempty"`

	// Specifies the disk size in GB. Changing this parameter will create a new resource.
	Size *float64 `json:"size,omitempty" tf:"size,omitempty"`

	// Specifies the disk type. Changing this parameter will create a new resource.
	Volumetype *string `json:"volumetype,omitempty" tf:"volumetype,omitempty"`
}

type NodePoolDataVolumesParameters struct {

	// Specifies the DSS pool ID. This field is used only for dedicated storage.
	// Changing this parameter will create a new resource.
	// +kubebuilder:validation:Optional
	DssPoolID *string `json:"dssPoolId,omitempty" tf:"dss_pool_id,omitempty"`

	// +kubebuilder:validation:Optional
	ExtendParam *string `json:"extendParam,omitempty" tf:"extend_param,omitempty"`

	// Specifies the disk expansion parameters.
	// Changing this parameter will create a new resource.
	// +kubebuilder:validation:Optional
	// +mapType=granular
	ExtendParams map[string]*string `json:"extendParams,omitempty" tf:"extend_params,omitempty"`

	// schema: Internal
	// +kubebuilder:validation:Optional
	HwPassthrough *bool `json:"hwPassthrough,omitempty" tf:"hw_passthrough,omitempty"`

	// Specifies the KMS key ID. This is used to encrypt the volume.
	// Changing this parameter will create a new resource.
	// +kubebuilder:validation:Optional
	KMSKeyID *string `json:"kmsKeyId,omitempty" tf:"kms_key_id,omitempty"`

	// Specifies the disk size in GB. Changing this parameter will create a new resource.
	// +kubebuilder:validation:Optional
	Size *float64 `json:"size" tf:"size,omitempty"`

	// Specifies the disk type. Changing this parameter will create a new resource.
	// +kubebuilder:validation:Optional
	Volumetype *string `json:"volumetype" tf:"volumetype,omitempty"`
}

type NodePoolExtendParamsInitParameters struct {

	// Specifies the agency name.
	// Changing this parameter will create a new resource.
	AgencyName *string `json:"agencyName,omitempty" tf:"agency_name,omitempty"`

	// Specifies the available disk space of a single container on a node,
	// in GB. Changing this parameter will create a new resource.
	DockerBaseSize *float64 `json:"dockerBaseSize,omitempty" tf:"docker_base_size,omitempty"`

	// Specifies the reserved node memory, which is reserved for
	// Kubernetes-related components. Changing this parameter will create a new resource.
	KubeReservedMem *float64 `json:"kubeReservedMem,omitempty" tf:"kube_reserved_mem,omitempty"`

	// Specifies the node pool type. Possible values are: vm and ElasticBMS.
	MarketType *string `json:"marketType,omitempty" tf:"market_type,omitempty"`

	// Specifies the maximum number of instances a node is allowed to create.
	// Changing this parameter will create a new resource.
	MaxPods *float64 `json:"maxPods,omitempty" tf:"max_pods,omitempty"`

	// Specifies the ENI pre-binding thresholds.
	// Example setting: "0.3:0.6". Changing this parameter will create a new resource.
	NicThreshold *string `json:"nicThreshold,omitempty" tf:"nic_threshold,omitempty"`

	// Specifies the image ID to create the node.
	// Changing this parameter will create a new resource.
	NodeImageID *string `json:"nodeImageId,omitempty" tf:"node_image_id,omitempty"`

	// Specifies the number of ENI queues.
	// Example setting: "[{"queue":4}]". Changing this parameter will create a new resource.
	NodeMultiQueue *string `json:"nodeMultiQueue,omitempty" tf:"node_multi_queue,omitempty"`

	// Specifies the script to be executed after installation.
	// The input value can be a Base64 encoded string or not. Changing this parameter will create a new resource.
	Postinstall *string `json:"postinstall,omitempty" tf:"postinstall,omitempty"`

	// Specifies the script to be executed before installation.
	// The input value can be a Base64 encoded string or not. Changing this parameter will create a new resource.
	Preinstall *string `json:"preinstall,omitempty" tf:"preinstall,omitempty"`

	SpotPrice *string `json:"spotPrice,omitempty" tf:"spot_price,omitempty"`

	// Specifies the reserved node memory, which is reserved
	// value for system components. Changing this parameter will create a new resource.
	SystemReservedMem *float64 `json:"systemReservedMem,omitempty" tf:"system_reserved_mem,omitempty"`
}

type NodePoolExtendParamsObservation struct {

	// Specifies the agency name.
	// Changing this parameter will create a new resource.
	AgencyName *string `json:"agencyName,omitempty" tf:"agency_name,omitempty"`

	// Specifies the available disk space of a single container on a node,
	// in GB. Changing this parameter will create a new resource.
	DockerBaseSize *float64 `json:"dockerBaseSize,omitempty" tf:"docker_base_size,omitempty"`

	// Specifies the reserved node memory, which is reserved for
	// Kubernetes-related components. Changing this parameter will create a new resource.
	KubeReservedMem *float64 `json:"kubeReservedMem,omitempty" tf:"kube_reserved_mem,omitempty"`

	// Specifies the node pool type. Possible values are: vm and ElasticBMS.
	MarketType *string `json:"marketType,omitempty" tf:"market_type,omitempty"`

	// Specifies the maximum number of instances a node is allowed to create.
	// Changing this parameter will create a new resource.
	MaxPods *float64 `json:"maxPods,omitempty" tf:"max_pods,omitempty"`

	// Specifies the ENI pre-binding thresholds.
	// Example setting: "0.3:0.6". Changing this parameter will create a new resource.
	NicThreshold *string `json:"nicThreshold,omitempty" tf:"nic_threshold,omitempty"`

	// Specifies the image ID to create the node.
	// Changing this parameter will create a new resource.
	NodeImageID *string `json:"nodeImageId,omitempty" tf:"node_image_id,omitempty"`

	// Specifies the number of ENI queues.
	// Example setting: "[{"queue":4}]". Changing this parameter will create a new resource.
	NodeMultiQueue *string `json:"nodeMultiQueue,omitempty" tf:"node_multi_queue,omitempty"`

	// Specifies the script to be executed after installation.
	// The input value can be a Base64 encoded string or not. Changing this parameter will create a new resource.
	Postinstall *string `json:"postinstall,omitempty" tf:"postinstall,omitempty"`

	// Specifies the script to be executed before installation.
	// The input value can be a Base64 encoded string or not. Changing this parameter will create a new resource.
	Preinstall *string `json:"preinstall,omitempty" tf:"preinstall,omitempty"`

	SpotPrice *string `json:"spotPrice,omitempty" tf:"spot_price,omitempty"`

	// Specifies the reserved node memory, which is reserved
	// value for system components. Changing this parameter will create a new resource.
	SystemReservedMem *float64 `json:"systemReservedMem,omitempty" tf:"system_reserved_mem,omitempty"`
}

type NodePoolExtendParamsParameters struct {

	// Specifies the agency name.
	// Changing this parameter will create a new resource.
	// +kubebuilder:validation:Optional
	AgencyName *string `json:"agencyName,omitempty" tf:"agency_name,omitempty"`

	// Specifies the available disk space of a single container on a node,
	// in GB. Changing this parameter will create a new resource.
	// +kubebuilder:validation:Optional
	DockerBaseSize *float64 `json:"dockerBaseSize,omitempty" tf:"docker_base_size,omitempty"`

	// Specifies the reserved node memory, which is reserved for
	// Kubernetes-related components. Changing this parameter will create a new resource.
	// +kubebuilder:validation:Optional
	KubeReservedMem *float64 `json:"kubeReservedMem,omitempty" tf:"kube_reserved_mem,omitempty"`

	// Specifies the node pool type. Possible values are: vm and ElasticBMS.
	// +kubebuilder:validation:Optional
	MarketType *string `json:"marketType,omitempty" tf:"market_type,omitempty"`

	// Specifies the maximum number of instances a node is allowed to create.
	// Changing this parameter will create a new resource.
	// +kubebuilder:validation:Optional
	MaxPods *float64 `json:"maxPods,omitempty" tf:"max_pods,omitempty"`

	// Specifies the ENI pre-binding thresholds.
	// Example setting: "0.3:0.6". Changing this parameter will create a new resource.
	// +kubebuilder:validation:Optional
	NicThreshold *string `json:"nicThreshold,omitempty" tf:"nic_threshold,omitempty"`

	// Specifies the image ID to create the node.
	// Changing this parameter will create a new resource.
	// +kubebuilder:validation:Optional
	NodeImageID *string `json:"nodeImageId,omitempty" tf:"node_image_id,omitempty"`

	// Specifies the number of ENI queues.
	// Example setting: "[{"queue":4}]". Changing this parameter will create a new resource.
	// +kubebuilder:validation:Optional
	NodeMultiQueue *string `json:"nodeMultiQueue,omitempty" tf:"node_multi_queue,omitempty"`

	// Specifies the script to be executed after installation.
	// The input value can be a Base64 encoded string or not. Changing this parameter will create a new resource.
	// +kubebuilder:validation:Optional
	Postinstall *string `json:"postinstall,omitempty" tf:"postinstall,omitempty"`

	// Specifies the script to be executed before installation.
	// The input value can be a Base64 encoded string or not. Changing this parameter will create a new resource.
	// +kubebuilder:validation:Optional
	Preinstall *string `json:"preinstall,omitempty" tf:"preinstall,omitempty"`

	// +kubebuilder:validation:Optional
	SpotPrice *string `json:"spotPrice,omitempty" tf:"spot_price,omitempty"`

	// Specifies the reserved node memory, which is reserved
	// value for system components. Changing this parameter will create a new resource.
	// +kubebuilder:validation:Optional
	SystemReservedMem *float64 `json:"systemReservedMem,omitempty" tf:"system_reserved_mem,omitempty"`
}

type NodePoolHostnameConfigInitParameters struct {

	// Specifies the hostname type of the kubernetes node.
	// The value can be:
	Type *string `json:"type,omitempty" tf:"type,omitempty"`
}

type NodePoolHostnameConfigObservation struct {

	// Specifies the hostname type of the kubernetes node.
	// The value can be:
	Type *string `json:"type,omitempty" tf:"type,omitempty"`
}

type NodePoolHostnameConfigParameters struct {

	// Specifies the hostname type of the kubernetes node.
	// The value can be:
	// +kubebuilder:validation:Optional
	Type *string `json:"type" tf:"type,omitempty"`
}

type NodePoolInitParameters struct {

	// Specifies whether auto renew is enabled. Valid values are "true" and "false".
	// Changing this parameter will create a new resource.
	AutoRenew *string `json:"autoRenew,omitempty" tf:"auto_renew,omitempty"`

	// Specifies the name of the available partition (AZ). Default value
	// is random to create nodes in a random AZ in the node pool. Changing this parameter will create a new resource.
	AvailabilityZone *string `json:"availabilityZone,omitempty" tf:"availability_zone,omitempty"`

	// Specifies the charging mode of the CCE node pool. Valid values are
	// prePaid and postPaid, defaults to postPaid. Changing this parameter will create a new resource.
	ChargingMode *string `json:"chargingMode,omitempty" tf:"charging_mode,omitempty"`

	// Specifies the cluster ID.
	// Changing this parameter will create a new resource.
	// +crossplane:generate:reference:type=github.com/huaweicloud/provider-huaweicloud/apis/cce/v1alpha1.Cluster
	// +crossplane:generate:reference:extractor=github.com/crossplane/upjet/pkg/resource.ExtractResourceID()
	ClusterID *string `json:"clusterId,omitempty" tf:"cluster_id,omitempty"`

	// Reference to a Cluster in cce to populate clusterId.
	// +kubebuilder:validation:Optional
	ClusterIDRef *v1.Reference `json:"clusterIdRef,omitempty" tf:"-"`

	// Selector for a Cluster in cce to populate clusterId.
	// +kubebuilder:validation:Optional
	ClusterIDSelector *v1.Selector `json:"clusterIdSelector,omitempty" tf:"-"`

	// Specifies the configuration of the data disks.
	// The structure is described below. Changing this parameter will create a new resource.
	DataVolumes []NodePoolDataVolumesInitParameters `json:"dataVolumes,omitempty" tf:"data_volumes,omitempty"`

	// Specifies the ECS group ID. If specified, the node will be created under
	// the cloud server group. Changing this parameter will create a new resource.
	// +crossplane:generate:reference:type=github.com/huaweicloud/provider-huaweicloud/apis/ecs/v1alpha1.Servergroup
	// +crossplane:generate:reference:extractor=github.com/crossplane/upjet/pkg/resource.ExtractResourceID()
	EcsGroupID *string `json:"ecsGroupId,omitempty" tf:"ecs_group_id,omitempty"`

	// Reference to a Servergroup in ecs to populate ecsGroupId.
	// +kubebuilder:validation:Optional
	EcsGroupIDRef *v1.Reference `json:"ecsGroupIdRef,omitempty" tf:"-"`

	// Selector for a Servergroup in ecs to populate ecsGroupId.
	// +kubebuilder:validation:Optional
	EcsGroupIDSelector *v1.Selector `json:"ecsGroupIdSelector,omitempty" tf:"-"`

	// Specifies the enterprise project ID of the node pool.
	// If updated, the new value will apply only to new nodes.
	EnterpriseProjectID *string `json:"enterpriseProjectId,omitempty" tf:"enterprise_project_id,omitempty"`

	// schema: Deprecated; This parameter has been replaced by the 'extend_params' parameter.
	// +mapType=granular
	ExtendParam map[string]*string `json:"extendParam,omitempty" tf:"extend_param,omitempty"`

	// Specifies the extended parameters.
	// The object structure is documented below.
	// Changing this parameter will create a new resource.
	ExtendParams []NodePoolExtendParamsInitParameters `json:"extendParams,omitempty" tf:"extend_params,omitempty"`

	// Specifies the configurations of extended scaling groups in the node pool.
	// The object structure is documented below.
	ExtensionScaleGroups []ExtensionScaleGroupsInitParameters `json:"extensionScaleGroups,omitempty" tf:"extension_scale_groups,omitempty"`

	// Specifies the flavor ID. Changing this parameter will create a new
	// resource.
	FlavorID *string `json:"flavorId,omitempty" tf:"flavor_id,omitempty"`

	// Specifies the hostname config of the kubernetes node,
	// which is supported by clusters of v1.23.6-r0 to v1.25 or clusters of v1.25.2-r0 or later versions.
	// The object structure is documented below.
	// Changing this parameter will create a new resource.
	HostnameConfig []NodePoolHostnameConfigInitParameters `json:"hostnameConfig,omitempty" tf:"hostname_config,omitempty"`

	// Specifies the initial number of expected nodes in the node pool.
	// This parameter can be also used to manually scale the node count afterwards.
	InitialNodeCount *float64 `json:"initialNodeCount,omitempty" tf:"initial_node_count,omitempty"`

	// Specifies the custom initialization flags.
	InitializedConditions []*string `json:"initializedConditions,omitempty" tf:"initialized_conditions,omitempty"`

	// Specifies the key pair name when logging in to select the key pair mode.
	// This parameter and password are alternative. Changing this parameter will create a new resource.
	KeyPair *string `json:"keyPair,omitempty" tf:"key_pair,omitempty"`

	// Specifies the label policy on existing nodes.
	// The value can be ignore and refresh, defaults to refresh.
	LabelPolicyOnExistingNodes *string `json:"labelPolicyOnExistingNodes,omitempty" tf:"label_policy_on_existing_nodes,omitempty"`

	// Specifies the tags of a Kubernetes node, key/value pair format.
	// +mapType=granular
	Labels map[string]*string `json:"labels,omitempty" tf:"labels,omitempty"`

	// Specifies the maximum number of nodes allowed if auto scaling is enabled.
	MaxNodeCount *float64 `json:"maxNodeCount,omitempty" tf:"max_node_count,omitempty"`

	// Specifies the maximum number of instances a node is allowed to create.
	// Changing this parameter will create a new resource.
	// schema: Deprecated; This parameter can be configured in the 'extend_params' parameter.
	MaxPods *float64 `json:"maxPods,omitempty" tf:"max_pods,omitempty"`

	// Specifies the minimum number of nodes allowed if auto scaling is enabled.
	MinNodeCount *float64 `json:"minNodeCount,omitempty" tf:"min_node_count,omitempty"`

	// Specifies the node pool name.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// Specifies the operating system of the node.
	// The value can be EulerOS 2.9 and CentOS 7.6 e.g. For more details,
	// please see documentation.
	// This parameter is required when the node_image_id in extend_params is not specified.
	Os *string `json:"os,omitempty" tf:"os,omitempty"`

	// Specifies the root password when logging in to select the password mode.
	// The password consists of 8 to 26 characters and must contain at least three of following: uppercase letters,
	// lowercase letters, digits, special characters(!@$%^-_=+[{}]:,./?~#*).
	// This parameter can be plain or salted and is alternative to key_pair.
	// Changing this parameter will create a new resource.
	PasswordSecretRef *v1.SecretKeySelector `json:"passwordSecretRef,omitempty" tf:"-"`

	// Specifies the charging period of the CCE node pool. If period_unit is set to
	// month, the value ranges from 1 to 9. If period_unit is set to year, the value ranges from 1 to 3. This parameter
	// is mandatory if charging_mode is set to prePaid. Changing this parameter will create a new resource.
	Period *float64 `json:"period,omitempty" tf:"period,omitempty"`

	// Specifies the charging period unit of the CCE node pool.
	// Valid values are month and year. This parameter is mandatory if charging_mode is set to prePaid.
	// Changing this parameter will create a new resource.
	PeriodUnit *string `json:"periodUnit,omitempty" tf:"period_unit,omitempty"`

	// Specifies the list of security group IDs for the pod.
	// Only supported in CCE Turbo clusters of v1.19 and above. Changing this parameter will create a new resource.
	PodSecurityGroups []*string `json:"podSecurityGroups,omitempty" tf:"pod_security_groups,omitempty"`

	// Specifies the script to be executed after installation.
	// The input value can be a Base64 encoded string or not. Changing this parameter will create a new resource.
	// schema: Deprecated; This parameter can be configured in the 'extend_params' parameter.
	Postinstall *string `json:"postinstall,omitempty" tf:"postinstall,omitempty"`

	// Specifies the script to be executed before installation.
	// The input value can be a Base64 encoded string or not. Changing this parameter will create a new resource.
	// schema: Deprecated; This parameter can be configured in the 'extend_params' parameter.
	Preinstall *string `json:"preinstall,omitempty" tf:"preinstall,omitempty"`

	// Specifies the weight of the node pool.
	// A node pool with a higher weight has a higher priority during scaling.
	Priority *float64 `json:"priority,omitempty" tf:"priority,omitempty"`

	// The region in which to create the CCE pool resource. If omitted, the
	// provider-level region will be used. Changing this creates a new CCE node pool resource.
	Region *string `json:"region,omitempty" tf:"region,omitempty"`

	// Specifies the configuration of the system disk.
	// The structure is described below. Changing this parameter will create a new resource.
	RootVolume []NodePoolRootVolumeInitParameters `json:"rootVolume,omitempty" tf:"root_volume,omitempty"`

	// Specifies the runtime of the CCE node pool. Valid values are docker and
	// containerd. Changing this creates a new resource.
	Runtime *string `json:"runtime,omitempty" tf:"runtime,omitempty"`

	// Specifies the time interval between two scaling operations, in minutes.
	ScaleDownCooldownTime *float64 `json:"scaleDownCooldownTime,omitempty" tf:"scale_down_cooldown_time,omitempty"`

	// Specifies whether to enable auto scaling.
	// If Autoscaler is enabled, install the autoscaler add-on to use the auto scaling feature.
	ScallEnable *bool `json:"scallEnable,omitempty" tf:"scall_enable,omitempty"`

	// Specifies the list of custom security group IDs for the node pool.
	// If specified, the nodes will be put in these security groups. When specifying a security group, do not modify
	// the rules of the port on which CCE running depends. For details, see
	// documentation.
	SecurityGroups []*string `json:"securityGroups,omitempty" tf:"security_groups,omitempty"`

	// Specifies the disk initialization management parameter.
	// If omitted, disks are managed based on the DockerLVMConfigOverride parameter in extendParam.
	// This parameter is supported for clusters of v1.15.11 and later. Changing this parameter will create a new resource.
	Storage []NodePoolStorageInitParameters `json:"storage,omitempty" tf:"storage,omitempty"`

	// Specifies the ID of the subnet to which the NIC belongs.
	// Changing this parameter will create a new resource.
	// +crossplane:generate:reference:type=github.com/huaweicloud/provider-huaweicloud/apis/vpc/v1alpha1.Subnet
	// +crossplane:generate:reference:extractor=github.com/crossplane/upjet/pkg/resource.ExtractResourceID()
	SubnetID *string `json:"subnetId,omitempty" tf:"subnet_id,omitempty"`

	// Reference to a Subnet in vpc to populate subnetId.
	// +kubebuilder:validation:Optional
	SubnetIDRef *v1.Reference `json:"subnetIdRef,omitempty" tf:"-"`

	// Selector for a Subnet in vpc to populate subnetId.
	// +kubebuilder:validation:Optional
	SubnetIDSelector *v1.Selector `json:"subnetIdSelector,omitempty" tf:"-"`

	// Specifies the tag policy on existing nodes.
	// The value can be ignore and refresh, defaults to ignore.
	TagPolicyOnExistingNodes *string `json:"tagPolicyOnExistingNodes,omitempty" tf:"tag_policy_on_existing_nodes,omitempty"`

	// Specifies the tags of a VM node, key/value pair format.
	// +mapType=granular
	Tags map[string]*string `json:"tags,omitempty" tf:"tags,omitempty"`

	// Specifies the taint policy on existing nodes.
	// The value can be ignore and refresh, defaults to refresh.
	TaintPolicyOnExistingNodes *string `json:"taintPolicyOnExistingNodes,omitempty" tf:"taint_policy_on_existing_nodes,omitempty"`

	// Specifies the taints configuration of the nodes to set anti-affinity.
	// The structure is described below.
	Taints []NodePoolTaintsInitParameters `json:"taints,omitempty" tf:"taints,omitempty"`

	// Specifies the node pool type. Possible values are: vm and ElasticBMS.
	Type *string `json:"type,omitempty" tf:"type,omitempty"`
}

type NodePoolObservation struct {

	// Specifies whether auto renew is enabled. Valid values are "true" and "false".
	// Changing this parameter will create a new resource.
	AutoRenew *string `json:"autoRenew,omitempty" tf:"auto_renew,omitempty"`

	// Specifies the name of the available partition (AZ). Default value
	// is random to create nodes in a random AZ in the node pool. Changing this parameter will create a new resource.
	AvailabilityZone *string `json:"availabilityZone,omitempty" tf:"availability_zone,omitempty"`

	// Billing mode of a node.
	BillingMode *float64 `json:"billingMode,omitempty" tf:"billing_mode,omitempty"`

	// Specifies the charging mode of the CCE node pool. Valid values are
	// prePaid and postPaid, defaults to postPaid. Changing this parameter will create a new resource.
	ChargingMode *string `json:"chargingMode,omitempty" tf:"charging_mode,omitempty"`

	// Specifies the cluster ID.
	// Changing this parameter will create a new resource.
	ClusterID *string `json:"clusterId,omitempty" tf:"cluster_id,omitempty"`

	// The current number of the nodes.
	CurrentNodeCount *float64 `json:"currentNodeCount,omitempty" tf:"current_node_count,omitempty"`

	// Specifies the configuration of the data disks.
	// The structure is described below. Changing this parameter will create a new resource.
	DataVolumes []NodePoolDataVolumesObservation `json:"dataVolumes,omitempty" tf:"data_volumes,omitempty"`

	// Specifies the ECS group ID. If specified, the node will be created under
	// the cloud server group. Changing this parameter will create a new resource.
	EcsGroupID *string `json:"ecsGroupId,omitempty" tf:"ecs_group_id,omitempty"`

	// Specifies the enterprise project ID of the node pool.
	// If updated, the new value will apply only to new nodes.
	EnterpriseProjectID *string `json:"enterpriseProjectId,omitempty" tf:"enterprise_project_id,omitempty"`

	// schema: Deprecated; This parameter has been replaced by the 'extend_params' parameter.
	// +mapType=granular
	ExtendParam map[string]*string `json:"extendParam,omitempty" tf:"extend_param,omitempty"`

	// Specifies the extended parameters.
	// The object structure is documented below.
	// Changing this parameter will create a new resource.
	ExtendParams []NodePoolExtendParamsObservation `json:"extendParams,omitempty" tf:"extend_params,omitempty"`

	// Specifies the configurations of extended scaling groups in the node pool.
	// The object structure is documented below.
	ExtensionScaleGroups []ExtensionScaleGroupsObservation `json:"extensionScaleGroups,omitempty" tf:"extension_scale_groups,omitempty"`

	// Specifies the flavor ID. Changing this parameter will create a new
	// resource.
	FlavorID *string `json:"flavorId,omitempty" tf:"flavor_id,omitempty"`

	// Specifies the hostname config of the kubernetes node,
	// which is supported by clusters of v1.23.6-r0 to v1.25 or clusters of v1.25.2-r0 or later versions.
	// The object structure is documented below.
	// Changing this parameter will create a new resource.
	HostnameConfig []NodePoolHostnameConfigObservation `json:"hostnameConfig,omitempty" tf:"hostname_config,omitempty"`

	// The resource ID in UUID format.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// Specifies the initial number of expected nodes in the node pool.
	// This parameter can be also used to manually scale the node count afterwards.
	InitialNodeCount *float64 `json:"initialNodeCount,omitempty" tf:"initial_node_count,omitempty"`

	// Specifies the custom initialization flags.
	InitializedConditions []*string `json:"initializedConditions,omitempty" tf:"initialized_conditions,omitempty"`

	// Specifies the key pair name when logging in to select the key pair mode.
	// This parameter and password are alternative. Changing this parameter will create a new resource.
	KeyPair *string `json:"keyPair,omitempty" tf:"key_pair,omitempty"`

	// Specifies the label policy on existing nodes.
	// The value can be ignore and refresh, defaults to refresh.
	LabelPolicyOnExistingNodes *string `json:"labelPolicyOnExistingNodes,omitempty" tf:"label_policy_on_existing_nodes,omitempty"`

	// Specifies the tags of a Kubernetes node, key/value pair format.
	// +mapType=granular
	Labels map[string]*string `json:"labels,omitempty" tf:"labels,omitempty"`

	// Specifies the maximum number of nodes allowed if auto scaling is enabled.
	MaxNodeCount *float64 `json:"maxNodeCount,omitempty" tf:"max_node_count,omitempty"`

	// Specifies the maximum number of instances a node is allowed to create.
	// Changing this parameter will create a new resource.
	// schema: Deprecated; This parameter can be configured in the 'extend_params' parameter.
	MaxPods *float64 `json:"maxPods,omitempty" tf:"max_pods,omitempty"`

	// Specifies the minimum number of nodes allowed if auto scaling is enabled.
	MinNodeCount *float64 `json:"minNodeCount,omitempty" tf:"min_node_count,omitempty"`

	// Specifies the node pool name.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// Specifies the operating system of the node.
	// The value can be EulerOS 2.9 and CentOS 7.6 e.g. For more details,
	// please see documentation.
	// This parameter is required when the node_image_id in extend_params is not specified.
	Os *string `json:"os,omitempty" tf:"os,omitempty"`

	// Specifies the charging period of the CCE node pool. If period_unit is set to
	// month, the value ranges from 1 to 9. If period_unit is set to year, the value ranges from 1 to 3. This parameter
	// is mandatory if charging_mode is set to prePaid. Changing this parameter will create a new resource.
	Period *float64 `json:"period,omitempty" tf:"period,omitempty"`

	// Specifies the charging period unit of the CCE node pool.
	// Valid values are month and year. This parameter is mandatory if charging_mode is set to prePaid.
	// Changing this parameter will create a new resource.
	PeriodUnit *string `json:"periodUnit,omitempty" tf:"period_unit,omitempty"`

	// Specifies the list of security group IDs for the pod.
	// Only supported in CCE Turbo clusters of v1.19 and above. Changing this parameter will create a new resource.
	PodSecurityGroups []*string `json:"podSecurityGroups,omitempty" tf:"pod_security_groups,omitempty"`

	// Specifies the script to be executed after installation.
	// The input value can be a Base64 encoded string or not. Changing this parameter will create a new resource.
	// schema: Deprecated; This parameter can be configured in the 'extend_params' parameter.
	Postinstall *string `json:"postinstall,omitempty" tf:"postinstall,omitempty"`

	// Specifies the script to be executed before installation.
	// The input value can be a Base64 encoded string or not. Changing this parameter will create a new resource.
	// schema: Deprecated; This parameter can be configured in the 'extend_params' parameter.
	Preinstall *string `json:"preinstall,omitempty" tf:"preinstall,omitempty"`

	// Specifies the weight of the node pool.
	// A node pool with a higher weight has a higher priority during scaling.
	Priority *float64 `json:"priority,omitempty" tf:"priority,omitempty"`

	// The region in which to create the CCE pool resource. If omitted, the
	// provider-level region will be used. Changing this creates a new CCE node pool resource.
	Region *string `json:"region,omitempty" tf:"region,omitempty"`

	// Specifies the configuration of the system disk.
	// The structure is described below. Changing this parameter will create a new resource.
	RootVolume []NodePoolRootVolumeObservation `json:"rootVolume,omitempty" tf:"root_volume,omitempty"`

	// Specifies the runtime of the CCE node pool. Valid values are docker and
	// containerd. Changing this creates a new resource.
	Runtime *string `json:"runtime,omitempty" tf:"runtime,omitempty"`

	// Specifies the time interval between two scaling operations, in minutes.
	ScaleDownCooldownTime *float64 `json:"scaleDownCooldownTime,omitempty" tf:"scale_down_cooldown_time,omitempty"`

	// Specifies whether to enable auto scaling.
	// If Autoscaler is enabled, install the autoscaler add-on to use the auto scaling feature.
	ScallEnable *bool `json:"scallEnable,omitempty" tf:"scall_enable,omitempty"`

	// Specifies the list of custom security group IDs for the node pool.
	// If specified, the nodes will be put in these security groups. When specifying a security group, do not modify
	// the rules of the port on which CCE running depends. For details, see
	// documentation.
	SecurityGroups []*string `json:"securityGroups,omitempty" tf:"security_groups,omitempty"`

	// Node status information.
	Status *string `json:"status,omitempty" tf:"status,omitempty"`

	// Specifies the disk initialization management parameter.
	// If omitted, disks are managed based on the DockerLVMConfigOverride parameter in extendParam.
	// This parameter is supported for clusters of v1.15.11 and later. Changing this parameter will create a new resource.
	Storage []NodePoolStorageObservation `json:"storage,omitempty" tf:"storage,omitempty"`

	// Specifies the ID of the subnet to which the NIC belongs.
	// Changing this parameter will create a new resource.
	SubnetID *string `json:"subnetId,omitempty" tf:"subnet_id,omitempty"`

	// Specifies the tag policy on existing nodes.
	// The value can be ignore and refresh, defaults to ignore.
	TagPolicyOnExistingNodes *string `json:"tagPolicyOnExistingNodes,omitempty" tf:"tag_policy_on_existing_nodes,omitempty"`

	// Specifies the tags of a VM node, key/value pair format.
	// +mapType=granular
	Tags map[string]*string `json:"tags,omitempty" tf:"tags,omitempty"`

	// Specifies the taint policy on existing nodes.
	// The value can be ignore and refresh, defaults to refresh.
	TaintPolicyOnExistingNodes *string `json:"taintPolicyOnExistingNodes,omitempty" tf:"taint_policy_on_existing_nodes,omitempty"`

	// Specifies the taints configuration of the nodes to set anti-affinity.
	// The structure is described below.
	Taints []NodePoolTaintsObservation `json:"taints,omitempty" tf:"taints,omitempty"`

	// Specifies the node pool type. Possible values are: vm and ElasticBMS.
	Type *string `json:"type,omitempty" tf:"type,omitempty"`
}

type NodePoolParameters struct {

	// Specifies whether auto renew is enabled. Valid values are "true" and "false".
	// Changing this parameter will create a new resource.
	// +kubebuilder:validation:Optional
	AutoRenew *string `json:"autoRenew,omitempty" tf:"auto_renew,omitempty"`

	// Specifies the name of the available partition (AZ). Default value
	// is random to create nodes in a random AZ in the node pool. Changing this parameter will create a new resource.
	// +kubebuilder:validation:Optional
	AvailabilityZone *string `json:"availabilityZone,omitempty" tf:"availability_zone,omitempty"`

	// Specifies the charging mode of the CCE node pool. Valid values are
	// prePaid and postPaid, defaults to postPaid. Changing this parameter will create a new resource.
	// +kubebuilder:validation:Optional
	ChargingMode *string `json:"chargingMode,omitempty" tf:"charging_mode,omitempty"`

	// Specifies the cluster ID.
	// Changing this parameter will create a new resource.
	// +crossplane:generate:reference:type=github.com/huaweicloud/provider-huaweicloud/apis/cce/v1alpha1.Cluster
	// +crossplane:generate:reference:extractor=github.com/crossplane/upjet/pkg/resource.ExtractResourceID()
	// +kubebuilder:validation:Optional
	ClusterID *string `json:"clusterId,omitempty" tf:"cluster_id,omitempty"`

	// Reference to a Cluster in cce to populate clusterId.
	// +kubebuilder:validation:Optional
	ClusterIDRef *v1.Reference `json:"clusterIdRef,omitempty" tf:"-"`

	// Selector for a Cluster in cce to populate clusterId.
	// +kubebuilder:validation:Optional
	ClusterIDSelector *v1.Selector `json:"clusterIdSelector,omitempty" tf:"-"`

	// Specifies the configuration of the data disks.
	// The structure is described below. Changing this parameter will create a new resource.
	// +kubebuilder:validation:Optional
	DataVolumes []NodePoolDataVolumesParameters `json:"dataVolumes,omitempty" tf:"data_volumes,omitempty"`

	// Specifies the ECS group ID. If specified, the node will be created under
	// the cloud server group. Changing this parameter will create a new resource.
	// +crossplane:generate:reference:type=github.com/huaweicloud/provider-huaweicloud/apis/ecs/v1alpha1.Servergroup
	// +crossplane:generate:reference:extractor=github.com/crossplane/upjet/pkg/resource.ExtractResourceID()
	// +kubebuilder:validation:Optional
	EcsGroupID *string `json:"ecsGroupId,omitempty" tf:"ecs_group_id,omitempty"`

	// Reference to a Servergroup in ecs to populate ecsGroupId.
	// +kubebuilder:validation:Optional
	EcsGroupIDRef *v1.Reference `json:"ecsGroupIdRef,omitempty" tf:"-"`

	// Selector for a Servergroup in ecs to populate ecsGroupId.
	// +kubebuilder:validation:Optional
	EcsGroupIDSelector *v1.Selector `json:"ecsGroupIdSelector,omitempty" tf:"-"`

	// Specifies the enterprise project ID of the node pool.
	// If updated, the new value will apply only to new nodes.
	// +kubebuilder:validation:Optional
	EnterpriseProjectID *string `json:"enterpriseProjectId,omitempty" tf:"enterprise_project_id,omitempty"`

	// schema: Deprecated; This parameter has been replaced by the 'extend_params' parameter.
	// +kubebuilder:validation:Optional
	// +mapType=granular
	ExtendParam map[string]*string `json:"extendParam,omitempty" tf:"extend_param,omitempty"`

	// Specifies the extended parameters.
	// The object structure is documented below.
	// Changing this parameter will create a new resource.
	// +kubebuilder:validation:Optional
	ExtendParams []NodePoolExtendParamsParameters `json:"extendParams,omitempty" tf:"extend_params,omitempty"`

	// Specifies the configurations of extended scaling groups in the node pool.
	// The object structure is documented below.
	// +kubebuilder:validation:Optional
	ExtensionScaleGroups []ExtensionScaleGroupsParameters `json:"extensionScaleGroups,omitempty" tf:"extension_scale_groups,omitempty"`

	// Specifies the flavor ID. Changing this parameter will create a new
	// resource.
	// +kubebuilder:validation:Optional
	FlavorID *string `json:"flavorId,omitempty" tf:"flavor_id,omitempty"`

	// Specifies the hostname config of the kubernetes node,
	// which is supported by clusters of v1.23.6-r0 to v1.25 or clusters of v1.25.2-r0 or later versions.
	// The object structure is documented below.
	// Changing this parameter will create a new resource.
	// +kubebuilder:validation:Optional
	HostnameConfig []NodePoolHostnameConfigParameters `json:"hostnameConfig,omitempty" tf:"hostname_config,omitempty"`

	// Specifies the initial number of expected nodes in the node pool.
	// This parameter can be also used to manually scale the node count afterwards.
	// +kubebuilder:validation:Optional
	InitialNodeCount *float64 `json:"initialNodeCount,omitempty" tf:"initial_node_count,omitempty"`

	// Specifies the custom initialization flags.
	// +kubebuilder:validation:Optional
	InitializedConditions []*string `json:"initializedConditions,omitempty" tf:"initialized_conditions,omitempty"`

	// Specifies the key pair name when logging in to select the key pair mode.
	// This parameter and password are alternative. Changing this parameter will create a new resource.
	// +kubebuilder:validation:Optional
	KeyPair *string `json:"keyPair,omitempty" tf:"key_pair,omitempty"`

	// Specifies the label policy on existing nodes.
	// The value can be ignore and refresh, defaults to refresh.
	// +kubebuilder:validation:Optional
	LabelPolicyOnExistingNodes *string `json:"labelPolicyOnExistingNodes,omitempty" tf:"label_policy_on_existing_nodes,omitempty"`

	// Specifies the tags of a Kubernetes node, key/value pair format.
	// +kubebuilder:validation:Optional
	// +mapType=granular
	Labels map[string]*string `json:"labels,omitempty" tf:"labels,omitempty"`

	// Specifies the maximum number of nodes allowed if auto scaling is enabled.
	// +kubebuilder:validation:Optional
	MaxNodeCount *float64 `json:"maxNodeCount,omitempty" tf:"max_node_count,omitempty"`

	// Specifies the maximum number of instances a node is allowed to create.
	// Changing this parameter will create a new resource.
	// schema: Deprecated; This parameter can be configured in the 'extend_params' parameter.
	// +kubebuilder:validation:Optional
	MaxPods *float64 `json:"maxPods,omitempty" tf:"max_pods,omitempty"`

	// Specifies the minimum number of nodes allowed if auto scaling is enabled.
	// +kubebuilder:validation:Optional
	MinNodeCount *float64 `json:"minNodeCount,omitempty" tf:"min_node_count,omitempty"`

	// Specifies the node pool name.
	// +kubebuilder:validation:Optional
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// Specifies the operating system of the node.
	// The value can be EulerOS 2.9 and CentOS 7.6 e.g. For more details,
	// please see documentation.
	// This parameter is required when the node_image_id in extend_params is not specified.
	// +kubebuilder:validation:Optional
	Os *string `json:"os,omitempty" tf:"os,omitempty"`

	// Specifies the root password when logging in to select the password mode.
	// The password consists of 8 to 26 characters and must contain at least three of following: uppercase letters,
	// lowercase letters, digits, special characters(!@$%^-_=+[{}]:,./?~#*).
	// This parameter can be plain or salted and is alternative to key_pair.
	// Changing this parameter will create a new resource.
	// +kubebuilder:validation:Optional
	PasswordSecretRef *v1.SecretKeySelector `json:"passwordSecretRef,omitempty" tf:"-"`

	// Specifies the charging period of the CCE node pool. If period_unit is set to
	// month, the value ranges from 1 to 9. If period_unit is set to year, the value ranges from 1 to 3. This parameter
	// is mandatory if charging_mode is set to prePaid. Changing this parameter will create a new resource.
	// +kubebuilder:validation:Optional
	Period *float64 `json:"period,omitempty" tf:"period,omitempty"`

	// Specifies the charging period unit of the CCE node pool.
	// Valid values are month and year. This parameter is mandatory if charging_mode is set to prePaid.
	// Changing this parameter will create a new resource.
	// +kubebuilder:validation:Optional
	PeriodUnit *string `json:"periodUnit,omitempty" tf:"period_unit,omitempty"`

	// Specifies the list of security group IDs for the pod.
	// Only supported in CCE Turbo clusters of v1.19 and above. Changing this parameter will create a new resource.
	// +kubebuilder:validation:Optional
	PodSecurityGroups []*string `json:"podSecurityGroups,omitempty" tf:"pod_security_groups,omitempty"`

	// Specifies the script to be executed after installation.
	// The input value can be a Base64 encoded string or not. Changing this parameter will create a new resource.
	// schema: Deprecated; This parameter can be configured in the 'extend_params' parameter.
	// +kubebuilder:validation:Optional
	Postinstall *string `json:"postinstall,omitempty" tf:"postinstall,omitempty"`

	// Specifies the script to be executed before installation.
	// The input value can be a Base64 encoded string or not. Changing this parameter will create a new resource.
	// schema: Deprecated; This parameter can be configured in the 'extend_params' parameter.
	// +kubebuilder:validation:Optional
	Preinstall *string `json:"preinstall,omitempty" tf:"preinstall,omitempty"`

	// Specifies the weight of the node pool.
	// A node pool with a higher weight has a higher priority during scaling.
	// +kubebuilder:validation:Optional
	Priority *float64 `json:"priority,omitempty" tf:"priority,omitempty"`

	// The region in which to create the CCE pool resource. If omitted, the
	// provider-level region will be used. Changing this creates a new CCE node pool resource.
	// +kubebuilder:validation:Optional
	Region *string `json:"region,omitempty" tf:"region,omitempty"`

	// Specifies the configuration of the system disk.
	// The structure is described below. Changing this parameter will create a new resource.
	// +kubebuilder:validation:Optional
	RootVolume []NodePoolRootVolumeParameters `json:"rootVolume,omitempty" tf:"root_volume,omitempty"`

	// Specifies the runtime of the CCE node pool. Valid values are docker and
	// containerd. Changing this creates a new resource.
	// +kubebuilder:validation:Optional
	Runtime *string `json:"runtime,omitempty" tf:"runtime,omitempty"`

	// Specifies the time interval between two scaling operations, in minutes.
	// +kubebuilder:validation:Optional
	ScaleDownCooldownTime *float64 `json:"scaleDownCooldownTime,omitempty" tf:"scale_down_cooldown_time,omitempty"`

	// Specifies whether to enable auto scaling.
	// If Autoscaler is enabled, install the autoscaler add-on to use the auto scaling feature.
	// +kubebuilder:validation:Optional
	ScallEnable *bool `json:"scallEnable,omitempty" tf:"scall_enable,omitempty"`

	// Specifies the list of custom security group IDs for the node pool.
	// If specified, the nodes will be put in these security groups. When specifying a security group, do not modify
	// the rules of the port on which CCE running depends. For details, see
	// documentation.
	// +kubebuilder:validation:Optional
	SecurityGroups []*string `json:"securityGroups,omitempty" tf:"security_groups,omitempty"`

	// Specifies the disk initialization management parameter.
	// If omitted, disks are managed based on the DockerLVMConfigOverride parameter in extendParam.
	// This parameter is supported for clusters of v1.15.11 and later. Changing this parameter will create a new resource.
	// +kubebuilder:validation:Optional
	Storage []NodePoolStorageParameters `json:"storage,omitempty" tf:"storage,omitempty"`

	// Specifies the ID of the subnet to which the NIC belongs.
	// Changing this parameter will create a new resource.
	// +crossplane:generate:reference:type=github.com/huaweicloud/provider-huaweicloud/apis/vpc/v1alpha1.Subnet
	// +crossplane:generate:reference:extractor=github.com/crossplane/upjet/pkg/resource.ExtractResourceID()
	// +kubebuilder:validation:Optional
	SubnetID *string `json:"subnetId,omitempty" tf:"subnet_id,omitempty"`

	// Reference to a Subnet in vpc to populate subnetId.
	// +kubebuilder:validation:Optional
	SubnetIDRef *v1.Reference `json:"subnetIdRef,omitempty" tf:"-"`

	// Selector for a Subnet in vpc to populate subnetId.
	// +kubebuilder:validation:Optional
	SubnetIDSelector *v1.Selector `json:"subnetIdSelector,omitempty" tf:"-"`

	// Specifies the tag policy on existing nodes.
	// The value can be ignore and refresh, defaults to ignore.
	// +kubebuilder:validation:Optional
	TagPolicyOnExistingNodes *string `json:"tagPolicyOnExistingNodes,omitempty" tf:"tag_policy_on_existing_nodes,omitempty"`

	// Specifies the tags of a VM node, key/value pair format.
	// +kubebuilder:validation:Optional
	// +mapType=granular
	Tags map[string]*string `json:"tags,omitempty" tf:"tags,omitempty"`

	// Specifies the taint policy on existing nodes.
	// The value can be ignore and refresh, defaults to refresh.
	// +kubebuilder:validation:Optional
	TaintPolicyOnExistingNodes *string `json:"taintPolicyOnExistingNodes,omitempty" tf:"taint_policy_on_existing_nodes,omitempty"`

	// Specifies the taints configuration of the nodes to set anti-affinity.
	// The structure is described below.
	// +kubebuilder:validation:Optional
	Taints []NodePoolTaintsParameters `json:"taints,omitempty" tf:"taints,omitempty"`

	// Specifies the node pool type. Possible values are: vm and ElasticBMS.
	// +kubebuilder:validation:Optional
	Type *string `json:"type,omitempty" tf:"type,omitempty"`
}

type NodePoolRootVolumeInitParameters struct {

	// Specifies the DSS pool ID. This field is used only for dedicated storage.
	// Changing this parameter will create a new resource.
	DssPoolID *string `json:"dssPoolId,omitempty" tf:"dss_pool_id,omitempty"`

	ExtendParam *string `json:"extendParam,omitempty" tf:"extend_param,omitempty"`

	// Specifies the disk expansion parameters.
	// Changing this parameter will create a new resource.
	// +mapType=granular
	ExtendParams map[string]*string `json:"extendParams,omitempty" tf:"extend_params,omitempty"`

	// schema: Internal
	HwPassthrough *bool `json:"hwPassthrough,omitempty" tf:"hw_passthrough,omitempty"`

	// Specifies the KMS key ID. This is used to encrypt the volume.
	// Changing this parameter will create a new resource.
	KMSKeyID *string `json:"kmsKeyId,omitempty" tf:"kms_key_id,omitempty"`

	// Specifies the disk size in GB. Changing this parameter will create a new resource.
	Size *float64 `json:"size,omitempty" tf:"size,omitempty"`

	// Specifies the disk type. Changing this parameter will create a new resource.
	Volumetype *string `json:"volumetype,omitempty" tf:"volumetype,omitempty"`
}

type NodePoolRootVolumeObservation struct {

	// Specifies the DSS pool ID. This field is used only for dedicated storage.
	// Changing this parameter will create a new resource.
	DssPoolID *string `json:"dssPoolId,omitempty" tf:"dss_pool_id,omitempty"`

	ExtendParam *string `json:"extendParam,omitempty" tf:"extend_param,omitempty"`

	// Specifies the disk expansion parameters.
	// Changing this parameter will create a new resource.
	// +mapType=granular
	ExtendParams map[string]*string `json:"extendParams,omitempty" tf:"extend_params,omitempty"`

	// schema: Internal
	HwPassthrough *bool `json:"hwPassthrough,omitempty" tf:"hw_passthrough,omitempty"`

	// Specifies the KMS key ID. This is used to encrypt the volume.
	// Changing this parameter will create a new resource.
	KMSKeyID *string `json:"kmsKeyId,omitempty" tf:"kms_key_id,omitempty"`

	// Specifies the disk size in GB. Changing this parameter will create a new resource.
	Size *float64 `json:"size,omitempty" tf:"size,omitempty"`

	// Specifies the disk type. Changing this parameter will create a new resource.
	Volumetype *string `json:"volumetype,omitempty" tf:"volumetype,omitempty"`
}

type NodePoolRootVolumeParameters struct {

	// Specifies the DSS pool ID. This field is used only for dedicated storage.
	// Changing this parameter will create a new resource.
	// +kubebuilder:validation:Optional
	DssPoolID *string `json:"dssPoolId,omitempty" tf:"dss_pool_id,omitempty"`

	// +kubebuilder:validation:Optional
	ExtendParam *string `json:"extendParam,omitempty" tf:"extend_param,omitempty"`

	// Specifies the disk expansion parameters.
	// Changing this parameter will create a new resource.
	// +kubebuilder:validation:Optional
	// +mapType=granular
	ExtendParams map[string]*string `json:"extendParams,omitempty" tf:"extend_params,omitempty"`

	// schema: Internal
	// +kubebuilder:validation:Optional
	HwPassthrough *bool `json:"hwPassthrough,omitempty" tf:"hw_passthrough,omitempty"`

	// Specifies the KMS key ID. This is used to encrypt the volume.
	// Changing this parameter will create a new resource.
	// +kubebuilder:validation:Optional
	KMSKeyID *string `json:"kmsKeyId,omitempty" tf:"kms_key_id,omitempty"`

	// Specifies the disk size in GB. Changing this parameter will create a new resource.
	// +kubebuilder:validation:Optional
	Size *float64 `json:"size" tf:"size,omitempty"`

	// Specifies the disk type. Changing this parameter will create a new resource.
	// +kubebuilder:validation:Optional
	Volumetype *string `json:"volumetype" tf:"volumetype,omitempty"`
}

type NodePoolStorageGroupsInitParameters struct {

	// Specifies the whether the storage space is for kubernetes and
	// runtime components. Only one group can be set to true. The default value is false.
	// Changing this parameter will create a new resource.
	CceManaged *bool `json:"cceManaged,omitempty" tf:"cce_managed,omitempty"`

	// Specifies the selector name, used as the index of selector_names in storage group.
	// The name of each selector must be unique. Changing this parameter will create a new resource.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// Specifies the list of names of selectors to match.
	// This parameter corresponds to name in selectors. A group can match multiple selectors,
	// but a selector can match only one group. Changing this parameter will create a new resource.
	SelectorNames []*string `json:"selectorNames,omitempty" tf:"selector_names,omitempty"`

	// Specifies the detailed management of space configuration in a group.
	// Changing this parameter will create a new resource.
	VirtualSpaces []StorageGroupsVirtualSpacesInitParameters `json:"virtualSpaces,omitempty" tf:"virtual_spaces,omitempty"`
}

type NodePoolStorageGroupsObservation struct {

	// Specifies the whether the storage space is for kubernetes and
	// runtime components. Only one group can be set to true. The default value is false.
	// Changing this parameter will create a new resource.
	CceManaged *bool `json:"cceManaged,omitempty" tf:"cce_managed,omitempty"`

	// Specifies the selector name, used as the index of selector_names in storage group.
	// The name of each selector must be unique. Changing this parameter will create a new resource.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// Specifies the list of names of selectors to match.
	// This parameter corresponds to name in selectors. A group can match multiple selectors,
	// but a selector can match only one group. Changing this parameter will create a new resource.
	SelectorNames []*string `json:"selectorNames,omitempty" tf:"selector_names,omitempty"`

	// Specifies the detailed management of space configuration in a group.
	// Changing this parameter will create a new resource.
	VirtualSpaces []StorageGroupsVirtualSpacesObservation `json:"virtualSpaces,omitempty" tf:"virtual_spaces,omitempty"`
}

type NodePoolStorageGroupsParameters struct {

	// Specifies the whether the storage space is for kubernetes and
	// runtime components. Only one group can be set to true. The default value is false.
	// Changing this parameter will create a new resource.
	// +kubebuilder:validation:Optional
	CceManaged *bool `json:"cceManaged,omitempty" tf:"cce_managed,omitempty"`

	// Specifies the selector name, used as the index of selector_names in storage group.
	// The name of each selector must be unique. Changing this parameter will create a new resource.
	// +kubebuilder:validation:Optional
	Name *string `json:"name" tf:"name,omitempty"`

	// Specifies the list of names of selectors to match.
	// This parameter corresponds to name in selectors. A group can match multiple selectors,
	// but a selector can match only one group. Changing this parameter will create a new resource.
	// +kubebuilder:validation:Optional
	SelectorNames []*string `json:"selectorNames" tf:"selector_names,omitempty"`

	// Specifies the detailed management of space configuration in a group.
	// Changing this parameter will create a new resource.
	// +kubebuilder:validation:Optional
	VirtualSpaces []StorageGroupsVirtualSpacesParameters `json:"virtualSpaces" tf:"virtual_spaces,omitempty"`
}

type NodePoolStorageInitParameters struct {

	// Specifies the storage group consists of multiple storage devices.
	// This is used to divide storage space. Structure is documented below.
	// Changing this parameter will create a new resource.
	Groups []NodePoolStorageGroupsInitParameters `json:"groups,omitempty" tf:"groups,omitempty"`

	// Specifies the disk selection.
	// Matched disks are managed according to match labels and storage type. Structure is documented below.
	// Changing this parameter will create a new resource.
	Selectors []NodePoolStorageSelectorsInitParameters `json:"selectors,omitempty" tf:"selectors,omitempty"`
}

type NodePoolStorageObservation struct {

	// Specifies the storage group consists of multiple storage devices.
	// This is used to divide storage space. Structure is documented below.
	// Changing this parameter will create a new resource.
	Groups []NodePoolStorageGroupsObservation `json:"groups,omitempty" tf:"groups,omitempty"`

	// Specifies the disk selection.
	// Matched disks are managed according to match labels and storage type. Structure is documented below.
	// Changing this parameter will create a new resource.
	Selectors []NodePoolStorageSelectorsObservation `json:"selectors,omitempty" tf:"selectors,omitempty"`
}

type NodePoolStorageParameters struct {

	// Specifies the storage group consists of multiple storage devices.
	// This is used to divide storage space. Structure is documented below.
	// Changing this parameter will create a new resource.
	// +kubebuilder:validation:Optional
	Groups []NodePoolStorageGroupsParameters `json:"groups" tf:"groups,omitempty"`

	// Specifies the disk selection.
	// Matched disks are managed according to match labels and storage type. Structure is documented below.
	// Changing this parameter will create a new resource.
	// +kubebuilder:validation:Optional
	Selectors []NodePoolStorageSelectorsParameters `json:"selectors" tf:"selectors,omitempty"`
}

type NodePoolStorageSelectorsInitParameters struct {

	// Specifies the number of disks to be selected. If omitted,
	// all disks of this type are selected. Changing this parameter will create a new resource.
	MatchLabelCount *string `json:"matchLabelCount,omitempty" tf:"match_label_count,omitempty"`

	// Specifies the customer master key ID of an encrypted
	// disk. Changing this parameter will create a new resource.
	MatchLabelMetadataCmkid *string `json:"matchLabelMetadataCmkid,omitempty" tf:"match_label_metadata_cmkid,omitempty"`

	// Specifies the disk encryption identifier.
	// Values can be: 0 indicates that the disk is not encrypted and 1 indicates that the disk is encrypted.
	// If omitted, whether the disk is encrypted is not limited. Changing this parameter will create a new resource.
	MatchLabelMetadataEncrypted *string `json:"matchLabelMetadataEncrypted,omitempty" tf:"match_label_metadata_encrypted,omitempty"`

	// Specifies the matched disk size. If omitted,
	// the disk size is not limited. Example: 100. Changing this parameter will create a new resource.
	MatchLabelSize *string `json:"matchLabelSize,omitempty" tf:"match_label_size,omitempty"`

	// Specifies the EVS disk type. Currently,
	// SSD, GPSSD, and SAS are supported. If omitted, the disk type is not limited.
	// Changing this parameter will create a new resource.
	MatchLabelVolumeType *string `json:"matchLabelVolumeType,omitempty" tf:"match_label_volume_type,omitempty"`

	// Specifies the selector name, used as the index of selector_names in storage group.
	// The name of each selector must be unique. Changing this parameter will create a new resource.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// Specifies the node pool type. Possible values are: vm and ElasticBMS.
	Type *string `json:"type,omitempty" tf:"type,omitempty"`
}

type NodePoolStorageSelectorsObservation struct {

	// Specifies the number of disks to be selected. If omitted,
	// all disks of this type are selected. Changing this parameter will create a new resource.
	MatchLabelCount *string `json:"matchLabelCount,omitempty" tf:"match_label_count,omitempty"`

	// Specifies the customer master key ID of an encrypted
	// disk. Changing this parameter will create a new resource.
	MatchLabelMetadataCmkid *string `json:"matchLabelMetadataCmkid,omitempty" tf:"match_label_metadata_cmkid,omitempty"`

	// Specifies the disk encryption identifier.
	// Values can be: 0 indicates that the disk is not encrypted and 1 indicates that the disk is encrypted.
	// If omitted, whether the disk is encrypted is not limited. Changing this parameter will create a new resource.
	MatchLabelMetadataEncrypted *string `json:"matchLabelMetadataEncrypted,omitempty" tf:"match_label_metadata_encrypted,omitempty"`

	// Specifies the matched disk size. If omitted,
	// the disk size is not limited. Example: 100. Changing this parameter will create a new resource.
	MatchLabelSize *string `json:"matchLabelSize,omitempty" tf:"match_label_size,omitempty"`

	// Specifies the EVS disk type. Currently,
	// SSD, GPSSD, and SAS are supported. If omitted, the disk type is not limited.
	// Changing this parameter will create a new resource.
	MatchLabelVolumeType *string `json:"matchLabelVolumeType,omitempty" tf:"match_label_volume_type,omitempty"`

	// Specifies the selector name, used as the index of selector_names in storage group.
	// The name of each selector must be unique. Changing this parameter will create a new resource.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// Specifies the node pool type. Possible values are: vm and ElasticBMS.
	Type *string `json:"type,omitempty" tf:"type,omitempty"`
}

type NodePoolStorageSelectorsParameters struct {

	// Specifies the number of disks to be selected. If omitted,
	// all disks of this type are selected. Changing this parameter will create a new resource.
	// +kubebuilder:validation:Optional
	MatchLabelCount *string `json:"matchLabelCount,omitempty" tf:"match_label_count,omitempty"`

	// Specifies the customer master key ID of an encrypted
	// disk. Changing this parameter will create a new resource.
	// +kubebuilder:validation:Optional
	MatchLabelMetadataCmkid *string `json:"matchLabelMetadataCmkid,omitempty" tf:"match_label_metadata_cmkid,omitempty"`

	// Specifies the disk encryption identifier.
	// Values can be: 0 indicates that the disk is not encrypted and 1 indicates that the disk is encrypted.
	// If omitted, whether the disk is encrypted is not limited. Changing this parameter will create a new resource.
	// +kubebuilder:validation:Optional
	MatchLabelMetadataEncrypted *string `json:"matchLabelMetadataEncrypted,omitempty" tf:"match_label_metadata_encrypted,omitempty"`

	// Specifies the matched disk size. If omitted,
	// the disk size is not limited. Example: 100. Changing this parameter will create a new resource.
	// +kubebuilder:validation:Optional
	MatchLabelSize *string `json:"matchLabelSize,omitempty" tf:"match_label_size,omitempty"`

	// Specifies the EVS disk type. Currently,
	// SSD, GPSSD, and SAS are supported. If omitted, the disk type is not limited.
	// Changing this parameter will create a new resource.
	// +kubebuilder:validation:Optional
	MatchLabelVolumeType *string `json:"matchLabelVolumeType,omitempty" tf:"match_label_volume_type,omitempty"`

	// Specifies the selector name, used as the index of selector_names in storage group.
	// The name of each selector must be unique. Changing this parameter will create a new resource.
	// +kubebuilder:validation:Optional
	Name *string `json:"name" tf:"name,omitempty"`

	// Specifies the node pool type. Possible values are: vm and ElasticBMS.
	// +kubebuilder:validation:Optional
	Type *string `json:"type,omitempty" tf:"type,omitempty"`
}

type NodePoolTaintsInitParameters struct {

	// Available options are NoSchedule, PreferNoSchedule, and NoExecute.
	Effect *string `json:"effect,omitempty" tf:"effect,omitempty"`

	// A key must contain 1 to 63 characters starting with a letter or digit. Only letters,
	// digits, hyphens (-), underscores (_), and periods (.) are allowed. A DNS subdomain name can be used as the
	// prefix of a key.
	Key *string `json:"key,omitempty" tf:"key,omitempty"`

	// A value must start with a letter or digit and can contain a maximum of 63 characters,
	// including letters, digits, hyphens (-), underscores (_), and periods (.).
	Value *string `json:"value,omitempty" tf:"value,omitempty"`
}

type NodePoolTaintsObservation struct {

	// Available options are NoSchedule, PreferNoSchedule, and NoExecute.
	Effect *string `json:"effect,omitempty" tf:"effect,omitempty"`

	// A key must contain 1 to 63 characters starting with a letter or digit. Only letters,
	// digits, hyphens (-), underscores (_), and periods (.) are allowed. A DNS subdomain name can be used as the
	// prefix of a key.
	Key *string `json:"key,omitempty" tf:"key,omitempty"`

	// A value must start with a letter or digit and can contain a maximum of 63 characters,
	// including letters, digits, hyphens (-), underscores (_), and periods (.).
	Value *string `json:"value,omitempty" tf:"value,omitempty"`
}

type NodePoolTaintsParameters struct {

	// Available options are NoSchedule, PreferNoSchedule, and NoExecute.
	// +kubebuilder:validation:Optional
	Effect *string `json:"effect" tf:"effect,omitempty"`

	// A key must contain 1 to 63 characters starting with a letter or digit. Only letters,
	// digits, hyphens (-), underscores (_), and periods (.) are allowed. A DNS subdomain name can be used as the
	// prefix of a key.
	// +kubebuilder:validation:Optional
	Key *string `json:"key" tf:"key,omitempty"`

	// A value must start with a letter or digit and can contain a maximum of 63 characters,
	// including letters, digits, hyphens (-), underscores (_), and periods (.).
	// +kubebuilder:validation:Optional
	Value *string `json:"value" tf:"value,omitempty"`
}

type SpecInitParameters struct {

	// Specifies the auto scaling configurations of the extended scaling group.
	// The object structure is documented below.
	Autoscaling []AutoscalingInitParameters `json:"autoscaling,omitempty" tf:"autoscaling,omitempty"`

	// Specifies the availability zone of a node.
	// If this parameter is not specified or left blank, the default scaling group configurations take effect.
	Az *string `json:"az,omitempty" tf:"az,omitempty"`

	// Specifies the capacity reservation
	// configurations of the extended scaling group.
	// The object structure is documented below.
	CapacityReservationSpecification []CapacityReservationSpecificationInitParameters `json:"capacityReservationSpecification,omitempty" tf:"capacity_reservation_specification,omitempty"`

	// Specifies the node flavor.
	Flavor *string `json:"flavor,omitempty" tf:"flavor,omitempty"`
}

type SpecObservation struct {

	// Specifies the auto scaling configurations of the extended scaling group.
	// The object structure is documented below.
	Autoscaling []AutoscalingObservation `json:"autoscaling,omitempty" tf:"autoscaling,omitempty"`

	// Specifies the availability zone of a node.
	// If this parameter is not specified or left blank, the default scaling group configurations take effect.
	Az *string `json:"az,omitempty" tf:"az,omitempty"`

	// Specifies the capacity reservation
	// configurations of the extended scaling group.
	// The object structure is documented below.
	CapacityReservationSpecification []CapacityReservationSpecificationObservation `json:"capacityReservationSpecification,omitempty" tf:"capacity_reservation_specification,omitempty"`

	// Specifies the node flavor.
	Flavor *string `json:"flavor,omitempty" tf:"flavor,omitempty"`
}

type SpecParameters struct {

	// Specifies the auto scaling configurations of the extended scaling group.
	// The object structure is documented below.
	// +kubebuilder:validation:Optional
	Autoscaling []AutoscalingParameters `json:"autoscaling,omitempty" tf:"autoscaling,omitempty"`

	// Specifies the availability zone of a node.
	// If this parameter is not specified or left blank, the default scaling group configurations take effect.
	// +kubebuilder:validation:Optional
	Az *string `json:"az,omitempty" tf:"az,omitempty"`

	// Specifies the capacity reservation
	// configurations of the extended scaling group.
	// The object structure is documented below.
	// +kubebuilder:validation:Optional
	CapacityReservationSpecification []CapacityReservationSpecificationParameters `json:"capacityReservationSpecification,omitempty" tf:"capacity_reservation_specification,omitempty"`

	// Specifies the node flavor.
	// +kubebuilder:validation:Optional
	Flavor *string `json:"flavor,omitempty" tf:"flavor,omitempty"`
}

type StorageGroupsVirtualSpacesInitParameters struct {

	// Specifies the LVM write mode, values can be linear and striped.
	// This parameter takes effect only in kubernetes and user configuration. Changing this parameter will create
	// a new resource.
	LvmLvType *string `json:"lvmLvType,omitempty" tf:"lvm_lv_type,omitempty"`

	// Specifies the absolute path to which the disk is attached.
	// This parameter takes effect only in user configuration. Changing this parameter will create a new resource.
	LvmPath *string `json:"lvmPath,omitempty" tf:"lvm_path,omitempty"`

	// Specifies the selector name, used as the index of selector_names in storage group.
	// The name of each selector must be unique. Changing this parameter will create a new resource.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// Specifies the LVM write mode, values can be linear and striped.
	// This parameter takes effect only in runtime configuration. Changing this parameter will create a new resource.
	RuntimeLvType *string `json:"runtimeLvType,omitempty" tf:"runtime_lv_type,omitempty"`

	// Specifies the size of a virtual space. Only an integer percentage is supported.
	// Example: 90%. Note that the total percentage of all virtual spaces in a group cannot exceed 100%.
	// Changing this parameter will create a new resource.
	Size *string `json:"size,omitempty" tf:"size,omitempty"`
}

type StorageGroupsVirtualSpacesObservation struct {

	// Specifies the LVM write mode, values can be linear and striped.
	// This parameter takes effect only in kubernetes and user configuration. Changing this parameter will create
	// a new resource.
	LvmLvType *string `json:"lvmLvType,omitempty" tf:"lvm_lv_type,omitempty"`

	// Specifies the absolute path to which the disk is attached.
	// This parameter takes effect only in user configuration. Changing this parameter will create a new resource.
	LvmPath *string `json:"lvmPath,omitempty" tf:"lvm_path,omitempty"`

	// Specifies the selector name, used as the index of selector_names in storage group.
	// The name of each selector must be unique. Changing this parameter will create a new resource.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// Specifies the LVM write mode, values can be linear and striped.
	// This parameter takes effect only in runtime configuration. Changing this parameter will create a new resource.
	RuntimeLvType *string `json:"runtimeLvType,omitempty" tf:"runtime_lv_type,omitempty"`

	// Specifies the size of a virtual space. Only an integer percentage is supported.
	// Example: 90%. Note that the total percentage of all virtual spaces in a group cannot exceed 100%.
	// Changing this parameter will create a new resource.
	Size *string `json:"size,omitempty" tf:"size,omitempty"`
}

type StorageGroupsVirtualSpacesParameters struct {

	// Specifies the LVM write mode, values can be linear and striped.
	// This parameter takes effect only in kubernetes and user configuration. Changing this parameter will create
	// a new resource.
	// +kubebuilder:validation:Optional
	LvmLvType *string `json:"lvmLvType,omitempty" tf:"lvm_lv_type,omitempty"`

	// Specifies the absolute path to which the disk is attached.
	// This parameter takes effect only in user configuration. Changing this parameter will create a new resource.
	// +kubebuilder:validation:Optional
	LvmPath *string `json:"lvmPath,omitempty" tf:"lvm_path,omitempty"`

	// Specifies the selector name, used as the index of selector_names in storage group.
	// The name of each selector must be unique. Changing this parameter will create a new resource.
	// +kubebuilder:validation:Optional
	Name *string `json:"name" tf:"name,omitempty"`

	// Specifies the LVM write mode, values can be linear and striped.
	// This parameter takes effect only in runtime configuration. Changing this parameter will create a new resource.
	// +kubebuilder:validation:Optional
	RuntimeLvType *string `json:"runtimeLvType,omitempty" tf:"runtime_lv_type,omitempty"`

	// Specifies the size of a virtual space. Only an integer percentage is supported.
	// Example: 90%. Note that the total percentage of all virtual spaces in a group cannot exceed 100%.
	// Changing this parameter will create a new resource.
	// +kubebuilder:validation:Optional
	Size *string `json:"size" tf:"size,omitempty"`
}

// NodePoolSpec defines the desired state of NodePool
type NodePoolSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     NodePoolParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider NodePoolInitParameters `json:"initProvider,omitempty"`
}

// NodePoolStatus defines the observed state of NodePool.
type NodePoolStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        NodePoolObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// NodePool is the Schema for the NodePools API. ""
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,huaweicloud}
type NodePool struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.dataVolumes) || (has(self.initProvider) && has(self.initProvider.dataVolumes))",message="spec.forProvider.dataVolumes is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.flavorId) || (has(self.initProvider) && has(self.initProvider.flavorId))",message="spec.forProvider.flavorId is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.initialNodeCount) || (has(self.initProvider) && has(self.initProvider.initialNodeCount))",message="spec.forProvider.initialNodeCount is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.name) || (has(self.initProvider) && has(self.initProvider.name))",message="spec.forProvider.name is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.rootVolume) || (has(self.initProvider) && has(self.initProvider.rootVolume))",message="spec.forProvider.rootVolume is a required parameter"
	Spec   NodePoolSpec   `json:"spec"`
	Status NodePoolStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// NodePoolList contains a list of NodePools
type NodePoolList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []NodePool `json:"items"`
}

// Repository type metadata.
var (
	NodePool_Kind             = "NodePool"
	NodePool_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: NodePool_Kind}.String()
	NodePool_KindAPIVersion   = NodePool_Kind + "." + CRDGroupVersion.String()
	NodePool_GroupVersionKind = CRDGroupVersion.WithKind(NodePool_Kind)
)

func init() {
	SchemeBuilder.Register(&NodePool{}, &NodePoolList{})
}
