// SPDX-FileCopyrightText: 2024 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type DataVolumesInitParameters struct {

	// Specifies the DSS pool ID. This field is used only for
	// dedicated storage. Changing this parameter will create a new resource.
	DssPoolID *string `json:"dssPoolId,omitempty" tf:"dss_pool_id,omitempty"`

	ExtendParam *string `json:"extendParam,omitempty" tf:"extend_param,omitempty"`

	// Specifies the disk expansion parameters.
	// Changing this parameter will create a new resource.
	// +mapType=granular
	ExtendParams map[string]*string `json:"extendParams,omitempty" tf:"extend_params,omitempty"`

	// schema: Internal
	HwPassthrough *bool `json:"hwPassthrough,omitempty" tf:"hw_passthrough,omitempty"`

	// Specifies the ID of a KMS key. This is used to encrypt the volume.
	// Changing this parameter will create a new resource.
	KMSKeyID *string `json:"kmsKeyId,omitempty" tf:"kms_key_id,omitempty"`

	// Specifies the disk size in GB.
	// Changing this parameter will create a new resource.
	Size *float64 `json:"size,omitempty" tf:"size,omitempty"`

	// Specifies the disk type.
	// Changing this parameter will create a new resource.
	Volumetype *string `json:"volumetype,omitempty" tf:"volumetype,omitempty"`
}

type DataVolumesObservation struct {

	// Specifies the DSS pool ID. This field is used only for
	// dedicated storage. Changing this parameter will create a new resource.
	DssPoolID *string `json:"dssPoolId,omitempty" tf:"dss_pool_id,omitempty"`

	ExtendParam *string `json:"extendParam,omitempty" tf:"extend_param,omitempty"`

	// Specifies the disk expansion parameters.
	// Changing this parameter will create a new resource.
	// +mapType=granular
	ExtendParams map[string]*string `json:"extendParams,omitempty" tf:"extend_params,omitempty"`

	// schema: Internal
	HwPassthrough *bool `json:"hwPassthrough,omitempty" tf:"hw_passthrough,omitempty"`

	// Specifies the ID of a KMS key. This is used to encrypt the volume.
	// Changing this parameter will create a new resource.
	KMSKeyID *string `json:"kmsKeyId,omitempty" tf:"kms_key_id,omitempty"`

	// Specifies the disk size in GB.
	// Changing this parameter will create a new resource.
	Size *float64 `json:"size,omitempty" tf:"size,omitempty"`

	// Specifies the disk type.
	// Changing this parameter will create a new resource.
	Volumetype *string `json:"volumetype,omitempty" tf:"volumetype,omitempty"`
}

type DataVolumesParameters struct {

	// Specifies the DSS pool ID. This field is used only for
	// dedicated storage. Changing this parameter will create a new resource.
	// +kubebuilder:validation:Optional
	DssPoolID *string `json:"dssPoolId,omitempty" tf:"dss_pool_id,omitempty"`

	// +kubebuilder:validation:Optional
	ExtendParam *string `json:"extendParam,omitempty" tf:"extend_param,omitempty"`

	// Specifies the disk expansion parameters.
	// Changing this parameter will create a new resource.
	// +kubebuilder:validation:Optional
	// +mapType=granular
	ExtendParams map[string]*string `json:"extendParams,omitempty" tf:"extend_params,omitempty"`

	// schema: Internal
	// +kubebuilder:validation:Optional
	HwPassthrough *bool `json:"hwPassthrough,omitempty" tf:"hw_passthrough,omitempty"`

	// Specifies the ID of a KMS key. This is used to encrypt the volume.
	// Changing this parameter will create a new resource.
	// +kubebuilder:validation:Optional
	KMSKeyID *string `json:"kmsKeyId,omitempty" tf:"kms_key_id,omitempty"`

	// Specifies the disk size in GB.
	// Changing this parameter will create a new resource.
	// +kubebuilder:validation:Optional
	Size *float64 `json:"size" tf:"size,omitempty"`

	// Specifies the disk type.
	// Changing this parameter will create a new resource.
	// +kubebuilder:validation:Optional
	Volumetype *string `json:"volumetype" tf:"volumetype,omitempty"`
}

type ExtensionNicsInitParameters struct {

	// Specifies the ID of the subnet to which the NIC belongs.
	// Changing this parameter will create a new resource.
	SubnetID *string `json:"subnetId,omitempty" tf:"subnet_id,omitempty"`
}

type ExtensionNicsObservation struct {

	// Specifies the ID of the subnet to which the NIC belongs.
	// Changing this parameter will create a new resource.
	SubnetID *string `json:"subnetId,omitempty" tf:"subnet_id,omitempty"`
}

type ExtensionNicsParameters struct {

	// Specifies the ID of the subnet to which the NIC belongs.
	// Changing this parameter will create a new resource.
	// +kubebuilder:validation:Optional
	SubnetID *string `json:"subnetId" tf:"subnet_id,omitempty"`
}

type GroupsInitParameters struct {

	// Specifies the whether the storage space is for kubernetes and
	// runtime components. Only one group can be set to true. The default value is false.
	// Changing this parameter will create a new resource.
	CceManaged *bool `json:"cceManaged,omitempty" tf:"cce_managed,omitempty"`

	// Specifies the selector name, used as the index of selector_names in storage group.
	// The name of each selector must be unique. Changing this parameter will create a new resource.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// Specifies the list of names of selectors to match.
	// This parameter corresponds to name in selectors. A group can match multiple selectors,
	// but a selector can match only one group. Changing this parameter will create a new resource.
	SelectorNames []*string `json:"selectorNames,omitempty" tf:"selector_names,omitempty"`

	// Specifies the detailed management of space configuration in a group.
	// Changing this parameter will create a new resource.
	VirtualSpaces []VirtualSpacesInitParameters `json:"virtualSpaces,omitempty" tf:"virtual_spaces,omitempty"`
}

type GroupsObservation struct {

	// Specifies the whether the storage space is for kubernetes and
	// runtime components. Only one group can be set to true. The default value is false.
	// Changing this parameter will create a new resource.
	CceManaged *bool `json:"cceManaged,omitempty" tf:"cce_managed,omitempty"`

	// Specifies the selector name, used as the index of selector_names in storage group.
	// The name of each selector must be unique. Changing this parameter will create a new resource.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// Specifies the list of names of selectors to match.
	// This parameter corresponds to name in selectors. A group can match multiple selectors,
	// but a selector can match only one group. Changing this parameter will create a new resource.
	SelectorNames []*string `json:"selectorNames,omitempty" tf:"selector_names,omitempty"`

	// Specifies the detailed management of space configuration in a group.
	// Changing this parameter will create a new resource.
	VirtualSpaces []VirtualSpacesObservation `json:"virtualSpaces,omitempty" tf:"virtual_spaces,omitempty"`
}

type GroupsParameters struct {

	// Specifies the whether the storage space is for kubernetes and
	// runtime components. Only one group can be set to true. The default value is false.
	// Changing this parameter will create a new resource.
	// +kubebuilder:validation:Optional
	CceManaged *bool `json:"cceManaged,omitempty" tf:"cce_managed,omitempty"`

	// Specifies the selector name, used as the index of selector_names in storage group.
	// The name of each selector must be unique. Changing this parameter will create a new resource.
	// +kubebuilder:validation:Optional
	Name *string `json:"name" tf:"name,omitempty"`

	// Specifies the list of names of selectors to match.
	// This parameter corresponds to name in selectors. A group can match multiple selectors,
	// but a selector can match only one group. Changing this parameter will create a new resource.
	// +kubebuilder:validation:Optional
	SelectorNames []*string `json:"selectorNames" tf:"selector_names,omitempty"`

	// Specifies the detailed management of space configuration in a group.
	// Changing this parameter will create a new resource.
	// +kubebuilder:validation:Optional
	VirtualSpaces []VirtualSpacesParameters `json:"virtualSpaces" tf:"virtual_spaces,omitempty"`
}

type HostnameConfigInitParameters struct {

	// Specifies the hostname type of the kubernetes node.
	// The value can be:
	Type *string `json:"type,omitempty" tf:"type,omitempty"`
}

type HostnameConfigObservation struct {

	// Specifies the hostname type of the kubernetes node.
	// The value can be:
	Type *string `json:"type,omitempty" tf:"type,omitempty"`
}

type HostnameConfigParameters struct {

	// Specifies the hostname type of the kubernetes node.
	// The value can be:
	// +kubebuilder:validation:Optional
	Type *string `json:"type" tf:"type,omitempty"`
}

type NodeExtendParamsInitParameters struct {

	// Specifies the agency name.
	// Changing this parameter will create a new resource.
	AgencyName *string `json:"agencyName,omitempty" tf:"agency_name,omitempty"`

	// Specifies the available disk space of a single container on a node,
	// in GB. Changing this parameter will create a new resource.
	DockerBaseSize *float64 `json:"dockerBaseSize,omitempty" tf:"docker_base_size,omitempty"`

	// Specifies the reserved node memory, which is reserved for
	// Kubernetes-related components. Changing this parameter will create a new resource.
	KubeReservedMem *float64 `json:"kubeReservedMem,omitempty" tf:"kube_reserved_mem,omitempty"`

	MarketType *string `json:"marketType,omitempty" tf:"market_type,omitempty"`

	// Specifies the maximum number of instances a node is allowed to create.
	// Changing this parameter will create a new resource.
	MaxPods *float64 `json:"maxPods,omitempty" tf:"max_pods,omitempty"`

	// Specifies the ENI pre-binding thresholds.
	// Example setting: "0.3:0.6". Changing this parameter will create a new resource.
	NicThreshold *string `json:"nicThreshold,omitempty" tf:"nic_threshold,omitempty"`

	// Specifies the image ID to create the node.
	// Changing this parameter will create a new resource.
	NodeImageID *string `json:"nodeImageId,omitempty" tf:"node_image_id,omitempty"`

	// Specifies the number of ENI queues.
	// Example setting: "[{"queue":4}]". Changing this parameter will create a new resource.
	NodeMultiQueue *string `json:"nodeMultiQueue,omitempty" tf:"node_multi_queue,omitempty"`

	// Specifies the script to be executed after installation.
	// The input value can be a Base64 encoded string or not. Changing this parameter will create a new resource.
	Postinstall *string `json:"postinstall,omitempty" tf:"postinstall,omitempty"`

	// Specifies the script to be executed before installation.
	// The input value can be a Base64 encoded string or not. Changing this parameter will create a new resource.
	Preinstall *string `json:"preinstall,omitempty" tf:"preinstall,omitempty"`

	SpotPrice *string `json:"spotPrice,omitempty" tf:"spot_price,omitempty"`

	// Specifies the reserved node memory, which is reserved
	// value for system components. Changing this parameter will create a new resource.
	SystemReservedMem *float64 `json:"systemReservedMem,omitempty" tf:"system_reserved_mem,omitempty"`
}

type NodeExtendParamsObservation struct {

	// Specifies the agency name.
	// Changing this parameter will create a new resource.
	AgencyName *string `json:"agencyName,omitempty" tf:"agency_name,omitempty"`

	// Specifies the available disk space of a single container on a node,
	// in GB. Changing this parameter will create a new resource.
	DockerBaseSize *float64 `json:"dockerBaseSize,omitempty" tf:"docker_base_size,omitempty"`

	// Specifies the reserved node memory, which is reserved for
	// Kubernetes-related components. Changing this parameter will create a new resource.
	KubeReservedMem *float64 `json:"kubeReservedMem,omitempty" tf:"kube_reserved_mem,omitempty"`

	MarketType *string `json:"marketType,omitempty" tf:"market_type,omitempty"`

	// Specifies the maximum number of instances a node is allowed to create.
	// Changing this parameter will create a new resource.
	MaxPods *float64 `json:"maxPods,omitempty" tf:"max_pods,omitempty"`

	// Specifies the ENI pre-binding thresholds.
	// Example setting: "0.3:0.6". Changing this parameter will create a new resource.
	NicThreshold *string `json:"nicThreshold,omitempty" tf:"nic_threshold,omitempty"`

	// Specifies the image ID to create the node.
	// Changing this parameter will create a new resource.
	NodeImageID *string `json:"nodeImageId,omitempty" tf:"node_image_id,omitempty"`

	// Specifies the number of ENI queues.
	// Example setting: "[{"queue":4}]". Changing this parameter will create a new resource.
	NodeMultiQueue *string `json:"nodeMultiQueue,omitempty" tf:"node_multi_queue,omitempty"`

	// Specifies the script to be executed after installation.
	// The input value can be a Base64 encoded string or not. Changing this parameter will create a new resource.
	Postinstall *string `json:"postinstall,omitempty" tf:"postinstall,omitempty"`

	// Specifies the script to be executed before installation.
	// The input value can be a Base64 encoded string or not. Changing this parameter will create a new resource.
	Preinstall *string `json:"preinstall,omitempty" tf:"preinstall,omitempty"`

	SpotPrice *string `json:"spotPrice,omitempty" tf:"spot_price,omitempty"`

	// Specifies the reserved node memory, which is reserved
	// value for system components. Changing this parameter will create a new resource.
	SystemReservedMem *float64 `json:"systemReservedMem,omitempty" tf:"system_reserved_mem,omitempty"`
}

type NodeExtendParamsParameters struct {

	// Specifies the agency name.
	// Changing this parameter will create a new resource.
	// +kubebuilder:validation:Optional
	AgencyName *string `json:"agencyName,omitempty" tf:"agency_name,omitempty"`

	// Specifies the available disk space of a single container on a node,
	// in GB. Changing this parameter will create a new resource.
	// +kubebuilder:validation:Optional
	DockerBaseSize *float64 `json:"dockerBaseSize,omitempty" tf:"docker_base_size,omitempty"`

	// Specifies the reserved node memory, which is reserved for
	// Kubernetes-related components. Changing this parameter will create a new resource.
	// +kubebuilder:validation:Optional
	KubeReservedMem *float64 `json:"kubeReservedMem,omitempty" tf:"kube_reserved_mem,omitempty"`

	// +kubebuilder:validation:Optional
	MarketType *string `json:"marketType,omitempty" tf:"market_type,omitempty"`

	// Specifies the maximum number of instances a node is allowed to create.
	// Changing this parameter will create a new resource.
	// +kubebuilder:validation:Optional
	MaxPods *float64 `json:"maxPods,omitempty" tf:"max_pods,omitempty"`

	// Specifies the ENI pre-binding thresholds.
	// Example setting: "0.3:0.6". Changing this parameter will create a new resource.
	// +kubebuilder:validation:Optional
	NicThreshold *string `json:"nicThreshold,omitempty" tf:"nic_threshold,omitempty"`

	// Specifies the image ID to create the node.
	// Changing this parameter will create a new resource.
	// +kubebuilder:validation:Optional
	NodeImageID *string `json:"nodeImageId,omitempty" tf:"node_image_id,omitempty"`

	// Specifies the number of ENI queues.
	// Example setting: "[{"queue":4}]". Changing this parameter will create a new resource.
	// +kubebuilder:validation:Optional
	NodeMultiQueue *string `json:"nodeMultiQueue,omitempty" tf:"node_multi_queue,omitempty"`

	// Specifies the script to be executed after installation.
	// The input value can be a Base64 encoded string or not. Changing this parameter will create a new resource.
	// +kubebuilder:validation:Optional
	Postinstall *string `json:"postinstall,omitempty" tf:"postinstall,omitempty"`

	// Specifies the script to be executed before installation.
	// The input value can be a Base64 encoded string or not. Changing this parameter will create a new resource.
	// +kubebuilder:validation:Optional
	Preinstall *string `json:"preinstall,omitempty" tf:"preinstall,omitempty"`

	// +kubebuilder:validation:Optional
	SpotPrice *string `json:"spotPrice,omitempty" tf:"spot_price,omitempty"`

	// Specifies the reserved node memory, which is reserved
	// value for system components. Changing this parameter will create a new resource.
	// +kubebuilder:validation:Optional
	SystemReservedMem *float64 `json:"systemReservedMem,omitempty" tf:"system_reserved_mem,omitempty"`
}

type NodeInitParameters struct {

	// schema: Internal
	// +mapType=granular
	Annotations map[string]*string `json:"annotations,omitempty" tf:"annotations,omitempty"`

	AutoPay *string `json:"autoPay,omitempty" tf:"auto_pay,omitempty"`

	// Specifies whether auto renew is enabled. Valid values are "true" and "false".
	AutoRenew *string `json:"autoRenew,omitempty" tf:"auto_renew,omitempty"`

	// Specifies the name of the available partition (AZ). Changing this
	// parameter will create a new resource.
	AvailabilityZone *string `json:"availabilityZone,omitempty" tf:"availability_zone,omitempty"`

	// Specifies the bandwidth billing type.
	// Changing this parameter will create a new resource.
	BandwidthChargeMode *string `json:"bandwidthChargeMode,omitempty" tf:"bandwidth_charge_mode,omitempty"`

	// Specifies the bandwidth size.
	// Changing this parameter will create a new resource.
	BandwidthSize *float64 `json:"bandwidthSize,omitempty" tf:"bandwidth_size,omitempty"`

	BillingMode *float64 `json:"billingMode,omitempty" tf:"billing_mode,omitempty"`

	// Specifies the charging mode of the CCE node. Valid values are prePaid
	// and postPaid, defaults to postPaid. Changing this creates a new resource.
	ChargingMode *string `json:"chargingMode,omitempty" tf:"charging_mode,omitempty"`

	// Specifies the ID of the cluster.
	// Changing this parameter will create a new resource.
	// +crossplane:generate:reference:type=github.com/huaweicloud/provider-huaweicloud/apis/cce/v1alpha1.Cluster
	// +crossplane:generate:reference:extractor=github.com/crossplane/upjet/pkg/resource.ExtractResourceID()
	ClusterID *string `json:"clusterId,omitempty" tf:"cluster_id,omitempty"`

	// Reference to a Cluster in cce to populate clusterId.
	// +kubebuilder:validation:Optional
	ClusterIDRef *v1.Reference `json:"clusterIdRef,omitempty" tf:"-"`

	// Selector for a Cluster in cce to populate clusterId.
	// +kubebuilder:validation:Optional
	ClusterIDSelector *v1.Selector `json:"clusterIdSelector,omitempty" tf:"-"`

	// Specifies the configurations of the data disk.
	// Changing this parameter will create a new resource.
	DataVolumes []DataVolumesInitParameters `json:"dataVolumes,omitempty" tf:"data_volumes,omitempty"`

	// Specifies the ID of the DeH to which the node is scheduled.
	// Changing this parameter will create a new resource.
	DedicatedHostID *string `json:"dedicatedHostId,omitempty" tf:"dedicated_host_id,omitempty"`

	// Specifies the ID of the EIP.
	// Changing this parameter will create a new resource.
	// +crossplane:generate:reference:type=github.com/huaweicloud/provider-huaweicloud/apis/eip/v1alpha1.VpcEip
	// +crossplane:generate:reference:extractor=github.com/crossplane/upjet/pkg/resource.ExtractResourceID()
	EIPID *string `json:"eipId,omitempty" tf:"eip_id,omitempty"`

	// Reference to a VpcEip in eip to populate eipId.
	// +kubebuilder:validation:Optional
	EIPIDRef *v1.Reference `json:"eipIdRef,omitempty" tf:"-"`

	// Selector for a VpcEip in eip to populate eipId.
	// +kubebuilder:validation:Optional
	EIPIDSelector *v1.Selector `json:"eipIdSelector,omitempty" tf:"-"`

	// +listType=set
	EIPIds []*string `json:"eipIds,omitempty" tf:"eip_ids,omitempty"`

	// Specifies the ECS group ID. If specified, the node will be created under
	// the cloud server group. Changing this parameter will create a new resource.
	// +crossplane:generate:reference:type=github.com/huaweicloud/provider-huaweicloud/apis/ecs/v1alpha1.Servergroup
	// +crossplane:generate:reference:extractor=github.com/crossplane/upjet/pkg/resource.ExtractResourceID()
	EcsGroupID *string `json:"ecsGroupId,omitempty" tf:"ecs_group_id,omitempty"`

	// Reference to a Servergroup in ecs to populate ecsGroupId.
	// +kubebuilder:validation:Optional
	EcsGroupIDRef *v1.Reference `json:"ecsGroupIdRef,omitempty" tf:"-"`

	// Selector for a Servergroup in ecs to populate ecsGroupId.
	// +kubebuilder:validation:Optional
	EcsGroupIDSelector *v1.Selector `json:"ecsGroupIdSelector,omitempty" tf:"-"`

	// schema: Deprecated
	EcsPerformanceType *string `json:"ecsPerformanceType,omitempty" tf:"ecs_performance_type,omitempty"`

	// Specifies the enterprise project ID of the CCE node.
	// Changing this parameter will create a new resource.
	EnterpriseProjectID *string `json:"enterpriseProjectId,omitempty" tf:"enterprise_project_id,omitempty"`

	// schema: Deprecated
	// +mapType=granular
	ExtendParam map[string]*string `json:"extendParam,omitempty" tf:"extend_param,omitempty"`

	// Specifies the charging mode of the CCE node. Valid values are prePaid
	// and postPaid, defaults to postPaid. Changing this creates a new resource.
	ExtendParamChargingMode *float64 `json:"extendParamChargingMode,omitempty" tf:"extend_param_charging_mode,omitempty"`

	// Specifies the disk expansion parameters.
	// Changing this parameter will create a new resource.
	ExtendParams []NodeExtendParamsInitParameters `json:"extendParams,omitempty" tf:"extend_params,omitempty"`

	// Specifies extension NICs of the node.
	// The object structure is documented below.
	// Changing this parameter will create a new resource.
	ExtensionNics []ExtensionNicsInitParameters `json:"extensionNics,omitempty" tf:"extension_nics,omitempty"`

	// Specifies the fixed IP of the NIC.
	// Changing this parameter will create a new resource.
	FixedIP *string `json:"fixedIp,omitempty" tf:"fixed_ip,omitempty"`

	// Specifies the flavor ID. Changing this parameter will create a new
	// resource.
	FlavorID *string `json:"flavorId,omitempty" tf:"flavor_id,omitempty"`

	// Specifies the hostname config of the kubernetes node,
	// which is supported by clusters of v1.23.6-r0 to v1.25 or clusters of v1.25.2-r0 or later versions.
	// The object structure is documented below.
	// Changing this parameter will create a new resource.
	HostnameConfig []HostnameConfigInitParameters `json:"hostnameConfig,omitempty" tf:"hostname_config,omitempty"`

	// Specifies the custom initialization flags.
	// Changing this parameter will create a new resource.
	InitializedConditions []*string `json:"initializedConditions,omitempty" tf:"initialized_conditions,omitempty"`

	// Specifies the elastic IP type.
	// Changing this parameter will create a new resource.
	Iptype *string `json:"iptype,omitempty" tf:"iptype,omitempty"`

	// schema: Internal
	KeepEcs *bool `json:"keepEcs,omitempty" tf:"keep_ecs,omitempty"`

	// Specifies the key pair name when logging in to select the key pair mode.
	// This parameter and password are alternative.
	KeyPair *string `json:"keyPair,omitempty" tf:"key_pair,omitempty"`

	// Specifies the tags of a Kubernetes node, key/value pair format.
	// Changing this parameter will create a new resource.
	// +mapType=granular
	Labels map[string]*string `json:"labels,omitempty" tf:"labels,omitempty"`

	// Specifies the maximum number of instances a node is allowed to create.
	// Changing this parameter will create a new resource.
	// schema: Deprecated
	MaxPods *float64 `json:"maxPods,omitempty" tf:"max_pods,omitempty"`

	// Specifies the node name.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// The resource ID in UUID format.
	OrderID *string `json:"orderId,omitempty" tf:"order_id,omitempty"`

	// Specifies the operating system of the node.
	// The value can be EulerOS 2.9 and CentOS 7.6 e.g. For more details,
	// please see documentation.
	// This parameter is required when the node_image_id in extend_params is not specified.
	// Changing this parameter will create a new resource.
	Os *string `json:"os,omitempty" tf:"os,omitempty"`

	// schema: Internal
	Partition *string `json:"partition,omitempty" tf:"partition,omitempty"`

	// Specifies the root password when logging in to select the password mode.
	// The password consists of 8 to 26 characters and must contain at least three of following: uppercase letters,
	// lowercase letters, digits, special characters(!@$%^-_=+[{}]:,./?~#*).
	// This parameter can be plain or salted and is alternative to key_pair.
	PasswordSecretRef *v1.SecretKeySelector `json:"passwordSecretRef,omitempty" tf:"-"`

	// Specifies the charging period of the CCE node. If period_unit is set to month
	// , the value ranges from 1 to 9. If period_unit is set to year, the value ranges from 1 to 3. This parameter is
	// mandatory if charging_mode is set to prePaid. Changing this creates a new resource.
	Period *float64 `json:"period,omitempty" tf:"period,omitempty"`

	// Specifies the charging period unit of the CCE node.
	// Valid values are month and year. This parameter is mandatory if charging_mode is set to prePaid.
	// Changing this creates a new resource.
	PeriodUnit *string `json:"periodUnit,omitempty" tf:"period_unit,omitempty"`

	// Specifies the script to be executed after installation.
	// The input value can be a Base64 encoded string or not. Changing this parameter will create a new resource.
	// schema: Deprecated
	Postinstall *string `json:"postinstall,omitempty" tf:"postinstall,omitempty"`

	// Specifies the script to be executed before installation.
	// The input value can be a Base64 encoded string or not. Changing this parameter will create a new resource.
	// schema: Deprecated
	Preinstall *string `json:"preinstall,omitempty" tf:"preinstall,omitempty"`

	// Specifies the private key of the in used key_pair. This parameter is mandatory
	// when replacing or unbinding a keypair if the CCE node is in Active state.
	PrivateKeySecretRef *v1.SecretKeySelector `json:"privateKeySecretRef,omitempty" tf:"-"`

	// The resource ID in UUID format.
	// schema: Deprecated
	ProductID *string `json:"productId,omitempty" tf:"product_id,omitempty"`

	// A key must contain 1 to 63 characters starting with a letter or digit.
	// Only letters, digits, hyphens (-), underscores (_), and periods (.) are allowed. A DNS subdomain name can be used
	// as the prefix of a key. Changing this parameter will create a new resource.
	// schema: Deprecated
	PublicKey *string `json:"publicKey,omitempty" tf:"public_key,omitempty"`

	// Specifies the region in which to create the CCE node resource.
	// If omitted, the provider-level region will be used. Changing this creates a new CCE node resource.
	Region *string `json:"region,omitempty" tf:"region,omitempty"`

	// Specifies the configuration of the system disk.
	// Changing this parameter will create a new resource.
	RootVolume []RootVolumeInitParameters `json:"rootVolume,omitempty" tf:"root_volume,omitempty"`

	// Specifies the runtime of the CCE node. Valid values are docker and
	// containerd. Changing this creates a new resource.
	Runtime *string `json:"runtime,omitempty" tf:"runtime,omitempty"`

	// Specifies the bandwidth sharing type.
	// Changing this parameter will create a new resource.
	Sharetype *string `json:"sharetype,omitempty" tf:"sharetype,omitempty"`

	// Specifies the disk initialization management parameter.
	// If omitted, disks are managed based on the DockerLVMConfigOverride parameter in extendParam.
	// This parameter is supported for clusters of v1.15.11 and later. Changing this parameter will create a new resource.
	Storage []StorageInitParameters `json:"storage,omitempty" tf:"storage,omitempty"`

	// Specifies the ID of the subnet to which the NIC belongs.
	// Changing this parameter will create a new resource.
	// +crossplane:generate:reference:type=github.com/huaweicloud/provider-huaweicloud/apis/vpc/v1alpha1.Subnet
	// +crossplane:generate:reference:extractor=github.com/crossplane/upjet/pkg/resource.ExtractResourceID()
	SubnetID *string `json:"subnetId,omitempty" tf:"subnet_id,omitempty"`

	// Reference to a Subnet in vpc to populate subnetId.
	// +kubebuilder:validation:Optional
	SubnetIDRef *v1.Reference `json:"subnetIdRef,omitempty" tf:"-"`

	// Selector for a Subnet in vpc to populate subnetId.
	// +kubebuilder:validation:Optional
	SubnetIDSelector *v1.Selector `json:"subnetIdSelector,omitempty" tf:"-"`

	// Specifies the tags of a VM node, key/value pair format.
	// +mapType=granular
	Tags map[string]*string `json:"tags,omitempty" tf:"tags,omitempty"`

	// Specifies the taints configuration of the nodes to set anti-affinity.
	// Changing this parameter will create a new resource. Each taint contains the following parameters:
	Taints []TaintsInitParameters `json:"taints,omitempty" tf:"taints,omitempty"`
}

type NodeObservation struct {

	// schema: Internal
	// +mapType=granular
	Annotations map[string]*string `json:"annotations,omitempty" tf:"annotations,omitempty"`

	AutoPay *string `json:"autoPay,omitempty" tf:"auto_pay,omitempty"`

	// Specifies whether auto renew is enabled. Valid values are "true" and "false".
	AutoRenew *string `json:"autoRenew,omitempty" tf:"auto_renew,omitempty"`

	// Specifies the name of the available partition (AZ). Changing this
	// parameter will create a new resource.
	AvailabilityZone *string `json:"availabilityZone,omitempty" tf:"availability_zone,omitempty"`

	// Specifies the bandwidth billing type.
	// Changing this parameter will create a new resource.
	BandwidthChargeMode *string `json:"bandwidthChargeMode,omitempty" tf:"bandwidth_charge_mode,omitempty"`

	// Specifies the bandwidth size.
	// Changing this parameter will create a new resource.
	BandwidthSize *float64 `json:"bandwidthSize,omitempty" tf:"bandwidth_size,omitempty"`

	BillingMode *float64 `json:"billingMode,omitempty" tf:"billing_mode,omitempty"`

	// Specifies the charging mode of the CCE node. Valid values are prePaid
	// and postPaid, defaults to postPaid. Changing this creates a new resource.
	ChargingMode *string `json:"chargingMode,omitempty" tf:"charging_mode,omitempty"`

	// Specifies the ID of the cluster.
	// Changing this parameter will create a new resource.
	ClusterID *string `json:"clusterId,omitempty" tf:"cluster_id,omitempty"`

	// Specifies the configurations of the data disk.
	// Changing this parameter will create a new resource.
	DataVolumes []DataVolumesObservation `json:"dataVolumes,omitempty" tf:"data_volumes,omitempty"`

	// Specifies the ID of the DeH to which the node is scheduled.
	// Changing this parameter will create a new resource.
	DedicatedHostID *string `json:"dedicatedHostId,omitempty" tf:"dedicated_host_id,omitempty"`

	// Specifies the ID of the EIP.
	// Changing this parameter will create a new resource.
	EIPID *string `json:"eipId,omitempty" tf:"eip_id,omitempty"`

	// +listType=set
	EIPIds []*string `json:"eipIds,omitempty" tf:"eip_ids,omitempty"`

	// Specifies the ECS group ID. If specified, the node will be created under
	// the cloud server group. Changing this parameter will create a new resource.
	EcsGroupID *string `json:"ecsGroupId,omitempty" tf:"ecs_group_id,omitempty"`

	// schema: Deprecated
	EcsPerformanceType *string `json:"ecsPerformanceType,omitempty" tf:"ecs_performance_type,omitempty"`

	// Specifies the enterprise project ID of the CCE node.
	// Changing this parameter will create a new resource.
	EnterpriseProjectID *string `json:"enterpriseProjectId,omitempty" tf:"enterprise_project_id,omitempty"`

	// schema: Deprecated
	// +mapType=granular
	ExtendParam map[string]*string `json:"extendParam,omitempty" tf:"extend_param,omitempty"`

	// Specifies the charging mode of the CCE node. Valid values are prePaid
	// and postPaid, defaults to postPaid. Changing this creates a new resource.
	ExtendParamChargingMode *float64 `json:"extendParamChargingMode,omitempty" tf:"extend_param_charging_mode,omitempty"`

	// Specifies the disk expansion parameters.
	// Changing this parameter will create a new resource.
	ExtendParams []NodeExtendParamsObservation `json:"extendParams,omitempty" tf:"extend_params,omitempty"`

	// Specifies extension NICs of the node.
	// The object structure is documented below.
	// Changing this parameter will create a new resource.
	ExtensionNics []ExtensionNicsObservation `json:"extensionNics,omitempty" tf:"extension_nics,omitempty"`

	// Specifies the fixed IP of the NIC.
	// Changing this parameter will create a new resource.
	FixedIP *string `json:"fixedIp,omitempty" tf:"fixed_ip,omitempty"`

	// Specifies the flavor ID. Changing this parameter will create a new
	// resource.
	FlavorID *string `json:"flavorId,omitempty" tf:"flavor_id,omitempty"`

	// Specifies the hostname config of the kubernetes node,
	// which is supported by clusters of v1.23.6-r0 to v1.25 or clusters of v1.25.2-r0 or later versions.
	// The object structure is documented below.
	// Changing this parameter will create a new resource.
	HostnameConfig []HostnameConfigObservation `json:"hostnameConfig,omitempty" tf:"hostname_config,omitempty"`

	// The resource ID in UUID format.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// Specifies the custom initialization flags.
	// Changing this parameter will create a new resource.
	InitializedConditions []*string `json:"initializedConditions,omitempty" tf:"initialized_conditions,omitempty"`

	// Specifies the elastic IP type.
	// Changing this parameter will create a new resource.
	Iptype *string `json:"iptype,omitempty" tf:"iptype,omitempty"`

	// schema: Internal
	KeepEcs *bool `json:"keepEcs,omitempty" tf:"keep_ecs,omitempty"`

	// Specifies the key pair name when logging in to select the key pair mode.
	// This parameter and password are alternative.
	KeyPair *string `json:"keyPair,omitempty" tf:"key_pair,omitempty"`

	// Specifies the tags of a Kubernetes node, key/value pair format.
	// Changing this parameter will create a new resource.
	// +mapType=granular
	Labels map[string]*string `json:"labels,omitempty" tf:"labels,omitempty"`

	// Specifies the maximum number of instances a node is allowed to create.
	// Changing this parameter will create a new resource.
	// schema: Deprecated
	MaxPods *float64 `json:"maxPods,omitempty" tf:"max_pods,omitempty"`

	// Specifies the node name.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// The resource ID in UUID format.
	OrderID *string `json:"orderId,omitempty" tf:"order_id,omitempty"`

	// Specifies the operating system of the node.
	// The value can be EulerOS 2.9 and CentOS 7.6 e.g. For more details,
	// please see documentation.
	// This parameter is required when the node_image_id in extend_params is not specified.
	// Changing this parameter will create a new resource.
	Os *string `json:"os,omitempty" tf:"os,omitempty"`

	// schema: Internal
	Partition *string `json:"partition,omitempty" tf:"partition,omitempty"`

	// Specifies the charging period of the CCE node. If period_unit is set to month
	// , the value ranges from 1 to 9. If period_unit is set to year, the value ranges from 1 to 3. This parameter is
	// mandatory if charging_mode is set to prePaid. Changing this creates a new resource.
	Period *float64 `json:"period,omitempty" tf:"period,omitempty"`

	// Specifies the charging period unit of the CCE node.
	// Valid values are month and year. This parameter is mandatory if charging_mode is set to prePaid.
	// Changing this creates a new resource.
	PeriodUnit *string `json:"periodUnit,omitempty" tf:"period_unit,omitempty"`

	// Specifies the script to be executed after installation.
	// The input value can be a Base64 encoded string or not. Changing this parameter will create a new resource.
	// schema: Deprecated
	Postinstall *string `json:"postinstall,omitempty" tf:"postinstall,omitempty"`

	// Specifies the script to be executed before installation.
	// The input value can be a Base64 encoded string or not. Changing this parameter will create a new resource.
	// schema: Deprecated
	Preinstall *string `json:"preinstall,omitempty" tf:"preinstall,omitempty"`

	// Private IP of the CCE node.
	PrivateIP *string `json:"privateIp,omitempty" tf:"private_ip,omitempty"`

	// The resource ID in UUID format.
	// schema: Deprecated
	ProductID *string `json:"productId,omitempty" tf:"product_id,omitempty"`

	// Public IP of the CCE node.
	PublicIP *string `json:"publicIp,omitempty" tf:"public_ip,omitempty"`

	// A key must contain 1 to 63 characters starting with a letter or digit.
	// Only letters, digits, hyphens (-), underscores (_), and periods (.) are allowed. A DNS subdomain name can be used
	// as the prefix of a key. Changing this parameter will create a new resource.
	// schema: Deprecated
	PublicKey *string `json:"publicKey,omitempty" tf:"public_key,omitempty"`

	// Specifies the region in which to create the CCE node resource.
	// If omitted, the provider-level region will be used. Changing this creates a new CCE node resource.
	Region *string `json:"region,omitempty" tf:"region,omitempty"`

	// Specifies the configuration of the system disk.
	// Changing this parameter will create a new resource.
	RootVolume []RootVolumeObservation `json:"rootVolume,omitempty" tf:"root_volume,omitempty"`

	// Specifies the runtime of the CCE node. Valid values are docker and
	// containerd. Changing this creates a new resource.
	Runtime *string `json:"runtime,omitempty" tf:"runtime,omitempty"`

	// ID of the ECS instance associated with the node.
	ServerID *string `json:"serverId,omitempty" tf:"server_id,omitempty"`

	// Specifies the bandwidth sharing type.
	// Changing this parameter will create a new resource.
	Sharetype *string `json:"sharetype,omitempty" tf:"sharetype,omitempty"`

	// The status of the CCE node.
	Status *string `json:"status,omitempty" tf:"status,omitempty"`

	// Specifies the disk initialization management parameter.
	// If omitted, disks are managed based on the DockerLVMConfigOverride parameter in extendParam.
	// This parameter is supported for clusters of v1.15.11 and later. Changing this parameter will create a new resource.
	Storage []StorageObservation `json:"storage,omitempty" tf:"storage,omitempty"`

	// Specifies the ID of the subnet to which the NIC belongs.
	// Changing this parameter will create a new resource.
	SubnetID *string `json:"subnetId,omitempty" tf:"subnet_id,omitempty"`

	// Specifies the tags of a VM node, key/value pair format.
	// +mapType=granular
	Tags map[string]*string `json:"tags,omitempty" tf:"tags,omitempty"`

	// Specifies the taints configuration of the nodes to set anti-affinity.
	// Changing this parameter will create a new resource. Each taint contains the following parameters:
	Taints []TaintsObservation `json:"taints,omitempty" tf:"taints,omitempty"`
}

type NodeParameters struct {

	// schema: Internal
	// +kubebuilder:validation:Optional
	// +mapType=granular
	Annotations map[string]*string `json:"annotations,omitempty" tf:"annotations,omitempty"`

	// +kubebuilder:validation:Optional
	AutoPay *string `json:"autoPay,omitempty" tf:"auto_pay,omitempty"`

	// Specifies whether auto renew is enabled. Valid values are "true" and "false".
	// +kubebuilder:validation:Optional
	AutoRenew *string `json:"autoRenew,omitempty" tf:"auto_renew,omitempty"`

	// Specifies the name of the available partition (AZ). Changing this
	// parameter will create a new resource.
	// +kubebuilder:validation:Optional
	AvailabilityZone *string `json:"availabilityZone,omitempty" tf:"availability_zone,omitempty"`

	// Specifies the bandwidth billing type.
	// Changing this parameter will create a new resource.
	// +kubebuilder:validation:Optional
	BandwidthChargeMode *string `json:"bandwidthChargeMode,omitempty" tf:"bandwidth_charge_mode,omitempty"`

	// Specifies the bandwidth size.
	// Changing this parameter will create a new resource.
	// +kubebuilder:validation:Optional
	BandwidthSize *float64 `json:"bandwidthSize,omitempty" tf:"bandwidth_size,omitempty"`

	// +kubebuilder:validation:Optional
	BillingMode *float64 `json:"billingMode,omitempty" tf:"billing_mode,omitempty"`

	// Specifies the charging mode of the CCE node. Valid values are prePaid
	// and postPaid, defaults to postPaid. Changing this creates a new resource.
	// +kubebuilder:validation:Optional
	ChargingMode *string `json:"chargingMode,omitempty" tf:"charging_mode,omitempty"`

	// Specifies the ID of the cluster.
	// Changing this parameter will create a new resource.
	// +crossplane:generate:reference:type=github.com/huaweicloud/provider-huaweicloud/apis/cce/v1alpha1.Cluster
	// +crossplane:generate:reference:extractor=github.com/crossplane/upjet/pkg/resource.ExtractResourceID()
	// +kubebuilder:validation:Optional
	ClusterID *string `json:"clusterId,omitempty" tf:"cluster_id,omitempty"`

	// Reference to a Cluster in cce to populate clusterId.
	// +kubebuilder:validation:Optional
	ClusterIDRef *v1.Reference `json:"clusterIdRef,omitempty" tf:"-"`

	// Selector for a Cluster in cce to populate clusterId.
	// +kubebuilder:validation:Optional
	ClusterIDSelector *v1.Selector `json:"clusterIdSelector,omitempty" tf:"-"`

	// Specifies the configurations of the data disk.
	// Changing this parameter will create a new resource.
	// +kubebuilder:validation:Optional
	DataVolumes []DataVolumesParameters `json:"dataVolumes,omitempty" tf:"data_volumes,omitempty"`

	// Specifies the ID of the DeH to which the node is scheduled.
	// Changing this parameter will create a new resource.
	// +kubebuilder:validation:Optional
	DedicatedHostID *string `json:"dedicatedHostId,omitempty" tf:"dedicated_host_id,omitempty"`

	// Specifies the ID of the EIP.
	// Changing this parameter will create a new resource.
	// +crossplane:generate:reference:type=github.com/huaweicloud/provider-huaweicloud/apis/eip/v1alpha1.VpcEip
	// +crossplane:generate:reference:extractor=github.com/crossplane/upjet/pkg/resource.ExtractResourceID()
	// +kubebuilder:validation:Optional
	EIPID *string `json:"eipId,omitempty" tf:"eip_id,omitempty"`

	// Reference to a VpcEip in eip to populate eipId.
	// +kubebuilder:validation:Optional
	EIPIDRef *v1.Reference `json:"eipIdRef,omitempty" tf:"-"`

	// Selector for a VpcEip in eip to populate eipId.
	// +kubebuilder:validation:Optional
	EIPIDSelector *v1.Selector `json:"eipIdSelector,omitempty" tf:"-"`

	// +kubebuilder:validation:Optional
	// +listType=set
	EIPIds []*string `json:"eipIds,omitempty" tf:"eip_ids,omitempty"`

	// Specifies the ECS group ID. If specified, the node will be created under
	// the cloud server group. Changing this parameter will create a new resource.
	// +crossplane:generate:reference:type=github.com/huaweicloud/provider-huaweicloud/apis/ecs/v1alpha1.Servergroup
	// +crossplane:generate:reference:extractor=github.com/crossplane/upjet/pkg/resource.ExtractResourceID()
	// +kubebuilder:validation:Optional
	EcsGroupID *string `json:"ecsGroupId,omitempty" tf:"ecs_group_id,omitempty"`

	// Reference to a Servergroup in ecs to populate ecsGroupId.
	// +kubebuilder:validation:Optional
	EcsGroupIDRef *v1.Reference `json:"ecsGroupIdRef,omitempty" tf:"-"`

	// Selector for a Servergroup in ecs to populate ecsGroupId.
	// +kubebuilder:validation:Optional
	EcsGroupIDSelector *v1.Selector `json:"ecsGroupIdSelector,omitempty" tf:"-"`

	// schema: Deprecated
	// +kubebuilder:validation:Optional
	EcsPerformanceType *string `json:"ecsPerformanceType,omitempty" tf:"ecs_performance_type,omitempty"`

	// Specifies the enterprise project ID of the CCE node.
	// Changing this parameter will create a new resource.
	// +kubebuilder:validation:Optional
	EnterpriseProjectID *string `json:"enterpriseProjectId,omitempty" tf:"enterprise_project_id,omitempty"`

	// schema: Deprecated
	// +kubebuilder:validation:Optional
	// +mapType=granular
	ExtendParam map[string]*string `json:"extendParam,omitempty" tf:"extend_param,omitempty"`

	// Specifies the charging mode of the CCE node. Valid values are prePaid
	// and postPaid, defaults to postPaid. Changing this creates a new resource.
	// +kubebuilder:validation:Optional
	ExtendParamChargingMode *float64 `json:"extendParamChargingMode,omitempty" tf:"extend_param_charging_mode,omitempty"`

	// Specifies the disk expansion parameters.
	// Changing this parameter will create a new resource.
	// +kubebuilder:validation:Optional
	ExtendParams []NodeExtendParamsParameters `json:"extendParams,omitempty" tf:"extend_params,omitempty"`

	// Specifies extension NICs of the node.
	// The object structure is documented below.
	// Changing this parameter will create a new resource.
	// +kubebuilder:validation:Optional
	ExtensionNics []ExtensionNicsParameters `json:"extensionNics,omitempty" tf:"extension_nics,omitempty"`

	// Specifies the fixed IP of the NIC.
	// Changing this parameter will create a new resource.
	// +kubebuilder:validation:Optional
	FixedIP *string `json:"fixedIp,omitempty" tf:"fixed_ip,omitempty"`

	// Specifies the flavor ID. Changing this parameter will create a new
	// resource.
	// +kubebuilder:validation:Optional
	FlavorID *string `json:"flavorId,omitempty" tf:"flavor_id,omitempty"`

	// Specifies the hostname config of the kubernetes node,
	// which is supported by clusters of v1.23.6-r0 to v1.25 or clusters of v1.25.2-r0 or later versions.
	// The object structure is documented below.
	// Changing this parameter will create a new resource.
	// +kubebuilder:validation:Optional
	HostnameConfig []HostnameConfigParameters `json:"hostnameConfig,omitempty" tf:"hostname_config,omitempty"`

	// Specifies the custom initialization flags.
	// Changing this parameter will create a new resource.
	// +kubebuilder:validation:Optional
	InitializedConditions []*string `json:"initializedConditions,omitempty" tf:"initialized_conditions,omitempty"`

	// Specifies the elastic IP type.
	// Changing this parameter will create a new resource.
	// +kubebuilder:validation:Optional
	Iptype *string `json:"iptype,omitempty" tf:"iptype,omitempty"`

	// schema: Internal
	// +kubebuilder:validation:Optional
	KeepEcs *bool `json:"keepEcs,omitempty" tf:"keep_ecs,omitempty"`

	// Specifies the key pair name when logging in to select the key pair mode.
	// This parameter and password are alternative.
	// +kubebuilder:validation:Optional
	KeyPair *string `json:"keyPair,omitempty" tf:"key_pair,omitempty"`

	// Specifies the tags of a Kubernetes node, key/value pair format.
	// Changing this parameter will create a new resource.
	// +kubebuilder:validation:Optional
	// +mapType=granular
	Labels map[string]*string `json:"labels,omitempty" tf:"labels,omitempty"`

	// Specifies the maximum number of instances a node is allowed to create.
	// Changing this parameter will create a new resource.
	// schema: Deprecated
	// +kubebuilder:validation:Optional
	MaxPods *float64 `json:"maxPods,omitempty" tf:"max_pods,omitempty"`

	// Specifies the node name.
	// +kubebuilder:validation:Optional
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// The resource ID in UUID format.
	// +kubebuilder:validation:Optional
	OrderID *string `json:"orderId,omitempty" tf:"order_id,omitempty"`

	// Specifies the operating system of the node.
	// The value can be EulerOS 2.9 and CentOS 7.6 e.g. For more details,
	// please see documentation.
	// This parameter is required when the node_image_id in extend_params is not specified.
	// Changing this parameter will create a new resource.
	// +kubebuilder:validation:Optional
	Os *string `json:"os,omitempty" tf:"os,omitempty"`

	// schema: Internal
	// +kubebuilder:validation:Optional
	Partition *string `json:"partition,omitempty" tf:"partition,omitempty"`

	// Specifies the root password when logging in to select the password mode.
	// The password consists of 8 to 26 characters and must contain at least three of following: uppercase letters,
	// lowercase letters, digits, special characters(!@$%^-_=+[{}]:,./?~#*).
	// This parameter can be plain or salted and is alternative to key_pair.
	// +kubebuilder:validation:Optional
	PasswordSecretRef *v1.SecretKeySelector `json:"passwordSecretRef,omitempty" tf:"-"`

	// Specifies the charging period of the CCE node. If period_unit is set to month
	// , the value ranges from 1 to 9. If period_unit is set to year, the value ranges from 1 to 3. This parameter is
	// mandatory if charging_mode is set to prePaid. Changing this creates a new resource.
	// +kubebuilder:validation:Optional
	Period *float64 `json:"period,omitempty" tf:"period,omitempty"`

	// Specifies the charging period unit of the CCE node.
	// Valid values are month and year. This parameter is mandatory if charging_mode is set to prePaid.
	// Changing this creates a new resource.
	// +kubebuilder:validation:Optional
	PeriodUnit *string `json:"periodUnit,omitempty" tf:"period_unit,omitempty"`

	// Specifies the script to be executed after installation.
	// The input value can be a Base64 encoded string or not. Changing this parameter will create a new resource.
	// schema: Deprecated
	// +kubebuilder:validation:Optional
	Postinstall *string `json:"postinstall,omitempty" tf:"postinstall,omitempty"`

	// Specifies the script to be executed before installation.
	// The input value can be a Base64 encoded string or not. Changing this parameter will create a new resource.
	// schema: Deprecated
	// +kubebuilder:validation:Optional
	Preinstall *string `json:"preinstall,omitempty" tf:"preinstall,omitempty"`

	// Specifies the private key of the in used key_pair. This parameter is mandatory
	// when replacing or unbinding a keypair if the CCE node is in Active state.
	// +kubebuilder:validation:Optional
	PrivateKeySecretRef *v1.SecretKeySelector `json:"privateKeySecretRef,omitempty" tf:"-"`

	// The resource ID in UUID format.
	// schema: Deprecated
	// +kubebuilder:validation:Optional
	ProductID *string `json:"productId,omitempty" tf:"product_id,omitempty"`

	// A key must contain 1 to 63 characters starting with a letter or digit.
	// Only letters, digits, hyphens (-), underscores (_), and periods (.) are allowed. A DNS subdomain name can be used
	// as the prefix of a key. Changing this parameter will create a new resource.
	// schema: Deprecated
	// +kubebuilder:validation:Optional
	PublicKey *string `json:"publicKey,omitempty" tf:"public_key,omitempty"`

	// Specifies the region in which to create the CCE node resource.
	// If omitted, the provider-level region will be used. Changing this creates a new CCE node resource.
	// +kubebuilder:validation:Optional
	Region *string `json:"region,omitempty" tf:"region,omitempty"`

	// Specifies the configuration of the system disk.
	// Changing this parameter will create a new resource.
	// +kubebuilder:validation:Optional
	RootVolume []RootVolumeParameters `json:"rootVolume,omitempty" tf:"root_volume,omitempty"`

	// Specifies the runtime of the CCE node. Valid values are docker and
	// containerd. Changing this creates a new resource.
	// +kubebuilder:validation:Optional
	Runtime *string `json:"runtime,omitempty" tf:"runtime,omitempty"`

	// Specifies the bandwidth sharing type.
	// Changing this parameter will create a new resource.
	// +kubebuilder:validation:Optional
	Sharetype *string `json:"sharetype,omitempty" tf:"sharetype,omitempty"`

	// Specifies the disk initialization management parameter.
	// If omitted, disks are managed based on the DockerLVMConfigOverride parameter in extendParam.
	// This parameter is supported for clusters of v1.15.11 and later. Changing this parameter will create a new resource.
	// +kubebuilder:validation:Optional
	Storage []StorageParameters `json:"storage,omitempty" tf:"storage,omitempty"`

	// Specifies the ID of the subnet to which the NIC belongs.
	// Changing this parameter will create a new resource.
	// +crossplane:generate:reference:type=github.com/huaweicloud/provider-huaweicloud/apis/vpc/v1alpha1.Subnet
	// +crossplane:generate:reference:extractor=github.com/crossplane/upjet/pkg/resource.ExtractResourceID()
	// +kubebuilder:validation:Optional
	SubnetID *string `json:"subnetId,omitempty" tf:"subnet_id,omitempty"`

	// Reference to a Subnet in vpc to populate subnetId.
	// +kubebuilder:validation:Optional
	SubnetIDRef *v1.Reference `json:"subnetIdRef,omitempty" tf:"-"`

	// Selector for a Subnet in vpc to populate subnetId.
	// +kubebuilder:validation:Optional
	SubnetIDSelector *v1.Selector `json:"subnetIdSelector,omitempty" tf:"-"`

	// Specifies the tags of a VM node, key/value pair format.
	// +kubebuilder:validation:Optional
	// +mapType=granular
	Tags map[string]*string `json:"tags,omitempty" tf:"tags,omitempty"`

	// Specifies the taints configuration of the nodes to set anti-affinity.
	// Changing this parameter will create a new resource. Each taint contains the following parameters:
	// +kubebuilder:validation:Optional
	Taints []TaintsParameters `json:"taints,omitempty" tf:"taints,omitempty"`
}

type RootVolumeInitParameters struct {

	// Specifies the DSS pool ID. This field is used only for
	// dedicated storage. Changing this parameter will create a new resource.
	DssPoolID *string `json:"dssPoolId,omitempty" tf:"dss_pool_id,omitempty"`

	ExtendParam *string `json:"extendParam,omitempty" tf:"extend_param,omitempty"`

	// Specifies the disk expansion parameters.
	// Changing this parameter will create a new resource.
	// +mapType=granular
	ExtendParams map[string]*string `json:"extendParams,omitempty" tf:"extend_params,omitempty"`

	// schema: Internal
	HwPassthrough *bool `json:"hwPassthrough,omitempty" tf:"hw_passthrough,omitempty"`

	// Specifies the ID of a KMS key. This is used to encrypt the volume.
	// Changing this parameter will create a new resource.
	KMSKeyID *string `json:"kmsKeyId,omitempty" tf:"kms_key_id,omitempty"`

	// Specifies the disk size in GB.
	// Changing this parameter will create a new resource.
	Size *float64 `json:"size,omitempty" tf:"size,omitempty"`

	// Specifies the disk type.
	// Changing this parameter will create a new resource.
	Volumetype *string `json:"volumetype,omitempty" tf:"volumetype,omitempty"`
}

type RootVolumeObservation struct {

	// Specifies the DSS pool ID. This field is used only for
	// dedicated storage. Changing this parameter will create a new resource.
	DssPoolID *string `json:"dssPoolId,omitempty" tf:"dss_pool_id,omitempty"`

	ExtendParam *string `json:"extendParam,omitempty" tf:"extend_param,omitempty"`

	// Specifies the disk expansion parameters.
	// Changing this parameter will create a new resource.
	// +mapType=granular
	ExtendParams map[string]*string `json:"extendParams,omitempty" tf:"extend_params,omitempty"`

	// schema: Internal
	HwPassthrough *bool `json:"hwPassthrough,omitempty" tf:"hw_passthrough,omitempty"`

	// Specifies the ID of a KMS key. This is used to encrypt the volume.
	// Changing this parameter will create a new resource.
	KMSKeyID *string `json:"kmsKeyId,omitempty" tf:"kms_key_id,omitempty"`

	// Specifies the disk size in GB.
	// Changing this parameter will create a new resource.
	Size *float64 `json:"size,omitempty" tf:"size,omitempty"`

	// Specifies the disk type.
	// Changing this parameter will create a new resource.
	Volumetype *string `json:"volumetype,omitempty" tf:"volumetype,omitempty"`
}

type RootVolumeParameters struct {

	// Specifies the DSS pool ID. This field is used only for
	// dedicated storage. Changing this parameter will create a new resource.
	// +kubebuilder:validation:Optional
	DssPoolID *string `json:"dssPoolId,omitempty" tf:"dss_pool_id,omitempty"`

	// +kubebuilder:validation:Optional
	ExtendParam *string `json:"extendParam,omitempty" tf:"extend_param,omitempty"`

	// Specifies the disk expansion parameters.
	// Changing this parameter will create a new resource.
	// +kubebuilder:validation:Optional
	// +mapType=granular
	ExtendParams map[string]*string `json:"extendParams,omitempty" tf:"extend_params,omitempty"`

	// schema: Internal
	// +kubebuilder:validation:Optional
	HwPassthrough *bool `json:"hwPassthrough,omitempty" tf:"hw_passthrough,omitempty"`

	// Specifies the ID of a KMS key. This is used to encrypt the volume.
	// Changing this parameter will create a new resource.
	// +kubebuilder:validation:Optional
	KMSKeyID *string `json:"kmsKeyId,omitempty" tf:"kms_key_id,omitempty"`

	// Specifies the disk size in GB.
	// Changing this parameter will create a new resource.
	// +kubebuilder:validation:Optional
	Size *float64 `json:"size" tf:"size,omitempty"`

	// Specifies the disk type.
	// Changing this parameter will create a new resource.
	// +kubebuilder:validation:Optional
	Volumetype *string `json:"volumetype" tf:"volumetype,omitempty"`
}

type SelectorsInitParameters struct {

	// Specifies the number of disks to be selected. If omitted,
	// all disks of this type are selected. Changing this parameter will create a new resource.
	MatchLabelCount *string `json:"matchLabelCount,omitempty" tf:"match_label_count,omitempty"`

	// Specifies the customer master key ID of an encrypted
	// disk. Changing this parameter will create a new resource.
	MatchLabelMetadataCmkid *string `json:"matchLabelMetadataCmkid,omitempty" tf:"match_label_metadata_cmkid,omitempty"`

	// Specifies the disk encryption identifier.
	// Values can be: 0 indicates that the disk is not encrypted and 1 indicates that the disk is encrypted.
	// If omitted, whether the disk is encrypted is not limited. Changing this parameter will create a new resource.
	MatchLabelMetadataEncrypted *string `json:"matchLabelMetadataEncrypted,omitempty" tf:"match_label_metadata_encrypted,omitempty"`

	// Specifies the matched disk size. If omitted,
	// the disk size is not limited. Example: 100. Changing this parameter will create a new resource.
	MatchLabelSize *string `json:"matchLabelSize,omitempty" tf:"match_label_size,omitempty"`

	// Specifies the EVS disk type. Currently,
	// SSD, GPSSD, and SAS are supported. If omitted, the disk type is not limited.
	// Changing this parameter will create a new resource.
	MatchLabelVolumeType *string `json:"matchLabelVolumeType,omitempty" tf:"match_label_volume_type,omitempty"`

	// Specifies the selector name, used as the index of selector_names in storage group.
	// The name of each selector must be unique. Changing this parameter will create a new resource.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// Specifies the storage type. Currently, only evs (EVS volumes) is supported.
	// The default value is evs. Changing this parameter will create a new resource.
	Type *string `json:"type,omitempty" tf:"type,omitempty"`
}

type SelectorsObservation struct {

	// Specifies the number of disks to be selected. If omitted,
	// all disks of this type are selected. Changing this parameter will create a new resource.
	MatchLabelCount *string `json:"matchLabelCount,omitempty" tf:"match_label_count,omitempty"`

	// Specifies the customer master key ID of an encrypted
	// disk. Changing this parameter will create a new resource.
	MatchLabelMetadataCmkid *string `json:"matchLabelMetadataCmkid,omitempty" tf:"match_label_metadata_cmkid,omitempty"`

	// Specifies the disk encryption identifier.
	// Values can be: 0 indicates that the disk is not encrypted and 1 indicates that the disk is encrypted.
	// If omitted, whether the disk is encrypted is not limited. Changing this parameter will create a new resource.
	MatchLabelMetadataEncrypted *string `json:"matchLabelMetadataEncrypted,omitempty" tf:"match_label_metadata_encrypted,omitempty"`

	// Specifies the matched disk size. If omitted,
	// the disk size is not limited. Example: 100. Changing this parameter will create a new resource.
	MatchLabelSize *string `json:"matchLabelSize,omitempty" tf:"match_label_size,omitempty"`

	// Specifies the EVS disk type. Currently,
	// SSD, GPSSD, and SAS are supported. If omitted, the disk type is not limited.
	// Changing this parameter will create a new resource.
	MatchLabelVolumeType *string `json:"matchLabelVolumeType,omitempty" tf:"match_label_volume_type,omitempty"`

	// Specifies the selector name, used as the index of selector_names in storage group.
	// The name of each selector must be unique. Changing this parameter will create a new resource.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// Specifies the storage type. Currently, only evs (EVS volumes) is supported.
	// The default value is evs. Changing this parameter will create a new resource.
	Type *string `json:"type,omitempty" tf:"type,omitempty"`
}

type SelectorsParameters struct {

	// Specifies the number of disks to be selected. If omitted,
	// all disks of this type are selected. Changing this parameter will create a new resource.
	// +kubebuilder:validation:Optional
	MatchLabelCount *string `json:"matchLabelCount,omitempty" tf:"match_label_count,omitempty"`

	// Specifies the customer master key ID of an encrypted
	// disk. Changing this parameter will create a new resource.
	// +kubebuilder:validation:Optional
	MatchLabelMetadataCmkid *string `json:"matchLabelMetadataCmkid,omitempty" tf:"match_label_metadata_cmkid,omitempty"`

	// Specifies the disk encryption identifier.
	// Values can be: 0 indicates that the disk is not encrypted and 1 indicates that the disk is encrypted.
	// If omitted, whether the disk is encrypted is not limited. Changing this parameter will create a new resource.
	// +kubebuilder:validation:Optional
	MatchLabelMetadataEncrypted *string `json:"matchLabelMetadataEncrypted,omitempty" tf:"match_label_metadata_encrypted,omitempty"`

	// Specifies the matched disk size. If omitted,
	// the disk size is not limited. Example: 100. Changing this parameter will create a new resource.
	// +kubebuilder:validation:Optional
	MatchLabelSize *string `json:"matchLabelSize,omitempty" tf:"match_label_size,omitempty"`

	// Specifies the EVS disk type. Currently,
	// SSD, GPSSD, and SAS are supported. If omitted, the disk type is not limited.
	// Changing this parameter will create a new resource.
	// +kubebuilder:validation:Optional
	MatchLabelVolumeType *string `json:"matchLabelVolumeType,omitempty" tf:"match_label_volume_type,omitempty"`

	// Specifies the selector name, used as the index of selector_names in storage group.
	// The name of each selector must be unique. Changing this parameter will create a new resource.
	// +kubebuilder:validation:Optional
	Name *string `json:"name" tf:"name,omitempty"`

	// Specifies the storage type. Currently, only evs (EVS volumes) is supported.
	// The default value is evs. Changing this parameter will create a new resource.
	// +kubebuilder:validation:Optional
	Type *string `json:"type,omitempty" tf:"type,omitempty"`
}

type StorageInitParameters struct {

	// Specifies the storage group consists of multiple storage devices.
	// This is used to divide storage space. Structure is documented below.
	// Changing this parameter will create a new resource.
	Groups []GroupsInitParameters `json:"groups,omitempty" tf:"groups,omitempty"`

	// Specifies the disk selection.
	// Matched disks are managed according to match labels and storage type. Structure is documented below.
	// Changing this parameter will create a new resource.
	Selectors []SelectorsInitParameters `json:"selectors,omitempty" tf:"selectors,omitempty"`
}

type StorageObservation struct {

	// Specifies the storage group consists of multiple storage devices.
	// This is used to divide storage space. Structure is documented below.
	// Changing this parameter will create a new resource.
	Groups []GroupsObservation `json:"groups,omitempty" tf:"groups,omitempty"`

	// Specifies the disk selection.
	// Matched disks are managed according to match labels and storage type. Structure is documented below.
	// Changing this parameter will create a new resource.
	Selectors []SelectorsObservation `json:"selectors,omitempty" tf:"selectors,omitempty"`
}

type StorageParameters struct {

	// Specifies the storage group consists of multiple storage devices.
	// This is used to divide storage space. Structure is documented below.
	// Changing this parameter will create a new resource.
	// +kubebuilder:validation:Optional
	Groups []GroupsParameters `json:"groups" tf:"groups,omitempty"`

	// Specifies the disk selection.
	// Matched disks are managed according to match labels and storage type. Structure is documented below.
	// Changing this parameter will create a new resource.
	// +kubebuilder:validation:Optional
	Selectors []SelectorsParameters `json:"selectors" tf:"selectors,omitempty"`
}

type TaintsInitParameters struct {

	// Available options are NoSchedule, PreferNoSchedule, and NoExecute.
	// Changing this parameter will create a new resource.
	Effect *string `json:"effect,omitempty" tf:"effect,omitempty"`

	// A key must contain 1 to 63 characters starting with a letter or digit.
	// Only letters, digits, hyphens (-), underscores (_), and periods (.) are allowed. A DNS subdomain name can be used
	// as the prefix of a key. Changing this parameter will create a new resource.
	Key *string `json:"key,omitempty" tf:"key,omitempty"`

	// A value must start with a letter or digit and can contain a maximum of 63
	// characters, including letters, digits, hyphens (-), underscores (_), and periods (.). Changing this parameter will
	// create a new resource.
	Value *string `json:"value,omitempty" tf:"value,omitempty"`
}

type TaintsObservation struct {

	// Available options are NoSchedule, PreferNoSchedule, and NoExecute.
	// Changing this parameter will create a new resource.
	Effect *string `json:"effect,omitempty" tf:"effect,omitempty"`

	// A key must contain 1 to 63 characters starting with a letter or digit.
	// Only letters, digits, hyphens (-), underscores (_), and periods (.) are allowed. A DNS subdomain name can be used
	// as the prefix of a key. Changing this parameter will create a new resource.
	Key *string `json:"key,omitempty" tf:"key,omitempty"`

	// A value must start with a letter or digit and can contain a maximum of 63
	// characters, including letters, digits, hyphens (-), underscores (_), and periods (.). Changing this parameter will
	// create a new resource.
	Value *string `json:"value,omitempty" tf:"value,omitempty"`
}

type TaintsParameters struct {

	// Available options are NoSchedule, PreferNoSchedule, and NoExecute.
	// Changing this parameter will create a new resource.
	// +kubebuilder:validation:Optional
	Effect *string `json:"effect" tf:"effect,omitempty"`

	// A key must contain 1 to 63 characters starting with a letter or digit.
	// Only letters, digits, hyphens (-), underscores (_), and periods (.) are allowed. A DNS subdomain name can be used
	// as the prefix of a key. Changing this parameter will create a new resource.
	// +kubebuilder:validation:Optional
	Key *string `json:"key" tf:"key,omitempty"`

	// A value must start with a letter or digit and can contain a maximum of 63
	// characters, including letters, digits, hyphens (-), underscores (_), and periods (.). Changing this parameter will
	// create a new resource.
	// +kubebuilder:validation:Optional
	Value *string `json:"value,omitempty" tf:"value,omitempty"`
}

type VirtualSpacesInitParameters struct {

	// Specifies the LVM write mode, values can be linear and striped.
	// This parameter takes effect only in kubernetes and user configuration. Changing this parameter will create
	// a new resource.
	LvmLvType *string `json:"lvmLvType,omitempty" tf:"lvm_lv_type,omitempty"`

	// Specifies the absolute path to which the disk is attached.
	// This parameter takes effect only in user configuration. Changing this parameter will create a new resource.
	LvmPath *string `json:"lvmPath,omitempty" tf:"lvm_path,omitempty"`

	// Specifies the selector name, used as the index of selector_names in storage group.
	// The name of each selector must be unique. Changing this parameter will create a new resource.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// Specifies the LVM write mode, values can be linear and striped.
	// This parameter takes effect only in runtime configuration. Changing this parameter will create a new resource.
	RuntimeLvType *string `json:"runtimeLvType,omitempty" tf:"runtime_lv_type,omitempty"`

	// Specifies the disk size in GB.
	// Changing this parameter will create a new resource.
	Size *string `json:"size,omitempty" tf:"size,omitempty"`
}

type VirtualSpacesObservation struct {

	// Specifies the LVM write mode, values can be linear and striped.
	// This parameter takes effect only in kubernetes and user configuration. Changing this parameter will create
	// a new resource.
	LvmLvType *string `json:"lvmLvType,omitempty" tf:"lvm_lv_type,omitempty"`

	// Specifies the absolute path to which the disk is attached.
	// This parameter takes effect only in user configuration. Changing this parameter will create a new resource.
	LvmPath *string `json:"lvmPath,omitempty" tf:"lvm_path,omitempty"`

	// Specifies the selector name, used as the index of selector_names in storage group.
	// The name of each selector must be unique. Changing this parameter will create a new resource.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// Specifies the LVM write mode, values can be linear and striped.
	// This parameter takes effect only in runtime configuration. Changing this parameter will create a new resource.
	RuntimeLvType *string `json:"runtimeLvType,omitempty" tf:"runtime_lv_type,omitempty"`

	// Specifies the disk size in GB.
	// Changing this parameter will create a new resource.
	Size *string `json:"size,omitempty" tf:"size,omitempty"`
}

type VirtualSpacesParameters struct {

	// Specifies the LVM write mode, values can be linear and striped.
	// This parameter takes effect only in kubernetes and user configuration. Changing this parameter will create
	// a new resource.
	// +kubebuilder:validation:Optional
	LvmLvType *string `json:"lvmLvType,omitempty" tf:"lvm_lv_type,omitempty"`

	// Specifies the absolute path to which the disk is attached.
	// This parameter takes effect only in user configuration. Changing this parameter will create a new resource.
	// +kubebuilder:validation:Optional
	LvmPath *string `json:"lvmPath,omitempty" tf:"lvm_path,omitempty"`

	// Specifies the selector name, used as the index of selector_names in storage group.
	// The name of each selector must be unique. Changing this parameter will create a new resource.
	// +kubebuilder:validation:Optional
	Name *string `json:"name" tf:"name,omitempty"`

	// Specifies the LVM write mode, values can be linear and striped.
	// This parameter takes effect only in runtime configuration. Changing this parameter will create a new resource.
	// +kubebuilder:validation:Optional
	RuntimeLvType *string `json:"runtimeLvType,omitempty" tf:"runtime_lv_type,omitempty"`

	// Specifies the disk size in GB.
	// Changing this parameter will create a new resource.
	// +kubebuilder:validation:Optional
	Size *string `json:"size" tf:"size,omitempty"`
}

// NodeSpec defines the desired state of Node
type NodeSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     NodeParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider NodeInitParameters `json:"initProvider,omitempty"`
}

// NodeStatus defines the observed state of Node.
type NodeStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        NodeObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// Node is the Schema for the Nodes API. ""
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,huaweicloud}
type Node struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.availabilityZone) || (has(self.initProvider) && has(self.initProvider.availabilityZone))",message="spec.forProvider.availabilityZone is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.dataVolumes) || (has(self.initProvider) && has(self.initProvider.dataVolumes))",message="spec.forProvider.dataVolumes is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.flavorId) || (has(self.initProvider) && has(self.initProvider.flavorId))",message="spec.forProvider.flavorId is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.rootVolume) || (has(self.initProvider) && has(self.initProvider.rootVolume))",message="spec.forProvider.rootVolume is a required parameter"
	Spec   NodeSpec   `json:"spec"`
	Status NodeStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// NodeList contains a list of Nodes
type NodeList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []Node `json:"items"`
}

// Repository type metadata.
var (
	Node_Kind             = "Node"
	Node_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: Node_Kind}.String()
	Node_KindAPIVersion   = Node_Kind + "." + CRDGroupVersion.String()
	Node_GroupVersionKind = CRDGroupVersion.WithKind(Node_Kind)
)

func init() {
	SchemeBuilder.Register(&Node{}, &NodeList{})
}
