//go:build !ignore_autogenerated

// SPDX-FileCopyrightText: 2024 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

// Code generated by controller-gen. DO NOT EDIT.

package v1alpha1

import (
	"github.com/crossplane/crossplane-runtime/apis/common/v1"
	runtime "k8s.io/apimachinery/pkg/runtime"
)

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *Addon) DeepCopyInto(out *Addon) {
	*out = *in
	out.TypeMeta = in.TypeMeta
	in.ObjectMeta.DeepCopyInto(&out.ObjectMeta)
	in.Spec.DeepCopyInto(&out.Spec)
	in.Status.DeepCopyInto(&out.Status)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new Addon.
func (in *Addon) DeepCopy() *Addon {
	if in == nil {
		return nil
	}
	out := new(Addon)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyObject is an autogenerated deepcopy function, copying the receiver, creating a new runtime.Object.
func (in *Addon) DeepCopyObject() runtime.Object {
	if c := in.DeepCopy(); c != nil {
		return c
	}
	return nil
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *AddonInitParameters) DeepCopyInto(out *AddonInitParameters) {
	*out = *in
	if in.ClusterID != nil {
		in, out := &in.ClusterID, &out.ClusterID
		*out = new(string)
		**out = **in
	}
	if in.ClusterIDRef != nil {
		in, out := &in.ClusterIDRef, &out.ClusterIDRef
		*out = new(v1.Reference)
		(*in).DeepCopyInto(*out)
	}
	if in.ClusterIDSelector != nil {
		in, out := &in.ClusterIDSelector, &out.ClusterIDSelector
		*out = new(v1.Selector)
		(*in).DeepCopyInto(*out)
	}
	if in.Region != nil {
		in, out := &in.Region, &out.Region
		*out = new(string)
		**out = **in
	}
	if in.TemplateName != nil {
		in, out := &in.TemplateName, &out.TemplateName
		*out = new(string)
		**out = **in
	}
	if in.Values != nil {
		in, out := &in.Values, &out.Values
		*out = make([]ValuesInitParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.Version != nil {
		in, out := &in.Version, &out.Version
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new AddonInitParameters.
func (in *AddonInitParameters) DeepCopy() *AddonInitParameters {
	if in == nil {
		return nil
	}
	out := new(AddonInitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *AddonList) DeepCopyInto(out *AddonList) {
	*out = *in
	out.TypeMeta = in.TypeMeta
	in.ListMeta.DeepCopyInto(&out.ListMeta)
	if in.Items != nil {
		in, out := &in.Items, &out.Items
		*out = make([]Addon, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new AddonList.
func (in *AddonList) DeepCopy() *AddonList {
	if in == nil {
		return nil
	}
	out := new(AddonList)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyObject is an autogenerated deepcopy function, copying the receiver, creating a new runtime.Object.
func (in *AddonList) DeepCopyObject() runtime.Object {
	if c := in.DeepCopy(); c != nil {
		return c
	}
	return nil
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *AddonObservation) DeepCopyInto(out *AddonObservation) {
	*out = *in
	if in.ClusterID != nil {
		in, out := &in.ClusterID, &out.ClusterID
		*out = new(string)
		**out = **in
	}
	if in.Description != nil {
		in, out := &in.Description, &out.Description
		*out = new(string)
		**out = **in
	}
	if in.ID != nil {
		in, out := &in.ID, &out.ID
		*out = new(string)
		**out = **in
	}
	if in.Region != nil {
		in, out := &in.Region, &out.Region
		*out = new(string)
		**out = **in
	}
	if in.Status != nil {
		in, out := &in.Status, &out.Status
		*out = new(string)
		**out = **in
	}
	if in.TemplateName != nil {
		in, out := &in.TemplateName, &out.TemplateName
		*out = new(string)
		**out = **in
	}
	if in.Values != nil {
		in, out := &in.Values, &out.Values
		*out = make([]ValuesObservation, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.Version != nil {
		in, out := &in.Version, &out.Version
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new AddonObservation.
func (in *AddonObservation) DeepCopy() *AddonObservation {
	if in == nil {
		return nil
	}
	out := new(AddonObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *AddonParameters) DeepCopyInto(out *AddonParameters) {
	*out = *in
	if in.ClusterID != nil {
		in, out := &in.ClusterID, &out.ClusterID
		*out = new(string)
		**out = **in
	}
	if in.ClusterIDRef != nil {
		in, out := &in.ClusterIDRef, &out.ClusterIDRef
		*out = new(v1.Reference)
		(*in).DeepCopyInto(*out)
	}
	if in.ClusterIDSelector != nil {
		in, out := &in.ClusterIDSelector, &out.ClusterIDSelector
		*out = new(v1.Selector)
		(*in).DeepCopyInto(*out)
	}
	if in.Region != nil {
		in, out := &in.Region, &out.Region
		*out = new(string)
		**out = **in
	}
	if in.TemplateName != nil {
		in, out := &in.TemplateName, &out.TemplateName
		*out = new(string)
		**out = **in
	}
	if in.Values != nil {
		in, out := &in.Values, &out.Values
		*out = make([]ValuesParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.Version != nil {
		in, out := &in.Version, &out.Version
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new AddonParameters.
func (in *AddonParameters) DeepCopy() *AddonParameters {
	if in == nil {
		return nil
	}
	out := new(AddonParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *AddonSpec) DeepCopyInto(out *AddonSpec) {
	*out = *in
	in.ResourceSpec.DeepCopyInto(&out.ResourceSpec)
	in.ForProvider.DeepCopyInto(&out.ForProvider)
	in.InitProvider.DeepCopyInto(&out.InitProvider)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new AddonSpec.
func (in *AddonSpec) DeepCopy() *AddonSpec {
	if in == nil {
		return nil
	}
	out := new(AddonSpec)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *AddonStatus) DeepCopyInto(out *AddonStatus) {
	*out = *in
	in.ResourceStatus.DeepCopyInto(&out.ResourceStatus)
	in.AtProvider.DeepCopyInto(&out.AtProvider)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new AddonStatus.
func (in *AddonStatus) DeepCopy() *AddonStatus {
	if in == nil {
		return nil
	}
	out := new(AddonStatus)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *AddonsInitParameters) DeepCopyInto(out *AddonsInitParameters) {
	*out = *in
	if in.AddonTemplateName != nil {
		in, out := &in.AddonTemplateName, &out.AddonTemplateName
		*out = new(string)
		**out = **in
	}
	if in.Operation != nil {
		in, out := &in.Operation, &out.Operation
		*out = new(string)
		**out = **in
	}
	if in.Values != nil {
		in, out := &in.Values, &out.Values
		*out = make([]AddonsValuesInitParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.Version != nil {
		in, out := &in.Version, &out.Version
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new AddonsInitParameters.
func (in *AddonsInitParameters) DeepCopy() *AddonsInitParameters {
	if in == nil {
		return nil
	}
	out := new(AddonsInitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *AddonsObservation) DeepCopyInto(out *AddonsObservation) {
	*out = *in
	if in.AddonTemplateName != nil {
		in, out := &in.AddonTemplateName, &out.AddonTemplateName
		*out = new(string)
		**out = **in
	}
	if in.Operation != nil {
		in, out := &in.Operation, &out.Operation
		*out = new(string)
		**out = **in
	}
	if in.Values != nil {
		in, out := &in.Values, &out.Values
		*out = make([]AddonsValuesObservation, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.Version != nil {
		in, out := &in.Version, &out.Version
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new AddonsObservation.
func (in *AddonsObservation) DeepCopy() *AddonsObservation {
	if in == nil {
		return nil
	}
	out := new(AddonsObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *AddonsParameters) DeepCopyInto(out *AddonsParameters) {
	*out = *in
	if in.AddonTemplateName != nil {
		in, out := &in.AddonTemplateName, &out.AddonTemplateName
		*out = new(string)
		**out = **in
	}
	if in.Operation != nil {
		in, out := &in.Operation, &out.Operation
		*out = new(string)
		**out = **in
	}
	if in.Values != nil {
		in, out := &in.Values, &out.Values
		*out = make([]AddonsValuesParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.Version != nil {
		in, out := &in.Version, &out.Version
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new AddonsParameters.
func (in *AddonsParameters) DeepCopy() *AddonsParameters {
	if in == nil {
		return nil
	}
	out := new(AddonsParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *AddonsValuesInitParameters) DeepCopyInto(out *AddonsValuesInitParameters) {
	*out = *in
	if in.BasicJSON != nil {
		in, out := &in.BasicJSON, &out.BasicJSON
		*out = new(string)
		**out = **in
	}
	if in.CustomJSON != nil {
		in, out := &in.CustomJSON, &out.CustomJSON
		*out = new(string)
		**out = **in
	}
	if in.FlavorJSON != nil {
		in, out := &in.FlavorJSON, &out.FlavorJSON
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new AddonsValuesInitParameters.
func (in *AddonsValuesInitParameters) DeepCopy() *AddonsValuesInitParameters {
	if in == nil {
		return nil
	}
	out := new(AddonsValuesInitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *AddonsValuesObservation) DeepCopyInto(out *AddonsValuesObservation) {
	*out = *in
	if in.BasicJSON != nil {
		in, out := &in.BasicJSON, &out.BasicJSON
		*out = new(string)
		**out = **in
	}
	if in.CustomJSON != nil {
		in, out := &in.CustomJSON, &out.CustomJSON
		*out = new(string)
		**out = **in
	}
	if in.FlavorJSON != nil {
		in, out := &in.FlavorJSON, &out.FlavorJSON
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new AddonsValuesObservation.
func (in *AddonsValuesObservation) DeepCopy() *AddonsValuesObservation {
	if in == nil {
		return nil
	}
	out := new(AddonsValuesObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *AddonsValuesParameters) DeepCopyInto(out *AddonsValuesParameters) {
	*out = *in
	if in.BasicJSON != nil {
		in, out := &in.BasicJSON, &out.BasicJSON
		*out = new(string)
		**out = **in
	}
	if in.CustomJSON != nil {
		in, out := &in.CustomJSON, &out.CustomJSON
		*out = new(string)
		**out = **in
	}
	if in.FlavorJSON != nil {
		in, out := &in.FlavorJSON, &out.FlavorJSON
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new AddonsValuesParameters.
func (in *AddonsValuesParameters) DeepCopy() *AddonsValuesParameters {
	if in == nil {
		return nil
	}
	out := new(AddonsValuesParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *AutoscalingInitParameters) DeepCopyInto(out *AutoscalingInitParameters) {
	*out = *in
	if in.Enable != nil {
		in, out := &in.Enable, &out.Enable
		*out = new(bool)
		**out = **in
	}
	if in.ExtensionPriority != nil {
		in, out := &in.ExtensionPriority, &out.ExtensionPriority
		*out = new(float64)
		**out = **in
	}
	if in.MaxNodeCount != nil {
		in, out := &in.MaxNodeCount, &out.MaxNodeCount
		*out = new(float64)
		**out = **in
	}
	if in.MinNodeCount != nil {
		in, out := &in.MinNodeCount, &out.MinNodeCount
		*out = new(float64)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new AutoscalingInitParameters.
func (in *AutoscalingInitParameters) DeepCopy() *AutoscalingInitParameters {
	if in == nil {
		return nil
	}
	out := new(AutoscalingInitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *AutoscalingObservation) DeepCopyInto(out *AutoscalingObservation) {
	*out = *in
	if in.Enable != nil {
		in, out := &in.Enable, &out.Enable
		*out = new(bool)
		**out = **in
	}
	if in.ExtensionPriority != nil {
		in, out := &in.ExtensionPriority, &out.ExtensionPriority
		*out = new(float64)
		**out = **in
	}
	if in.MaxNodeCount != nil {
		in, out := &in.MaxNodeCount, &out.MaxNodeCount
		*out = new(float64)
		**out = **in
	}
	if in.MinNodeCount != nil {
		in, out := &in.MinNodeCount, &out.MinNodeCount
		*out = new(float64)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new AutoscalingObservation.
func (in *AutoscalingObservation) DeepCopy() *AutoscalingObservation {
	if in == nil {
		return nil
	}
	out := new(AutoscalingObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *AutoscalingParameters) DeepCopyInto(out *AutoscalingParameters) {
	*out = *in
	if in.Enable != nil {
		in, out := &in.Enable, &out.Enable
		*out = new(bool)
		**out = **in
	}
	if in.ExtensionPriority != nil {
		in, out := &in.ExtensionPriority, &out.ExtensionPriority
		*out = new(float64)
		**out = **in
	}
	if in.MaxNodeCount != nil {
		in, out := &in.MaxNodeCount, &out.MaxNodeCount
		*out = new(float64)
		**out = **in
	}
	if in.MinNodeCount != nil {
		in, out := &in.MinNodeCount, &out.MinNodeCount
		*out = new(float64)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new AutoscalingParameters.
func (in *AutoscalingParameters) DeepCopy() *AutoscalingParameters {
	if in == nil {
		return nil
	}
	out := new(AutoscalingParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *CapacityReservationSpecificationInitParameters) DeepCopyInto(out *CapacityReservationSpecificationInitParameters) {
	*out = *in
	if in.ID != nil {
		in, out := &in.ID, &out.ID
		*out = new(string)
		**out = **in
	}
	if in.Preference != nil {
		in, out := &in.Preference, &out.Preference
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new CapacityReservationSpecificationInitParameters.
func (in *CapacityReservationSpecificationInitParameters) DeepCopy() *CapacityReservationSpecificationInitParameters {
	if in == nil {
		return nil
	}
	out := new(CapacityReservationSpecificationInitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *CapacityReservationSpecificationObservation) DeepCopyInto(out *CapacityReservationSpecificationObservation) {
	*out = *in
	if in.ID != nil {
		in, out := &in.ID, &out.ID
		*out = new(string)
		**out = **in
	}
	if in.Preference != nil {
		in, out := &in.Preference, &out.Preference
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new CapacityReservationSpecificationObservation.
func (in *CapacityReservationSpecificationObservation) DeepCopy() *CapacityReservationSpecificationObservation {
	if in == nil {
		return nil
	}
	out := new(CapacityReservationSpecificationObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *CapacityReservationSpecificationParameters) DeepCopyInto(out *CapacityReservationSpecificationParameters) {
	*out = *in
	if in.ID != nil {
		in, out := &in.ID, &out.ID
		*out = new(string)
		**out = **in
	}
	if in.Preference != nil {
		in, out := &in.Preference, &out.Preference
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new CapacityReservationSpecificationParameters.
func (in *CapacityReservationSpecificationParameters) DeepCopy() *CapacityReservationSpecificationParameters {
	if in == nil {
		return nil
	}
	out := new(CapacityReservationSpecificationParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *CertificateClustersInitParameters) DeepCopyInto(out *CertificateClustersInitParameters) {
	*out = *in
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new CertificateClustersInitParameters.
func (in *CertificateClustersInitParameters) DeepCopy() *CertificateClustersInitParameters {
	if in == nil {
		return nil
	}
	out := new(CertificateClustersInitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *CertificateClustersObservation) DeepCopyInto(out *CertificateClustersObservation) {
	*out = *in
	if in.CertificateAuthorityData != nil {
		in, out := &in.CertificateAuthorityData, &out.CertificateAuthorityData
		*out = new(string)
		**out = **in
	}
	if in.Name != nil {
		in, out := &in.Name, &out.Name
		*out = new(string)
		**out = **in
	}
	if in.Server != nil {
		in, out := &in.Server, &out.Server
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new CertificateClustersObservation.
func (in *CertificateClustersObservation) DeepCopy() *CertificateClustersObservation {
	if in == nil {
		return nil
	}
	out := new(CertificateClustersObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *CertificateClustersParameters) DeepCopyInto(out *CertificateClustersParameters) {
	*out = *in
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new CertificateClustersParameters.
func (in *CertificateClustersParameters) DeepCopy() *CertificateClustersParameters {
	if in == nil {
		return nil
	}
	out := new(CertificateClustersParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *CertificateUsersInitParameters) DeepCopyInto(out *CertificateUsersInitParameters) {
	*out = *in
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new CertificateUsersInitParameters.
func (in *CertificateUsersInitParameters) DeepCopy() *CertificateUsersInitParameters {
	if in == nil {
		return nil
	}
	out := new(CertificateUsersInitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *CertificateUsersObservation) DeepCopyInto(out *CertificateUsersObservation) {
	*out = *in
	if in.ClientCertificateData != nil {
		in, out := &in.ClientCertificateData, &out.ClientCertificateData
		*out = new(string)
		**out = **in
	}
	if in.ClientKeyData != nil {
		in, out := &in.ClientKeyData, &out.ClientKeyData
		*out = new(string)
		**out = **in
	}
	if in.Name != nil {
		in, out := &in.Name, &out.Name
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new CertificateUsersObservation.
func (in *CertificateUsersObservation) DeepCopy() *CertificateUsersObservation {
	if in == nil {
		return nil
	}
	out := new(CertificateUsersObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *CertificateUsersParameters) DeepCopyInto(out *CertificateUsersParameters) {
	*out = *in
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new CertificateUsersParameters.
func (in *CertificateUsersParameters) DeepCopy() *CertificateUsersParameters {
	if in == nil {
		return nil
	}
	out := new(CertificateUsersParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *Chart) DeepCopyInto(out *Chart) {
	*out = *in
	out.TypeMeta = in.TypeMeta
	in.ObjectMeta.DeepCopyInto(&out.ObjectMeta)
	in.Spec.DeepCopyInto(&out.Spec)
	in.Status.DeepCopyInto(&out.Status)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new Chart.
func (in *Chart) DeepCopy() *Chart {
	if in == nil {
		return nil
	}
	out := new(Chart)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyObject is an autogenerated deepcopy function, copying the receiver, creating a new runtime.Object.
func (in *Chart) DeepCopyObject() runtime.Object {
	if c := in.DeepCopy(); c != nil {
		return c
	}
	return nil
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ChartInitParameters) DeepCopyInto(out *ChartInitParameters) {
	*out = *in
	if in.Content != nil {
		in, out := &in.Content, &out.Content
		*out = new(string)
		**out = **in
	}
	if in.Parameters != nil {
		in, out := &in.Parameters, &out.Parameters
		*out = new(string)
		**out = **in
	}
	if in.Region != nil {
		in, out := &in.Region, &out.Region
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ChartInitParameters.
func (in *ChartInitParameters) DeepCopy() *ChartInitParameters {
	if in == nil {
		return nil
	}
	out := new(ChartInitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ChartList) DeepCopyInto(out *ChartList) {
	*out = *in
	out.TypeMeta = in.TypeMeta
	in.ListMeta.DeepCopyInto(&out.ListMeta)
	if in.Items != nil {
		in, out := &in.Items, &out.Items
		*out = make([]Chart, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ChartList.
func (in *ChartList) DeepCopy() *ChartList {
	if in == nil {
		return nil
	}
	out := new(ChartList)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyObject is an autogenerated deepcopy function, copying the receiver, creating a new runtime.Object.
func (in *ChartList) DeepCopyObject() runtime.Object {
	if c := in.DeepCopy(); c != nil {
		return c
	}
	return nil
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ChartObservation) DeepCopyInto(out *ChartObservation) {
	*out = *in
	if in.ChartURL != nil {
		in, out := &in.ChartURL, &out.ChartURL
		*out = new(string)
		**out = **in
	}
	if in.Content != nil {
		in, out := &in.Content, &out.Content
		*out = new(string)
		**out = **in
	}
	if in.CreatedAt != nil {
		in, out := &in.CreatedAt, &out.CreatedAt
		*out = new(string)
		**out = **in
	}
	if in.Description != nil {
		in, out := &in.Description, &out.Description
		*out = new(string)
		**out = **in
	}
	if in.ID != nil {
		in, out := &in.ID, &out.ID
		*out = new(string)
		**out = **in
	}
	if in.Instruction != nil {
		in, out := &in.Instruction, &out.Instruction
		*out = new(string)
		**out = **in
	}
	if in.Name != nil {
		in, out := &in.Name, &out.Name
		*out = new(string)
		**out = **in
	}
	if in.Parameters != nil {
		in, out := &in.Parameters, &out.Parameters
		*out = new(string)
		**out = **in
	}
	if in.Public != nil {
		in, out := &in.Public, &out.Public
		*out = new(bool)
		**out = **in
	}
	if in.Region != nil {
		in, out := &in.Region, &out.Region
		*out = new(string)
		**out = **in
	}
	if in.Source != nil {
		in, out := &in.Source, &out.Source
		*out = new(string)
		**out = **in
	}
	if in.Translate != nil {
		in, out := &in.Translate, &out.Translate
		*out = new(string)
		**out = **in
	}
	if in.UpdatedAt != nil {
		in, out := &in.UpdatedAt, &out.UpdatedAt
		*out = new(string)
		**out = **in
	}
	if in.Value != nil {
		in, out := &in.Value, &out.Value
		*out = new(string)
		**out = **in
	}
	if in.Version != nil {
		in, out := &in.Version, &out.Version
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ChartObservation.
func (in *ChartObservation) DeepCopy() *ChartObservation {
	if in == nil {
		return nil
	}
	out := new(ChartObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ChartParameters) DeepCopyInto(out *ChartParameters) {
	*out = *in
	if in.Content != nil {
		in, out := &in.Content, &out.Content
		*out = new(string)
		**out = **in
	}
	if in.Parameters != nil {
		in, out := &in.Parameters, &out.Parameters
		*out = new(string)
		**out = **in
	}
	if in.Region != nil {
		in, out := &in.Region, &out.Region
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ChartParameters.
func (in *ChartParameters) DeepCopy() *ChartParameters {
	if in == nil {
		return nil
	}
	out := new(ChartParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ChartSpec) DeepCopyInto(out *ChartSpec) {
	*out = *in
	in.ResourceSpec.DeepCopyInto(&out.ResourceSpec)
	in.ForProvider.DeepCopyInto(&out.ForProvider)
	in.InitProvider.DeepCopyInto(&out.InitProvider)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ChartSpec.
func (in *ChartSpec) DeepCopy() *ChartSpec {
	if in == nil {
		return nil
	}
	out := new(ChartSpec)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ChartStatus) DeepCopyInto(out *ChartStatus) {
	*out = *in
	in.ResourceStatus.DeepCopyInto(&out.ResourceStatus)
	in.AtProvider.DeepCopyInto(&out.AtProvider)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ChartStatus.
func (in *ChartStatus) DeepCopy() *ChartStatus {
	if in == nil {
		return nil
	}
	out := new(ChartStatus)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *Cluster) DeepCopyInto(out *Cluster) {
	*out = *in
	out.TypeMeta = in.TypeMeta
	in.ObjectMeta.DeepCopyInto(&out.ObjectMeta)
	in.Spec.DeepCopyInto(&out.Spec)
	in.Status.DeepCopyInto(&out.Status)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new Cluster.
func (in *Cluster) DeepCopy() *Cluster {
	if in == nil {
		return nil
	}
	out := new(Cluster)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyObject is an autogenerated deepcopy function, copying the receiver, creating a new runtime.Object.
func (in *Cluster) DeepCopyObject() runtime.Object {
	if c := in.DeepCopy(); c != nil {
		return c
	}
	return nil
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ClusterInitParameters) DeepCopyInto(out *ClusterInitParameters) {
	*out = *in
	if in.Alias != nil {
		in, out := &in.Alias, &out.Alias
		*out = new(string)
		**out = **in
	}
	if in.Annotations != nil {
		in, out := &in.Annotations, &out.Annotations
		*out = make(map[string]*string, len(*in))
		for key, val := range *in {
			var outVal *string
			if val == nil {
				(*out)[key] = nil
			} else {
				inVal := (*in)[key]
				in, out := &inVal, &outVal
				*out = new(string)
				**out = **in
			}
			(*out)[key] = outVal
		}
	}
	if in.AuthenticatingProxyCA != nil {
		in, out := &in.AuthenticatingProxyCA, &out.AuthenticatingProxyCA
		*out = new(string)
		**out = **in
	}
	if in.AuthenticatingProxyCert != nil {
		in, out := &in.AuthenticatingProxyCert, &out.AuthenticatingProxyCert
		*out = new(string)
		**out = **in
	}
	if in.AuthenticatingProxyPrivateKey != nil {
		in, out := &in.AuthenticatingProxyPrivateKey, &out.AuthenticatingProxyPrivateKey
		*out = new(string)
		**out = **in
	}
	if in.AuthenticationMode != nil {
		in, out := &in.AuthenticationMode, &out.AuthenticationMode
		*out = new(string)
		**out = **in
	}
	if in.AutoPay != nil {
		in, out := &in.AutoPay, &out.AutoPay
		*out = new(string)
		**out = **in
	}
	if in.AutoRenew != nil {
		in, out := &in.AutoRenew, &out.AutoRenew
		*out = new(string)
		**out = **in
	}
	if in.BillingMode != nil {
		in, out := &in.BillingMode, &out.BillingMode
		*out = new(float64)
		**out = **in
	}
	if in.ChargingMode != nil {
		in, out := &in.ChargingMode, &out.ChargingMode
		*out = new(string)
		**out = **in
	}
	if in.ClusterType != nil {
		in, out := &in.ClusterType, &out.ClusterType
		*out = new(string)
		**out = **in
	}
	if in.ClusterVersion != nil {
		in, out := &in.ClusterVersion, &out.ClusterVersion
		*out = new(string)
		**out = **in
	}
	if in.ComponentConfigurations != nil {
		in, out := &in.ComponentConfigurations, &out.ComponentConfigurations
		*out = make([]ComponentConfigurationsInitParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.ContainerNetworkCidr != nil {
		in, out := &in.ContainerNetworkCidr, &out.ContainerNetworkCidr
		*out = new(string)
		**out = **in
	}
	if in.ContainerNetworkType != nil {
		in, out := &in.ContainerNetworkType, &out.ContainerNetworkType
		*out = new(string)
		**out = **in
	}
	if in.CustomSan != nil {
		in, out := &in.CustomSan, &out.CustomSan
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.DeleteAll != nil {
		in, out := &in.DeleteAll, &out.DeleteAll
		*out = new(string)
		**out = **in
	}
	if in.DeleteEFS != nil {
		in, out := &in.DeleteEFS, &out.DeleteEFS
		*out = new(string)
		**out = **in
	}
	if in.DeleteEni != nil {
		in, out := &in.DeleteEni, &out.DeleteEni
		*out = new(string)
		**out = **in
	}
	if in.DeleteEvs != nil {
		in, out := &in.DeleteEvs, &out.DeleteEvs
		*out = new(string)
		**out = **in
	}
	if in.DeleteNet != nil {
		in, out := &in.DeleteNet, &out.DeleteNet
		*out = new(string)
		**out = **in
	}
	if in.DeleteObs != nil {
		in, out := &in.DeleteObs, &out.DeleteObs
		*out = new(string)
		**out = **in
	}
	if in.DeleteSfs != nil {
		in, out := &in.DeleteSfs, &out.DeleteSfs
		*out = new(string)
		**out = **in
	}
	if in.Description != nil {
		in, out := &in.Description, &out.Description
		*out = new(string)
		**out = **in
	}
	if in.EIP != nil {
		in, out := &in.EIP, &out.EIP
		*out = new(string)
		**out = **in
	}
	if in.EIPRef != nil {
		in, out := &in.EIPRef, &out.EIPRef
		*out = new(v1.Reference)
		(*in).DeepCopyInto(*out)
	}
	if in.EIPSelector != nil {
		in, out := &in.EIPSelector, &out.EIPSelector
		*out = new(v1.Selector)
		(*in).DeepCopyInto(*out)
	}
	if in.EnableDistributeManagement != nil {
		in, out := &in.EnableDistributeManagement, &out.EnableDistributeManagement
		*out = new(bool)
		**out = **in
	}
	if in.EniSubnetCidr != nil {
		in, out := &in.EniSubnetCidr, &out.EniSubnetCidr
		*out = new(string)
		**out = **in
	}
	if in.EniSubnetID != nil {
		in, out := &in.EniSubnetID, &out.EniSubnetID
		*out = new(string)
		**out = **in
	}
	if in.EnterpriseProjectID != nil {
		in, out := &in.EnterpriseProjectID, &out.EnterpriseProjectID
		*out = new(string)
		**out = **in
	}
	if in.ExtendParam != nil {
		in, out := &in.ExtendParam, &out.ExtendParam
		*out = make(map[string]*string, len(*in))
		for key, val := range *in {
			var outVal *string
			if val == nil {
				(*out)[key] = nil
			} else {
				inVal := (*in)[key]
				in, out := &inVal, &outVal
				*out = new(string)
				**out = **in
			}
			(*out)[key] = outVal
		}
	}
	if in.ExtendParams != nil {
		in, out := &in.ExtendParams, &out.ExtendParams
		*out = make([]ExtendParamsInitParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.FlavorID != nil {
		in, out := &in.FlavorID, &out.FlavorID
		*out = new(string)
		**out = **in
	}
	if in.Hibernate != nil {
		in, out := &in.Hibernate, &out.Hibernate
		*out = new(bool)
		**out = **in
	}
	if in.HighwaySubnetID != nil {
		in, out := &in.HighwaySubnetID, &out.HighwaySubnetID
		*out = new(string)
		**out = **in
	}
	if in.IPv6Enable != nil {
		in, out := &in.IPv6Enable, &out.IPv6Enable
		*out = new(bool)
		**out = **in
	}
	if in.KubeProxyMode != nil {
		in, out := &in.KubeProxyMode, &out.KubeProxyMode
		*out = new(string)
		**out = **in
	}
	if in.Labels != nil {
		in, out := &in.Labels, &out.Labels
		*out = make(map[string]*string, len(*in))
		for key, val := range *in {
			var outVal *string
			if val == nil {
				(*out)[key] = nil
			} else {
				inVal := (*in)[key]
				in, out := &inVal, &outVal
				*out = new(string)
				**out = **in
			}
			(*out)[key] = outVal
		}
	}
	if in.LtsReclaimPolicy != nil {
		in, out := &in.LtsReclaimPolicy, &out.LtsReclaimPolicy
		*out = new(string)
		**out = **in
	}
	if in.Masters != nil {
		in, out := &in.Masters, &out.Masters
		*out = make([]MastersInitParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.MultiAz != nil {
		in, out := &in.MultiAz, &out.MultiAz
		*out = new(bool)
		**out = **in
	}
	if in.Name != nil {
		in, out := &in.Name, &out.Name
		*out = new(string)
		**out = **in
	}
	if in.Period != nil {
		in, out := &in.Period, &out.Period
		*out = new(float64)
		**out = **in
	}
	if in.PeriodUnit != nil {
		in, out := &in.PeriodUnit, &out.PeriodUnit
		*out = new(string)
		**out = **in
	}
	if in.Region != nil {
		in, out := &in.Region, &out.Region
		*out = new(string)
		**out = **in
	}
	if in.SecurityGroupID != nil {
		in, out := &in.SecurityGroupID, &out.SecurityGroupID
		*out = new(string)
		**out = **in
	}
	if in.SecurityGroupIDRef != nil {
		in, out := &in.SecurityGroupIDRef, &out.SecurityGroupIDRef
		*out = new(v1.Reference)
		(*in).DeepCopyInto(*out)
	}
	if in.SecurityGroupIDSelector != nil {
		in, out := &in.SecurityGroupIDSelector, &out.SecurityGroupIDSelector
		*out = new(v1.Selector)
		(*in).DeepCopyInto(*out)
	}
	if in.ServiceNetworkCidr != nil {
		in, out := &in.ServiceNetworkCidr, &out.ServiceNetworkCidr
		*out = new(string)
		**out = **in
	}
	if in.SubnetID != nil {
		in, out := &in.SubnetID, &out.SubnetID
		*out = new(string)
		**out = **in
	}
	if in.SubnetIDRef != nil {
		in, out := &in.SubnetIDRef, &out.SubnetIDRef
		*out = new(v1.Reference)
		(*in).DeepCopyInto(*out)
	}
	if in.SubnetIDSelector != nil {
		in, out := &in.SubnetIDSelector, &out.SubnetIDSelector
		*out = new(v1.Selector)
		(*in).DeepCopyInto(*out)
	}
	if in.SupportIstio != nil {
		in, out := &in.SupportIstio, &out.SupportIstio
		*out = new(bool)
		**out = **in
	}
	if in.Tags != nil {
		in, out := &in.Tags, &out.Tags
		*out = make(map[string]*string, len(*in))
		for key, val := range *in {
			var outVal *string
			if val == nil {
				(*out)[key] = nil
			} else {
				inVal := (*in)[key]
				in, out := &inVal, &outVal
				*out = new(string)
				**out = **in
			}
			(*out)[key] = outVal
		}
	}
	if in.VPCID != nil {
		in, out := &in.VPCID, &out.VPCID
		*out = new(string)
		**out = **in
	}
	if in.VPCIDRef != nil {
		in, out := &in.VPCIDRef, &out.VPCIDRef
		*out = new(v1.Reference)
		(*in).DeepCopyInto(*out)
	}
	if in.VPCIDSelector != nil {
		in, out := &in.VPCIDSelector, &out.VPCIDSelector
		*out = new(v1.Selector)
		(*in).DeepCopyInto(*out)
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ClusterInitParameters.
func (in *ClusterInitParameters) DeepCopy() *ClusterInitParameters {
	if in == nil {
		return nil
	}
	out := new(ClusterInitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ClusterList) DeepCopyInto(out *ClusterList) {
	*out = *in
	out.TypeMeta = in.TypeMeta
	in.ListMeta.DeepCopyInto(&out.ListMeta)
	if in.Items != nil {
		in, out := &in.Items, &out.Items
		*out = make([]Cluster, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ClusterList.
func (in *ClusterList) DeepCopy() *ClusterList {
	if in == nil {
		return nil
	}
	out := new(ClusterList)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyObject is an autogenerated deepcopy function, copying the receiver, creating a new runtime.Object.
func (in *ClusterList) DeepCopyObject() runtime.Object {
	if c := in.DeepCopy(); c != nil {
		return c
	}
	return nil
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ClusterLogConfig) DeepCopyInto(out *ClusterLogConfig) {
	*out = *in
	out.TypeMeta = in.TypeMeta
	in.ObjectMeta.DeepCopyInto(&out.ObjectMeta)
	in.Spec.DeepCopyInto(&out.Spec)
	in.Status.DeepCopyInto(&out.Status)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ClusterLogConfig.
func (in *ClusterLogConfig) DeepCopy() *ClusterLogConfig {
	if in == nil {
		return nil
	}
	out := new(ClusterLogConfig)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyObject is an autogenerated deepcopy function, copying the receiver, creating a new runtime.Object.
func (in *ClusterLogConfig) DeepCopyObject() runtime.Object {
	if c := in.DeepCopy(); c != nil {
		return c
	}
	return nil
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ClusterLogConfigInitParameters) DeepCopyInto(out *ClusterLogConfigInitParameters) {
	*out = *in
	if in.ClusterID != nil {
		in, out := &in.ClusterID, &out.ClusterID
		*out = new(string)
		**out = **in
	}
	if in.ClusterIDRef != nil {
		in, out := &in.ClusterIDRef, &out.ClusterIDRef
		*out = new(v1.Reference)
		(*in).DeepCopyInto(*out)
	}
	if in.ClusterIDSelector != nil {
		in, out := &in.ClusterIDSelector, &out.ClusterIDSelector
		*out = new(v1.Selector)
		(*in).DeepCopyInto(*out)
	}
	if in.LogConfigs != nil {
		in, out := &in.LogConfigs, &out.LogConfigs
		*out = make([]LogConfigsInitParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.Region != nil {
		in, out := &in.Region, &out.Region
		*out = new(string)
		**out = **in
	}
	if in.TTLInDays != nil {
		in, out := &in.TTLInDays, &out.TTLInDays
		*out = new(float64)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ClusterLogConfigInitParameters.
func (in *ClusterLogConfigInitParameters) DeepCopy() *ClusterLogConfigInitParameters {
	if in == nil {
		return nil
	}
	out := new(ClusterLogConfigInitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ClusterLogConfigList) DeepCopyInto(out *ClusterLogConfigList) {
	*out = *in
	out.TypeMeta = in.TypeMeta
	in.ListMeta.DeepCopyInto(&out.ListMeta)
	if in.Items != nil {
		in, out := &in.Items, &out.Items
		*out = make([]ClusterLogConfig, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ClusterLogConfigList.
func (in *ClusterLogConfigList) DeepCopy() *ClusterLogConfigList {
	if in == nil {
		return nil
	}
	out := new(ClusterLogConfigList)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyObject is an autogenerated deepcopy function, copying the receiver, creating a new runtime.Object.
func (in *ClusterLogConfigList) DeepCopyObject() runtime.Object {
	if c := in.DeepCopy(); c != nil {
		return c
	}
	return nil
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ClusterLogConfigObservation) DeepCopyInto(out *ClusterLogConfigObservation) {
	*out = *in
	if in.ClusterID != nil {
		in, out := &in.ClusterID, &out.ClusterID
		*out = new(string)
		**out = **in
	}
	if in.ID != nil {
		in, out := &in.ID, &out.ID
		*out = new(string)
		**out = **in
	}
	if in.LogConfigs != nil {
		in, out := &in.LogConfigs, &out.LogConfigs
		*out = make([]LogConfigsObservation, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.Region != nil {
		in, out := &in.Region, &out.Region
		*out = new(string)
		**out = **in
	}
	if in.TTLInDays != nil {
		in, out := &in.TTLInDays, &out.TTLInDays
		*out = new(float64)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ClusterLogConfigObservation.
func (in *ClusterLogConfigObservation) DeepCopy() *ClusterLogConfigObservation {
	if in == nil {
		return nil
	}
	out := new(ClusterLogConfigObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ClusterLogConfigParameters) DeepCopyInto(out *ClusterLogConfigParameters) {
	*out = *in
	if in.ClusterID != nil {
		in, out := &in.ClusterID, &out.ClusterID
		*out = new(string)
		**out = **in
	}
	if in.ClusterIDRef != nil {
		in, out := &in.ClusterIDRef, &out.ClusterIDRef
		*out = new(v1.Reference)
		(*in).DeepCopyInto(*out)
	}
	if in.ClusterIDSelector != nil {
		in, out := &in.ClusterIDSelector, &out.ClusterIDSelector
		*out = new(v1.Selector)
		(*in).DeepCopyInto(*out)
	}
	if in.LogConfigs != nil {
		in, out := &in.LogConfigs, &out.LogConfigs
		*out = make([]LogConfigsParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.Region != nil {
		in, out := &in.Region, &out.Region
		*out = new(string)
		**out = **in
	}
	if in.TTLInDays != nil {
		in, out := &in.TTLInDays, &out.TTLInDays
		*out = new(float64)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ClusterLogConfigParameters.
func (in *ClusterLogConfigParameters) DeepCopy() *ClusterLogConfigParameters {
	if in == nil {
		return nil
	}
	out := new(ClusterLogConfigParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ClusterLogConfigSpec) DeepCopyInto(out *ClusterLogConfigSpec) {
	*out = *in
	in.ResourceSpec.DeepCopyInto(&out.ResourceSpec)
	in.ForProvider.DeepCopyInto(&out.ForProvider)
	in.InitProvider.DeepCopyInto(&out.InitProvider)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ClusterLogConfigSpec.
func (in *ClusterLogConfigSpec) DeepCopy() *ClusterLogConfigSpec {
	if in == nil {
		return nil
	}
	out := new(ClusterLogConfigSpec)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ClusterLogConfigStatus) DeepCopyInto(out *ClusterLogConfigStatus) {
	*out = *in
	in.ResourceStatus.DeepCopyInto(&out.ResourceStatus)
	in.AtProvider.DeepCopyInto(&out.AtProvider)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ClusterLogConfigStatus.
func (in *ClusterLogConfigStatus) DeepCopy() *ClusterLogConfigStatus {
	if in == nil {
		return nil
	}
	out := new(ClusterLogConfigStatus)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ClusterObservation) DeepCopyInto(out *ClusterObservation) {
	*out = *in
	if in.Alias != nil {
		in, out := &in.Alias, &out.Alias
		*out = new(string)
		**out = **in
	}
	if in.Annotations != nil {
		in, out := &in.Annotations, &out.Annotations
		*out = make(map[string]*string, len(*in))
		for key, val := range *in {
			var outVal *string
			if val == nil {
				(*out)[key] = nil
			} else {
				inVal := (*in)[key]
				in, out := &inVal, &outVal
				*out = new(string)
				**out = **in
			}
			(*out)[key] = outVal
		}
	}
	if in.AuthenticatingProxyCA != nil {
		in, out := &in.AuthenticatingProxyCA, &out.AuthenticatingProxyCA
		*out = new(string)
		**out = **in
	}
	if in.AuthenticatingProxyCert != nil {
		in, out := &in.AuthenticatingProxyCert, &out.AuthenticatingProxyCert
		*out = new(string)
		**out = **in
	}
	if in.AuthenticatingProxyPrivateKey != nil {
		in, out := &in.AuthenticatingProxyPrivateKey, &out.AuthenticatingProxyPrivateKey
		*out = new(string)
		**out = **in
	}
	if in.AuthenticationMode != nil {
		in, out := &in.AuthenticationMode, &out.AuthenticationMode
		*out = new(string)
		**out = **in
	}
	if in.AutoPay != nil {
		in, out := &in.AutoPay, &out.AutoPay
		*out = new(string)
		**out = **in
	}
	if in.AutoRenew != nil {
		in, out := &in.AutoRenew, &out.AutoRenew
		*out = new(string)
		**out = **in
	}
	if in.BillingMode != nil {
		in, out := &in.BillingMode, &out.BillingMode
		*out = new(float64)
		**out = **in
	}
	if in.Category != nil {
		in, out := &in.Category, &out.Category
		*out = new(string)
		**out = **in
	}
	if in.CertificateClusters != nil {
		in, out := &in.CertificateClusters, &out.CertificateClusters
		*out = make([]CertificateClustersObservation, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.CertificateUsers != nil {
		in, out := &in.CertificateUsers, &out.CertificateUsers
		*out = make([]CertificateUsersObservation, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.ChargingMode != nil {
		in, out := &in.ChargingMode, &out.ChargingMode
		*out = new(string)
		**out = **in
	}
	if in.ClusterType != nil {
		in, out := &in.ClusterType, &out.ClusterType
		*out = new(string)
		**out = **in
	}
	if in.ClusterVersion != nil {
		in, out := &in.ClusterVersion, &out.ClusterVersion
		*out = new(string)
		**out = **in
	}
	if in.ComponentConfigurations != nil {
		in, out := &in.ComponentConfigurations, &out.ComponentConfigurations
		*out = make([]ComponentConfigurationsObservation, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.ContainerNetworkCidr != nil {
		in, out := &in.ContainerNetworkCidr, &out.ContainerNetworkCidr
		*out = new(string)
		**out = **in
	}
	if in.ContainerNetworkType != nil {
		in, out := &in.ContainerNetworkType, &out.ContainerNetworkType
		*out = new(string)
		**out = **in
	}
	if in.CustomSan != nil {
		in, out := &in.CustomSan, &out.CustomSan
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.DeleteAll != nil {
		in, out := &in.DeleteAll, &out.DeleteAll
		*out = new(string)
		**out = **in
	}
	if in.DeleteEFS != nil {
		in, out := &in.DeleteEFS, &out.DeleteEFS
		*out = new(string)
		**out = **in
	}
	if in.DeleteEni != nil {
		in, out := &in.DeleteEni, &out.DeleteEni
		*out = new(string)
		**out = **in
	}
	if in.DeleteEvs != nil {
		in, out := &in.DeleteEvs, &out.DeleteEvs
		*out = new(string)
		**out = **in
	}
	if in.DeleteNet != nil {
		in, out := &in.DeleteNet, &out.DeleteNet
		*out = new(string)
		**out = **in
	}
	if in.DeleteObs != nil {
		in, out := &in.DeleteObs, &out.DeleteObs
		*out = new(string)
		**out = **in
	}
	if in.DeleteSfs != nil {
		in, out := &in.DeleteSfs, &out.DeleteSfs
		*out = new(string)
		**out = **in
	}
	if in.Description != nil {
		in, out := &in.Description, &out.Description
		*out = new(string)
		**out = **in
	}
	if in.EIP != nil {
		in, out := &in.EIP, &out.EIP
		*out = new(string)
		**out = **in
	}
	if in.EnableDistributeManagement != nil {
		in, out := &in.EnableDistributeManagement, &out.EnableDistributeManagement
		*out = new(bool)
		**out = **in
	}
	if in.EniSubnetCidr != nil {
		in, out := &in.EniSubnetCidr, &out.EniSubnetCidr
		*out = new(string)
		**out = **in
	}
	if in.EniSubnetID != nil {
		in, out := &in.EniSubnetID, &out.EniSubnetID
		*out = new(string)
		**out = **in
	}
	if in.EnterpriseProjectID != nil {
		in, out := &in.EnterpriseProjectID, &out.EnterpriseProjectID
		*out = new(string)
		**out = **in
	}
	if in.ExtendParam != nil {
		in, out := &in.ExtendParam, &out.ExtendParam
		*out = make(map[string]*string, len(*in))
		for key, val := range *in {
			var outVal *string
			if val == nil {
				(*out)[key] = nil
			} else {
				inVal := (*in)[key]
				in, out := &inVal, &outVal
				*out = new(string)
				**out = **in
			}
			(*out)[key] = outVal
		}
	}
	if in.ExtendParams != nil {
		in, out := &in.ExtendParams, &out.ExtendParams
		*out = make([]ExtendParamsObservation, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.FlavorID != nil {
		in, out := &in.FlavorID, &out.FlavorID
		*out = new(string)
		**out = **in
	}
	if in.Hibernate != nil {
		in, out := &in.Hibernate, &out.Hibernate
		*out = new(bool)
		**out = **in
	}
	if in.HighwaySubnetID != nil {
		in, out := &in.HighwaySubnetID, &out.HighwaySubnetID
		*out = new(string)
		**out = **in
	}
	if in.ID != nil {
		in, out := &in.ID, &out.ID
		*out = new(string)
		**out = **in
	}
	if in.IPv6Enable != nil {
		in, out := &in.IPv6Enable, &out.IPv6Enable
		*out = new(bool)
		**out = **in
	}
	if in.KubeConfigRaw != nil {
		in, out := &in.KubeConfigRaw, &out.KubeConfigRaw
		*out = new(string)
		**out = **in
	}
	if in.KubeProxyMode != nil {
		in, out := &in.KubeProxyMode, &out.KubeProxyMode
		*out = new(string)
		**out = **in
	}
	if in.Labels != nil {
		in, out := &in.Labels, &out.Labels
		*out = make(map[string]*string, len(*in))
		for key, val := range *in {
			var outVal *string
			if val == nil {
				(*out)[key] = nil
			} else {
				inVal := (*in)[key]
				in, out := &inVal, &outVal
				*out = new(string)
				**out = **in
			}
			(*out)[key] = outVal
		}
	}
	if in.LtsReclaimPolicy != nil {
		in, out := &in.LtsReclaimPolicy, &out.LtsReclaimPolicy
		*out = new(string)
		**out = **in
	}
	if in.Masters != nil {
		in, out := &in.Masters, &out.Masters
		*out = make([]MastersObservation, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.MultiAz != nil {
		in, out := &in.MultiAz, &out.MultiAz
		*out = new(bool)
		**out = **in
	}
	if in.Name != nil {
		in, out := &in.Name, &out.Name
		*out = new(string)
		**out = **in
	}
	if in.Period != nil {
		in, out := &in.Period, &out.Period
		*out = new(float64)
		**out = **in
	}
	if in.PeriodUnit != nil {
		in, out := &in.PeriodUnit, &out.PeriodUnit
		*out = new(string)
		**out = **in
	}
	if in.Region != nil {
		in, out := &in.Region, &out.Region
		*out = new(string)
		**out = **in
	}
	if in.SecurityGroupID != nil {
		in, out := &in.SecurityGroupID, &out.SecurityGroupID
		*out = new(string)
		**out = **in
	}
	if in.ServiceNetworkCidr != nil {
		in, out := &in.ServiceNetworkCidr, &out.ServiceNetworkCidr
		*out = new(string)
		**out = **in
	}
	if in.Status != nil {
		in, out := &in.Status, &out.Status
		*out = new(string)
		**out = **in
	}
	if in.SubnetID != nil {
		in, out := &in.SubnetID, &out.SubnetID
		*out = new(string)
		**out = **in
	}
	if in.SupportIstio != nil {
		in, out := &in.SupportIstio, &out.SupportIstio
		*out = new(bool)
		**out = **in
	}
	if in.Tags != nil {
		in, out := &in.Tags, &out.Tags
		*out = make(map[string]*string, len(*in))
		for key, val := range *in {
			var outVal *string
			if val == nil {
				(*out)[key] = nil
			} else {
				inVal := (*in)[key]
				in, out := &inVal, &outVal
				*out = new(string)
				**out = **in
			}
			(*out)[key] = outVal
		}
	}
	if in.VPCID != nil {
		in, out := &in.VPCID, &out.VPCID
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ClusterObservation.
func (in *ClusterObservation) DeepCopy() *ClusterObservation {
	if in == nil {
		return nil
	}
	out := new(ClusterObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ClusterParameters) DeepCopyInto(out *ClusterParameters) {
	*out = *in
	if in.Alias != nil {
		in, out := &in.Alias, &out.Alias
		*out = new(string)
		**out = **in
	}
	if in.Annotations != nil {
		in, out := &in.Annotations, &out.Annotations
		*out = make(map[string]*string, len(*in))
		for key, val := range *in {
			var outVal *string
			if val == nil {
				(*out)[key] = nil
			} else {
				inVal := (*in)[key]
				in, out := &inVal, &outVal
				*out = new(string)
				**out = **in
			}
			(*out)[key] = outVal
		}
	}
	if in.AuthenticatingProxyCA != nil {
		in, out := &in.AuthenticatingProxyCA, &out.AuthenticatingProxyCA
		*out = new(string)
		**out = **in
	}
	if in.AuthenticatingProxyCert != nil {
		in, out := &in.AuthenticatingProxyCert, &out.AuthenticatingProxyCert
		*out = new(string)
		**out = **in
	}
	if in.AuthenticatingProxyPrivateKey != nil {
		in, out := &in.AuthenticatingProxyPrivateKey, &out.AuthenticatingProxyPrivateKey
		*out = new(string)
		**out = **in
	}
	if in.AuthenticationMode != nil {
		in, out := &in.AuthenticationMode, &out.AuthenticationMode
		*out = new(string)
		**out = **in
	}
	if in.AutoPay != nil {
		in, out := &in.AutoPay, &out.AutoPay
		*out = new(string)
		**out = **in
	}
	if in.AutoRenew != nil {
		in, out := &in.AutoRenew, &out.AutoRenew
		*out = new(string)
		**out = **in
	}
	if in.BillingMode != nil {
		in, out := &in.BillingMode, &out.BillingMode
		*out = new(float64)
		**out = **in
	}
	if in.ChargingMode != nil {
		in, out := &in.ChargingMode, &out.ChargingMode
		*out = new(string)
		**out = **in
	}
	if in.ClusterType != nil {
		in, out := &in.ClusterType, &out.ClusterType
		*out = new(string)
		**out = **in
	}
	if in.ClusterVersion != nil {
		in, out := &in.ClusterVersion, &out.ClusterVersion
		*out = new(string)
		**out = **in
	}
	if in.ComponentConfigurations != nil {
		in, out := &in.ComponentConfigurations, &out.ComponentConfigurations
		*out = make([]ComponentConfigurationsParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.ContainerNetworkCidr != nil {
		in, out := &in.ContainerNetworkCidr, &out.ContainerNetworkCidr
		*out = new(string)
		**out = **in
	}
	if in.ContainerNetworkType != nil {
		in, out := &in.ContainerNetworkType, &out.ContainerNetworkType
		*out = new(string)
		**out = **in
	}
	if in.CustomSan != nil {
		in, out := &in.CustomSan, &out.CustomSan
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.DeleteAll != nil {
		in, out := &in.DeleteAll, &out.DeleteAll
		*out = new(string)
		**out = **in
	}
	if in.DeleteEFS != nil {
		in, out := &in.DeleteEFS, &out.DeleteEFS
		*out = new(string)
		**out = **in
	}
	if in.DeleteEni != nil {
		in, out := &in.DeleteEni, &out.DeleteEni
		*out = new(string)
		**out = **in
	}
	if in.DeleteEvs != nil {
		in, out := &in.DeleteEvs, &out.DeleteEvs
		*out = new(string)
		**out = **in
	}
	if in.DeleteNet != nil {
		in, out := &in.DeleteNet, &out.DeleteNet
		*out = new(string)
		**out = **in
	}
	if in.DeleteObs != nil {
		in, out := &in.DeleteObs, &out.DeleteObs
		*out = new(string)
		**out = **in
	}
	if in.DeleteSfs != nil {
		in, out := &in.DeleteSfs, &out.DeleteSfs
		*out = new(string)
		**out = **in
	}
	if in.Description != nil {
		in, out := &in.Description, &out.Description
		*out = new(string)
		**out = **in
	}
	if in.EIP != nil {
		in, out := &in.EIP, &out.EIP
		*out = new(string)
		**out = **in
	}
	if in.EIPRef != nil {
		in, out := &in.EIPRef, &out.EIPRef
		*out = new(v1.Reference)
		(*in).DeepCopyInto(*out)
	}
	if in.EIPSelector != nil {
		in, out := &in.EIPSelector, &out.EIPSelector
		*out = new(v1.Selector)
		(*in).DeepCopyInto(*out)
	}
	if in.EnableDistributeManagement != nil {
		in, out := &in.EnableDistributeManagement, &out.EnableDistributeManagement
		*out = new(bool)
		**out = **in
	}
	if in.EniSubnetCidr != nil {
		in, out := &in.EniSubnetCidr, &out.EniSubnetCidr
		*out = new(string)
		**out = **in
	}
	if in.EniSubnetID != nil {
		in, out := &in.EniSubnetID, &out.EniSubnetID
		*out = new(string)
		**out = **in
	}
	if in.EnterpriseProjectID != nil {
		in, out := &in.EnterpriseProjectID, &out.EnterpriseProjectID
		*out = new(string)
		**out = **in
	}
	if in.ExtendParam != nil {
		in, out := &in.ExtendParam, &out.ExtendParam
		*out = make(map[string]*string, len(*in))
		for key, val := range *in {
			var outVal *string
			if val == nil {
				(*out)[key] = nil
			} else {
				inVal := (*in)[key]
				in, out := &inVal, &outVal
				*out = new(string)
				**out = **in
			}
			(*out)[key] = outVal
		}
	}
	if in.ExtendParams != nil {
		in, out := &in.ExtendParams, &out.ExtendParams
		*out = make([]ExtendParamsParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.FlavorID != nil {
		in, out := &in.FlavorID, &out.FlavorID
		*out = new(string)
		**out = **in
	}
	if in.Hibernate != nil {
		in, out := &in.Hibernate, &out.Hibernate
		*out = new(bool)
		**out = **in
	}
	if in.HighwaySubnetID != nil {
		in, out := &in.HighwaySubnetID, &out.HighwaySubnetID
		*out = new(string)
		**out = **in
	}
	if in.IPv6Enable != nil {
		in, out := &in.IPv6Enable, &out.IPv6Enable
		*out = new(bool)
		**out = **in
	}
	if in.KubeProxyMode != nil {
		in, out := &in.KubeProxyMode, &out.KubeProxyMode
		*out = new(string)
		**out = **in
	}
	if in.Labels != nil {
		in, out := &in.Labels, &out.Labels
		*out = make(map[string]*string, len(*in))
		for key, val := range *in {
			var outVal *string
			if val == nil {
				(*out)[key] = nil
			} else {
				inVal := (*in)[key]
				in, out := &inVal, &outVal
				*out = new(string)
				**out = **in
			}
			(*out)[key] = outVal
		}
	}
	if in.LtsReclaimPolicy != nil {
		in, out := &in.LtsReclaimPolicy, &out.LtsReclaimPolicy
		*out = new(string)
		**out = **in
	}
	if in.Masters != nil {
		in, out := &in.Masters, &out.Masters
		*out = make([]MastersParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.MultiAz != nil {
		in, out := &in.MultiAz, &out.MultiAz
		*out = new(bool)
		**out = **in
	}
	if in.Name != nil {
		in, out := &in.Name, &out.Name
		*out = new(string)
		**out = **in
	}
	if in.Period != nil {
		in, out := &in.Period, &out.Period
		*out = new(float64)
		**out = **in
	}
	if in.PeriodUnit != nil {
		in, out := &in.PeriodUnit, &out.PeriodUnit
		*out = new(string)
		**out = **in
	}
	if in.Region != nil {
		in, out := &in.Region, &out.Region
		*out = new(string)
		**out = **in
	}
	if in.SecurityGroupID != nil {
		in, out := &in.SecurityGroupID, &out.SecurityGroupID
		*out = new(string)
		**out = **in
	}
	if in.SecurityGroupIDRef != nil {
		in, out := &in.SecurityGroupIDRef, &out.SecurityGroupIDRef
		*out = new(v1.Reference)
		(*in).DeepCopyInto(*out)
	}
	if in.SecurityGroupIDSelector != nil {
		in, out := &in.SecurityGroupIDSelector, &out.SecurityGroupIDSelector
		*out = new(v1.Selector)
		(*in).DeepCopyInto(*out)
	}
	if in.ServiceNetworkCidr != nil {
		in, out := &in.ServiceNetworkCidr, &out.ServiceNetworkCidr
		*out = new(string)
		**out = **in
	}
	if in.SubnetID != nil {
		in, out := &in.SubnetID, &out.SubnetID
		*out = new(string)
		**out = **in
	}
	if in.SubnetIDRef != nil {
		in, out := &in.SubnetIDRef, &out.SubnetIDRef
		*out = new(v1.Reference)
		(*in).DeepCopyInto(*out)
	}
	if in.SubnetIDSelector != nil {
		in, out := &in.SubnetIDSelector, &out.SubnetIDSelector
		*out = new(v1.Selector)
		(*in).DeepCopyInto(*out)
	}
	if in.SupportIstio != nil {
		in, out := &in.SupportIstio, &out.SupportIstio
		*out = new(bool)
		**out = **in
	}
	if in.Tags != nil {
		in, out := &in.Tags, &out.Tags
		*out = make(map[string]*string, len(*in))
		for key, val := range *in {
			var outVal *string
			if val == nil {
				(*out)[key] = nil
			} else {
				inVal := (*in)[key]
				in, out := &inVal, &outVal
				*out = new(string)
				**out = **in
			}
			(*out)[key] = outVal
		}
	}
	if in.VPCID != nil {
		in, out := &in.VPCID, &out.VPCID
		*out = new(string)
		**out = **in
	}
	if in.VPCIDRef != nil {
		in, out := &in.VPCIDRef, &out.VPCIDRef
		*out = new(v1.Reference)
		(*in).DeepCopyInto(*out)
	}
	if in.VPCIDSelector != nil {
		in, out := &in.VPCIDSelector, &out.VPCIDSelector
		*out = new(v1.Selector)
		(*in).DeepCopyInto(*out)
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ClusterParameters.
func (in *ClusterParameters) DeepCopy() *ClusterParameters {
	if in == nil {
		return nil
	}
	out := new(ClusterParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ClusterSpec) DeepCopyInto(out *ClusterSpec) {
	*out = *in
	in.ResourceSpec.DeepCopyInto(&out.ResourceSpec)
	in.ForProvider.DeepCopyInto(&out.ForProvider)
	in.InitProvider.DeepCopyInto(&out.InitProvider)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ClusterSpec.
func (in *ClusterSpec) DeepCopy() *ClusterSpec {
	if in == nil {
		return nil
	}
	out := new(ClusterSpec)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ClusterStatus) DeepCopyInto(out *ClusterStatus) {
	*out = *in
	in.ResourceStatus.DeepCopyInto(&out.ResourceStatus)
	in.AtProvider.DeepCopyInto(&out.AtProvider)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ClusterStatus.
func (in *ClusterStatus) DeepCopy() *ClusterStatus {
	if in == nil {
		return nil
	}
	out := new(ClusterStatus)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ClusterUpgrade) DeepCopyInto(out *ClusterUpgrade) {
	*out = *in
	out.TypeMeta = in.TypeMeta
	in.ObjectMeta.DeepCopyInto(&out.ObjectMeta)
	in.Spec.DeepCopyInto(&out.Spec)
	in.Status.DeepCopyInto(&out.Status)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ClusterUpgrade.
func (in *ClusterUpgrade) DeepCopy() *ClusterUpgrade {
	if in == nil {
		return nil
	}
	out := new(ClusterUpgrade)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyObject is an autogenerated deepcopy function, copying the receiver, creating a new runtime.Object.
func (in *ClusterUpgrade) DeepCopyObject() runtime.Object {
	if c := in.DeepCopy(); c != nil {
		return c
	}
	return nil
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ClusterUpgradeInitParameters) DeepCopyInto(out *ClusterUpgradeInitParameters) {
	*out = *in
	if in.Addons != nil {
		in, out := &in.Addons, &out.Addons
		*out = make([]AddonsInitParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.ClusterID != nil {
		in, out := &in.ClusterID, &out.ClusterID
		*out = new(string)
		**out = **in
	}
	if in.ClusterIDRef != nil {
		in, out := &in.ClusterIDRef, &out.ClusterIDRef
		*out = new(v1.Reference)
		(*in).DeepCopyInto(*out)
	}
	if in.ClusterIDSelector != nil {
		in, out := &in.ClusterIDSelector, &out.ClusterIDSelector
		*out = new(v1.Selector)
		(*in).DeepCopyInto(*out)
	}
	if in.EnableForceNew != nil {
		in, out := &in.EnableForceNew, &out.EnableForceNew
		*out = new(string)
		**out = **in
	}
	if in.NodeOrder != nil {
		in, out := &in.NodeOrder, &out.NodeOrder
		*out = make(map[string]*string, len(*in))
		for key, val := range *in {
			var outVal *string
			if val == nil {
				(*out)[key] = nil
			} else {
				inVal := (*in)[key]
				in, out := &inVal, &outVal
				*out = new(string)
				**out = **in
			}
			(*out)[key] = outVal
		}
	}
	if in.NodepoolOrder != nil {
		in, out := &in.NodepoolOrder, &out.NodepoolOrder
		*out = make(map[string]*float64, len(*in))
		for key, val := range *in {
			var outVal *float64
			if val == nil {
				(*out)[key] = nil
			} else {
				inVal := (*in)[key]
				in, out := &inVal, &outVal
				*out = new(float64)
				**out = **in
			}
			(*out)[key] = outVal
		}
	}
	if in.Region != nil {
		in, out := &in.Region, &out.Region
		*out = new(string)
		**out = **in
	}
	if in.Strategy != nil {
		in, out := &in.Strategy, &out.Strategy
		*out = make([]StrategyInitParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.TargetVersion != nil {
		in, out := &in.TargetVersion, &out.TargetVersion
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ClusterUpgradeInitParameters.
func (in *ClusterUpgradeInitParameters) DeepCopy() *ClusterUpgradeInitParameters {
	if in == nil {
		return nil
	}
	out := new(ClusterUpgradeInitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ClusterUpgradeList) DeepCopyInto(out *ClusterUpgradeList) {
	*out = *in
	out.TypeMeta = in.TypeMeta
	in.ListMeta.DeepCopyInto(&out.ListMeta)
	if in.Items != nil {
		in, out := &in.Items, &out.Items
		*out = make([]ClusterUpgrade, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ClusterUpgradeList.
func (in *ClusterUpgradeList) DeepCopy() *ClusterUpgradeList {
	if in == nil {
		return nil
	}
	out := new(ClusterUpgradeList)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyObject is an autogenerated deepcopy function, copying the receiver, creating a new runtime.Object.
func (in *ClusterUpgradeList) DeepCopyObject() runtime.Object {
	if c := in.DeepCopy(); c != nil {
		return c
	}
	return nil
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ClusterUpgradeObservation) DeepCopyInto(out *ClusterUpgradeObservation) {
	*out = *in
	if in.Addons != nil {
		in, out := &in.Addons, &out.Addons
		*out = make([]AddonsObservation, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.ClusterID != nil {
		in, out := &in.ClusterID, &out.ClusterID
		*out = new(string)
		**out = **in
	}
	if in.EnableForceNew != nil {
		in, out := &in.EnableForceNew, &out.EnableForceNew
		*out = new(string)
		**out = **in
	}
	if in.ID != nil {
		in, out := &in.ID, &out.ID
		*out = new(string)
		**out = **in
	}
	if in.NodeOrder != nil {
		in, out := &in.NodeOrder, &out.NodeOrder
		*out = make(map[string]*string, len(*in))
		for key, val := range *in {
			var outVal *string
			if val == nil {
				(*out)[key] = nil
			} else {
				inVal := (*in)[key]
				in, out := &inVal, &outVal
				*out = new(string)
				**out = **in
			}
			(*out)[key] = outVal
		}
	}
	if in.NodepoolOrder != nil {
		in, out := &in.NodepoolOrder, &out.NodepoolOrder
		*out = make(map[string]*float64, len(*in))
		for key, val := range *in {
			var outVal *float64
			if val == nil {
				(*out)[key] = nil
			} else {
				inVal := (*in)[key]
				in, out := &inVal, &outVal
				*out = new(float64)
				**out = **in
			}
			(*out)[key] = outVal
		}
	}
	if in.Region != nil {
		in, out := &in.Region, &out.Region
		*out = new(string)
		**out = **in
	}
	if in.Strategy != nil {
		in, out := &in.Strategy, &out.Strategy
		*out = make([]StrategyObservation, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.TargetVersion != nil {
		in, out := &in.TargetVersion, &out.TargetVersion
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ClusterUpgradeObservation.
func (in *ClusterUpgradeObservation) DeepCopy() *ClusterUpgradeObservation {
	if in == nil {
		return nil
	}
	out := new(ClusterUpgradeObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ClusterUpgradeParameters) DeepCopyInto(out *ClusterUpgradeParameters) {
	*out = *in
	if in.Addons != nil {
		in, out := &in.Addons, &out.Addons
		*out = make([]AddonsParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.ClusterID != nil {
		in, out := &in.ClusterID, &out.ClusterID
		*out = new(string)
		**out = **in
	}
	if in.ClusterIDRef != nil {
		in, out := &in.ClusterIDRef, &out.ClusterIDRef
		*out = new(v1.Reference)
		(*in).DeepCopyInto(*out)
	}
	if in.ClusterIDSelector != nil {
		in, out := &in.ClusterIDSelector, &out.ClusterIDSelector
		*out = new(v1.Selector)
		(*in).DeepCopyInto(*out)
	}
	if in.EnableForceNew != nil {
		in, out := &in.EnableForceNew, &out.EnableForceNew
		*out = new(string)
		**out = **in
	}
	if in.NodeOrder != nil {
		in, out := &in.NodeOrder, &out.NodeOrder
		*out = make(map[string]*string, len(*in))
		for key, val := range *in {
			var outVal *string
			if val == nil {
				(*out)[key] = nil
			} else {
				inVal := (*in)[key]
				in, out := &inVal, &outVal
				*out = new(string)
				**out = **in
			}
			(*out)[key] = outVal
		}
	}
	if in.NodepoolOrder != nil {
		in, out := &in.NodepoolOrder, &out.NodepoolOrder
		*out = make(map[string]*float64, len(*in))
		for key, val := range *in {
			var outVal *float64
			if val == nil {
				(*out)[key] = nil
			} else {
				inVal := (*in)[key]
				in, out := &inVal, &outVal
				*out = new(float64)
				**out = **in
			}
			(*out)[key] = outVal
		}
	}
	if in.Region != nil {
		in, out := &in.Region, &out.Region
		*out = new(string)
		**out = **in
	}
	if in.Strategy != nil {
		in, out := &in.Strategy, &out.Strategy
		*out = make([]StrategyParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.TargetVersion != nil {
		in, out := &in.TargetVersion, &out.TargetVersion
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ClusterUpgradeParameters.
func (in *ClusterUpgradeParameters) DeepCopy() *ClusterUpgradeParameters {
	if in == nil {
		return nil
	}
	out := new(ClusterUpgradeParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ClusterUpgradeSpec) DeepCopyInto(out *ClusterUpgradeSpec) {
	*out = *in
	in.ResourceSpec.DeepCopyInto(&out.ResourceSpec)
	in.ForProvider.DeepCopyInto(&out.ForProvider)
	in.InitProvider.DeepCopyInto(&out.InitProvider)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ClusterUpgradeSpec.
func (in *ClusterUpgradeSpec) DeepCopy() *ClusterUpgradeSpec {
	if in == nil {
		return nil
	}
	out := new(ClusterUpgradeSpec)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ClusterUpgradeStatus) DeepCopyInto(out *ClusterUpgradeStatus) {
	*out = *in
	in.ResourceStatus.DeepCopyInto(&out.ResourceStatus)
	in.AtProvider.DeepCopyInto(&out.AtProvider)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ClusterUpgradeStatus.
func (in *ClusterUpgradeStatus) DeepCopy() *ClusterUpgradeStatus {
	if in == nil {
		return nil
	}
	out := new(ClusterUpgradeStatus)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ComponentConfigurationsInitParameters) DeepCopyInto(out *ComponentConfigurationsInitParameters) {
	*out = *in
	if in.Configurations != nil {
		in, out := &in.Configurations, &out.Configurations
		*out = new(string)
		**out = **in
	}
	if in.Name != nil {
		in, out := &in.Name, &out.Name
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ComponentConfigurationsInitParameters.
func (in *ComponentConfigurationsInitParameters) DeepCopy() *ComponentConfigurationsInitParameters {
	if in == nil {
		return nil
	}
	out := new(ComponentConfigurationsInitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ComponentConfigurationsObservation) DeepCopyInto(out *ComponentConfigurationsObservation) {
	*out = *in
	if in.Configurations != nil {
		in, out := &in.Configurations, &out.Configurations
		*out = new(string)
		**out = **in
	}
	if in.Name != nil {
		in, out := &in.Name, &out.Name
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ComponentConfigurationsObservation.
func (in *ComponentConfigurationsObservation) DeepCopy() *ComponentConfigurationsObservation {
	if in == nil {
		return nil
	}
	out := new(ComponentConfigurationsObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ComponentConfigurationsParameters) DeepCopyInto(out *ComponentConfigurationsParameters) {
	*out = *in
	if in.Configurations != nil {
		in, out := &in.Configurations, &out.Configurations
		*out = new(string)
		**out = **in
	}
	if in.Name != nil {
		in, out := &in.Name, &out.Name
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ComponentConfigurationsParameters.
func (in *ComponentConfigurationsParameters) DeepCopy() *ComponentConfigurationsParameters {
	if in == nil {
		return nil
	}
	out := new(ComponentConfigurationsParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *DataVolumesInitParameters) DeepCopyInto(out *DataVolumesInitParameters) {
	*out = *in
	if in.DssPoolID != nil {
		in, out := &in.DssPoolID, &out.DssPoolID
		*out = new(string)
		**out = **in
	}
	if in.ExtendParam != nil {
		in, out := &in.ExtendParam, &out.ExtendParam
		*out = new(string)
		**out = **in
	}
	if in.ExtendParams != nil {
		in, out := &in.ExtendParams, &out.ExtendParams
		*out = make(map[string]*string, len(*in))
		for key, val := range *in {
			var outVal *string
			if val == nil {
				(*out)[key] = nil
			} else {
				inVal := (*in)[key]
				in, out := &inVal, &outVal
				*out = new(string)
				**out = **in
			}
			(*out)[key] = outVal
		}
	}
	if in.HwPassthrough != nil {
		in, out := &in.HwPassthrough, &out.HwPassthrough
		*out = new(bool)
		**out = **in
	}
	if in.KMSKeyID != nil {
		in, out := &in.KMSKeyID, &out.KMSKeyID
		*out = new(string)
		**out = **in
	}
	if in.Size != nil {
		in, out := &in.Size, &out.Size
		*out = new(float64)
		**out = **in
	}
	if in.Volumetype != nil {
		in, out := &in.Volumetype, &out.Volumetype
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new DataVolumesInitParameters.
func (in *DataVolumesInitParameters) DeepCopy() *DataVolumesInitParameters {
	if in == nil {
		return nil
	}
	out := new(DataVolumesInitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *DataVolumesObservation) DeepCopyInto(out *DataVolumesObservation) {
	*out = *in
	if in.DssPoolID != nil {
		in, out := &in.DssPoolID, &out.DssPoolID
		*out = new(string)
		**out = **in
	}
	if in.ExtendParam != nil {
		in, out := &in.ExtendParam, &out.ExtendParam
		*out = new(string)
		**out = **in
	}
	if in.ExtendParams != nil {
		in, out := &in.ExtendParams, &out.ExtendParams
		*out = make(map[string]*string, len(*in))
		for key, val := range *in {
			var outVal *string
			if val == nil {
				(*out)[key] = nil
			} else {
				inVal := (*in)[key]
				in, out := &inVal, &outVal
				*out = new(string)
				**out = **in
			}
			(*out)[key] = outVal
		}
	}
	if in.HwPassthrough != nil {
		in, out := &in.HwPassthrough, &out.HwPassthrough
		*out = new(bool)
		**out = **in
	}
	if in.KMSKeyID != nil {
		in, out := &in.KMSKeyID, &out.KMSKeyID
		*out = new(string)
		**out = **in
	}
	if in.Size != nil {
		in, out := &in.Size, &out.Size
		*out = new(float64)
		**out = **in
	}
	if in.Volumetype != nil {
		in, out := &in.Volumetype, &out.Volumetype
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new DataVolumesObservation.
func (in *DataVolumesObservation) DeepCopy() *DataVolumesObservation {
	if in == nil {
		return nil
	}
	out := new(DataVolumesObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *DataVolumesParameters) DeepCopyInto(out *DataVolumesParameters) {
	*out = *in
	if in.DssPoolID != nil {
		in, out := &in.DssPoolID, &out.DssPoolID
		*out = new(string)
		**out = **in
	}
	if in.ExtendParam != nil {
		in, out := &in.ExtendParam, &out.ExtendParam
		*out = new(string)
		**out = **in
	}
	if in.ExtendParams != nil {
		in, out := &in.ExtendParams, &out.ExtendParams
		*out = make(map[string]*string, len(*in))
		for key, val := range *in {
			var outVal *string
			if val == nil {
				(*out)[key] = nil
			} else {
				inVal := (*in)[key]
				in, out := &inVal, &outVal
				*out = new(string)
				**out = **in
			}
			(*out)[key] = outVal
		}
	}
	if in.HwPassthrough != nil {
		in, out := &in.HwPassthrough, &out.HwPassthrough
		*out = new(bool)
		**out = **in
	}
	if in.KMSKeyID != nil {
		in, out := &in.KMSKeyID, &out.KMSKeyID
		*out = new(string)
		**out = **in
	}
	if in.Size != nil {
		in, out := &in.Size, &out.Size
		*out = new(float64)
		**out = **in
	}
	if in.Volumetype != nil {
		in, out := &in.Volumetype, &out.Volumetype
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new DataVolumesParameters.
func (in *DataVolumesParameters) DeepCopy() *DataVolumesParameters {
	if in == nil {
		return nil
	}
	out := new(DataVolumesParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ExtendParamsInitParameters) DeepCopyInto(out *ExtendParamsInitParameters) {
	*out = *in
	if in.CPUManagerPolicy != nil {
		in, out := &in.CPUManagerPolicy, &out.CPUManagerPolicy
		*out = new(string)
		**out = **in
	}
	if in.ClusterAz != nil {
		in, out := &in.ClusterAz, &out.ClusterAz
		*out = new(string)
		**out = **in
	}
	if in.DecMasterFlavor != nil {
		in, out := &in.DecMasterFlavor, &out.DecMasterFlavor
		*out = new(string)
		**out = **in
	}
	if in.DockerUmaskMode != nil {
		in, out := &in.DockerUmaskMode, &out.DockerUmaskMode
		*out = new(string)
		**out = **in
	}
	if in.DssMasterVolumes != nil {
		in, out := &in.DssMasterVolumes, &out.DssMasterVolumes
		*out = new(string)
		**out = **in
	}
	if in.FixPoolMask != nil {
		in, out := &in.FixPoolMask, &out.FixPoolMask
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ExtendParamsInitParameters.
func (in *ExtendParamsInitParameters) DeepCopy() *ExtendParamsInitParameters {
	if in == nil {
		return nil
	}
	out := new(ExtendParamsInitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ExtendParamsObservation) DeepCopyInto(out *ExtendParamsObservation) {
	*out = *in
	if in.CPUManagerPolicy != nil {
		in, out := &in.CPUManagerPolicy, &out.CPUManagerPolicy
		*out = new(string)
		**out = **in
	}
	if in.ClusterAz != nil {
		in, out := &in.ClusterAz, &out.ClusterAz
		*out = new(string)
		**out = **in
	}
	if in.DecMasterFlavor != nil {
		in, out := &in.DecMasterFlavor, &out.DecMasterFlavor
		*out = new(string)
		**out = **in
	}
	if in.DockerUmaskMode != nil {
		in, out := &in.DockerUmaskMode, &out.DockerUmaskMode
		*out = new(string)
		**out = **in
	}
	if in.DssMasterVolumes != nil {
		in, out := &in.DssMasterVolumes, &out.DssMasterVolumes
		*out = new(string)
		**out = **in
	}
	if in.FixPoolMask != nil {
		in, out := &in.FixPoolMask, &out.FixPoolMask
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ExtendParamsObservation.
func (in *ExtendParamsObservation) DeepCopy() *ExtendParamsObservation {
	if in == nil {
		return nil
	}
	out := new(ExtendParamsObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ExtendParamsParameters) DeepCopyInto(out *ExtendParamsParameters) {
	*out = *in
	if in.CPUManagerPolicy != nil {
		in, out := &in.CPUManagerPolicy, &out.CPUManagerPolicy
		*out = new(string)
		**out = **in
	}
	if in.ClusterAz != nil {
		in, out := &in.ClusterAz, &out.ClusterAz
		*out = new(string)
		**out = **in
	}
	if in.DecMasterFlavor != nil {
		in, out := &in.DecMasterFlavor, &out.DecMasterFlavor
		*out = new(string)
		**out = **in
	}
	if in.DockerUmaskMode != nil {
		in, out := &in.DockerUmaskMode, &out.DockerUmaskMode
		*out = new(string)
		**out = **in
	}
	if in.DssMasterVolumes != nil {
		in, out := &in.DssMasterVolumes, &out.DssMasterVolumes
		*out = new(string)
		**out = **in
	}
	if in.FixPoolMask != nil {
		in, out := &in.FixPoolMask, &out.FixPoolMask
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ExtendParamsParameters.
func (in *ExtendParamsParameters) DeepCopy() *ExtendParamsParameters {
	if in == nil {
		return nil
	}
	out := new(ExtendParamsParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ExtensionNicsInitParameters) DeepCopyInto(out *ExtensionNicsInitParameters) {
	*out = *in
	if in.SubnetID != nil {
		in, out := &in.SubnetID, &out.SubnetID
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ExtensionNicsInitParameters.
func (in *ExtensionNicsInitParameters) DeepCopy() *ExtensionNicsInitParameters {
	if in == nil {
		return nil
	}
	out := new(ExtensionNicsInitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ExtensionNicsObservation) DeepCopyInto(out *ExtensionNicsObservation) {
	*out = *in
	if in.SubnetID != nil {
		in, out := &in.SubnetID, &out.SubnetID
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ExtensionNicsObservation.
func (in *ExtensionNicsObservation) DeepCopy() *ExtensionNicsObservation {
	if in == nil {
		return nil
	}
	out := new(ExtensionNicsObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ExtensionNicsParameters) DeepCopyInto(out *ExtensionNicsParameters) {
	*out = *in
	if in.SubnetID != nil {
		in, out := &in.SubnetID, &out.SubnetID
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ExtensionNicsParameters.
func (in *ExtensionNicsParameters) DeepCopy() *ExtensionNicsParameters {
	if in == nil {
		return nil
	}
	out := new(ExtensionNicsParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ExtensionScaleGroupsInitParameters) DeepCopyInto(out *ExtensionScaleGroupsInitParameters) {
	*out = *in
	if in.Metadata != nil {
		in, out := &in.Metadata, &out.Metadata
		*out = make([]MetadataInitParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.Spec != nil {
		in, out := &in.Spec, &out.Spec
		*out = make([]SpecInitParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ExtensionScaleGroupsInitParameters.
func (in *ExtensionScaleGroupsInitParameters) DeepCopy() *ExtensionScaleGroupsInitParameters {
	if in == nil {
		return nil
	}
	out := new(ExtensionScaleGroupsInitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ExtensionScaleGroupsObservation) DeepCopyInto(out *ExtensionScaleGroupsObservation) {
	*out = *in
	if in.Metadata != nil {
		in, out := &in.Metadata, &out.Metadata
		*out = make([]MetadataObservation, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.Spec != nil {
		in, out := &in.Spec, &out.Spec
		*out = make([]SpecObservation, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ExtensionScaleGroupsObservation.
func (in *ExtensionScaleGroupsObservation) DeepCopy() *ExtensionScaleGroupsObservation {
	if in == nil {
		return nil
	}
	out := new(ExtensionScaleGroupsObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ExtensionScaleGroupsParameters) DeepCopyInto(out *ExtensionScaleGroupsParameters) {
	*out = *in
	if in.Metadata != nil {
		in, out := &in.Metadata, &out.Metadata
		*out = make([]MetadataParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.Spec != nil {
		in, out := &in.Spec, &out.Spec
		*out = make([]SpecParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ExtensionScaleGroupsParameters.
func (in *ExtensionScaleGroupsParameters) DeepCopy() *ExtensionScaleGroupsParameters {
	if in == nil {
		return nil
	}
	out := new(ExtensionScaleGroupsParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *GroupsInitParameters) DeepCopyInto(out *GroupsInitParameters) {
	*out = *in
	if in.CceManaged != nil {
		in, out := &in.CceManaged, &out.CceManaged
		*out = new(bool)
		**out = **in
	}
	if in.Name != nil {
		in, out := &in.Name, &out.Name
		*out = new(string)
		**out = **in
	}
	if in.SelectorNames != nil {
		in, out := &in.SelectorNames, &out.SelectorNames
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.VirtualSpaces != nil {
		in, out := &in.VirtualSpaces, &out.VirtualSpaces
		*out = make([]VirtualSpacesInitParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new GroupsInitParameters.
func (in *GroupsInitParameters) DeepCopy() *GroupsInitParameters {
	if in == nil {
		return nil
	}
	out := new(GroupsInitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *GroupsObservation) DeepCopyInto(out *GroupsObservation) {
	*out = *in
	if in.CceManaged != nil {
		in, out := &in.CceManaged, &out.CceManaged
		*out = new(bool)
		**out = **in
	}
	if in.Name != nil {
		in, out := &in.Name, &out.Name
		*out = new(string)
		**out = **in
	}
	if in.SelectorNames != nil {
		in, out := &in.SelectorNames, &out.SelectorNames
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.VirtualSpaces != nil {
		in, out := &in.VirtualSpaces, &out.VirtualSpaces
		*out = make([]VirtualSpacesObservation, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new GroupsObservation.
func (in *GroupsObservation) DeepCopy() *GroupsObservation {
	if in == nil {
		return nil
	}
	out := new(GroupsObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *GroupsParameters) DeepCopyInto(out *GroupsParameters) {
	*out = *in
	if in.CceManaged != nil {
		in, out := &in.CceManaged, &out.CceManaged
		*out = new(bool)
		**out = **in
	}
	if in.Name != nil {
		in, out := &in.Name, &out.Name
		*out = new(string)
		**out = **in
	}
	if in.SelectorNames != nil {
		in, out := &in.SelectorNames, &out.SelectorNames
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.VirtualSpaces != nil {
		in, out := &in.VirtualSpaces, &out.VirtualSpaces
		*out = make([]VirtualSpacesParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new GroupsParameters.
func (in *GroupsParameters) DeepCopy() *GroupsParameters {
	if in == nil {
		return nil
	}
	out := new(GroupsParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *GroupsVirtualSpacesInitParameters) DeepCopyInto(out *GroupsVirtualSpacesInitParameters) {
	*out = *in
	if in.LvmLvType != nil {
		in, out := &in.LvmLvType, &out.LvmLvType
		*out = new(string)
		**out = **in
	}
	if in.LvmPath != nil {
		in, out := &in.LvmPath, &out.LvmPath
		*out = new(string)
		**out = **in
	}
	if in.Name != nil {
		in, out := &in.Name, &out.Name
		*out = new(string)
		**out = **in
	}
	if in.RuntimeLvType != nil {
		in, out := &in.RuntimeLvType, &out.RuntimeLvType
		*out = new(string)
		**out = **in
	}
	if in.Size != nil {
		in, out := &in.Size, &out.Size
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new GroupsVirtualSpacesInitParameters.
func (in *GroupsVirtualSpacesInitParameters) DeepCopy() *GroupsVirtualSpacesInitParameters {
	if in == nil {
		return nil
	}
	out := new(GroupsVirtualSpacesInitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *GroupsVirtualSpacesObservation) DeepCopyInto(out *GroupsVirtualSpacesObservation) {
	*out = *in
	if in.LvmLvType != nil {
		in, out := &in.LvmLvType, &out.LvmLvType
		*out = new(string)
		**out = **in
	}
	if in.LvmPath != nil {
		in, out := &in.LvmPath, &out.LvmPath
		*out = new(string)
		**out = **in
	}
	if in.Name != nil {
		in, out := &in.Name, &out.Name
		*out = new(string)
		**out = **in
	}
	if in.RuntimeLvType != nil {
		in, out := &in.RuntimeLvType, &out.RuntimeLvType
		*out = new(string)
		**out = **in
	}
	if in.Size != nil {
		in, out := &in.Size, &out.Size
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new GroupsVirtualSpacesObservation.
func (in *GroupsVirtualSpacesObservation) DeepCopy() *GroupsVirtualSpacesObservation {
	if in == nil {
		return nil
	}
	out := new(GroupsVirtualSpacesObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *GroupsVirtualSpacesParameters) DeepCopyInto(out *GroupsVirtualSpacesParameters) {
	*out = *in
	if in.LvmLvType != nil {
		in, out := &in.LvmLvType, &out.LvmLvType
		*out = new(string)
		**out = **in
	}
	if in.LvmPath != nil {
		in, out := &in.LvmPath, &out.LvmPath
		*out = new(string)
		**out = **in
	}
	if in.Name != nil {
		in, out := &in.Name, &out.Name
		*out = new(string)
		**out = **in
	}
	if in.RuntimeLvType != nil {
		in, out := &in.RuntimeLvType, &out.RuntimeLvType
		*out = new(string)
		**out = **in
	}
	if in.Size != nil {
		in, out := &in.Size, &out.Size
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new GroupsVirtualSpacesParameters.
func (in *GroupsVirtualSpacesParameters) DeepCopy() *GroupsVirtualSpacesParameters {
	if in == nil {
		return nil
	}
	out := new(GroupsVirtualSpacesParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *HostnameConfigInitParameters) DeepCopyInto(out *HostnameConfigInitParameters) {
	*out = *in
	if in.Type != nil {
		in, out := &in.Type, &out.Type
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new HostnameConfigInitParameters.
func (in *HostnameConfigInitParameters) DeepCopy() *HostnameConfigInitParameters {
	if in == nil {
		return nil
	}
	out := new(HostnameConfigInitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *HostnameConfigObservation) DeepCopyInto(out *HostnameConfigObservation) {
	*out = *in
	if in.Type != nil {
		in, out := &in.Type, &out.Type
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new HostnameConfigObservation.
func (in *HostnameConfigObservation) DeepCopy() *HostnameConfigObservation {
	if in == nil {
		return nil
	}
	out := new(HostnameConfigObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *HostnameConfigParameters) DeepCopyInto(out *HostnameConfigParameters) {
	*out = *in
	if in.Type != nil {
		in, out := &in.Type, &out.Type
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new HostnameConfigParameters.
func (in *HostnameConfigParameters) DeepCopy() *HostnameConfigParameters {
	if in == nil {
		return nil
	}
	out := new(HostnameConfigParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *InPlaceRollingUpdateInitParameters) DeepCopyInto(out *InPlaceRollingUpdateInitParameters) {
	*out = *in
	if in.UserDefinedStep != nil {
		in, out := &in.UserDefinedStep, &out.UserDefinedStep
		*out = new(float64)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new InPlaceRollingUpdateInitParameters.
func (in *InPlaceRollingUpdateInitParameters) DeepCopy() *InPlaceRollingUpdateInitParameters {
	if in == nil {
		return nil
	}
	out := new(InPlaceRollingUpdateInitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *InPlaceRollingUpdateObservation) DeepCopyInto(out *InPlaceRollingUpdateObservation) {
	*out = *in
	if in.UserDefinedStep != nil {
		in, out := &in.UserDefinedStep, &out.UserDefinedStep
		*out = new(float64)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new InPlaceRollingUpdateObservation.
func (in *InPlaceRollingUpdateObservation) DeepCopy() *InPlaceRollingUpdateObservation {
	if in == nil {
		return nil
	}
	out := new(InPlaceRollingUpdateObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *InPlaceRollingUpdateParameters) DeepCopyInto(out *InPlaceRollingUpdateParameters) {
	*out = *in
	if in.UserDefinedStep != nil {
		in, out := &in.UserDefinedStep, &out.UserDefinedStep
		*out = new(float64)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new InPlaceRollingUpdateParameters.
func (in *InPlaceRollingUpdateParameters) DeepCopy() *InPlaceRollingUpdateParameters {
	if in == nil {
		return nil
	}
	out := new(InPlaceRollingUpdateParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *LogConfigsInitParameters) DeepCopyInto(out *LogConfigsInitParameters) {
	*out = *in
	if in.Enable != nil {
		in, out := &in.Enable, &out.Enable
		*out = new(bool)
		**out = **in
	}
	if in.Name != nil {
		in, out := &in.Name, &out.Name
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new LogConfigsInitParameters.
func (in *LogConfigsInitParameters) DeepCopy() *LogConfigsInitParameters {
	if in == nil {
		return nil
	}
	out := new(LogConfigsInitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *LogConfigsObservation) DeepCopyInto(out *LogConfigsObservation) {
	*out = *in
	if in.Enable != nil {
		in, out := &in.Enable, &out.Enable
		*out = new(bool)
		**out = **in
	}
	if in.Name != nil {
		in, out := &in.Name, &out.Name
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new LogConfigsObservation.
func (in *LogConfigsObservation) DeepCopy() *LogConfigsObservation {
	if in == nil {
		return nil
	}
	out := new(LogConfigsObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *LogConfigsParameters) DeepCopyInto(out *LogConfigsParameters) {
	*out = *in
	if in.Enable != nil {
		in, out := &in.Enable, &out.Enable
		*out = new(bool)
		**out = **in
	}
	if in.Name != nil {
		in, out := &in.Name, &out.Name
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new LogConfigsParameters.
func (in *LogConfigsParameters) DeepCopy() *LogConfigsParameters {
	if in == nil {
		return nil
	}
	out := new(LogConfigsParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *MastersInitParameters) DeepCopyInto(out *MastersInitParameters) {
	*out = *in
	if in.AvailabilityZone != nil {
		in, out := &in.AvailabilityZone, &out.AvailabilityZone
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new MastersInitParameters.
func (in *MastersInitParameters) DeepCopy() *MastersInitParameters {
	if in == nil {
		return nil
	}
	out := new(MastersInitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *MastersObservation) DeepCopyInto(out *MastersObservation) {
	*out = *in
	if in.AvailabilityZone != nil {
		in, out := &in.AvailabilityZone, &out.AvailabilityZone
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new MastersObservation.
func (in *MastersObservation) DeepCopy() *MastersObservation {
	if in == nil {
		return nil
	}
	out := new(MastersObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *MastersParameters) DeepCopyInto(out *MastersParameters) {
	*out = *in
	if in.AvailabilityZone != nil {
		in, out := &in.AvailabilityZone, &out.AvailabilityZone
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new MastersParameters.
func (in *MastersParameters) DeepCopy() *MastersParameters {
	if in == nil {
		return nil
	}
	out := new(MastersParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *MetadataInitParameters) DeepCopyInto(out *MetadataInitParameters) {
	*out = *in
	if in.Name != nil {
		in, out := &in.Name, &out.Name
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new MetadataInitParameters.
func (in *MetadataInitParameters) DeepCopy() *MetadataInitParameters {
	if in == nil {
		return nil
	}
	out := new(MetadataInitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *MetadataObservation) DeepCopyInto(out *MetadataObservation) {
	*out = *in
	if in.Name != nil {
		in, out := &in.Name, &out.Name
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new MetadataObservation.
func (in *MetadataObservation) DeepCopy() *MetadataObservation {
	if in == nil {
		return nil
	}
	out := new(MetadataObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *MetadataParameters) DeepCopyInto(out *MetadataParameters) {
	*out = *in
	if in.Name != nil {
		in, out := &in.Name, &out.Name
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new MetadataParameters.
func (in *MetadataParameters) DeepCopy() *MetadataParameters {
	if in == nil {
		return nil
	}
	out := new(MetadataParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *Namespace) DeepCopyInto(out *Namespace) {
	*out = *in
	out.TypeMeta = in.TypeMeta
	in.ObjectMeta.DeepCopyInto(&out.ObjectMeta)
	in.Spec.DeepCopyInto(&out.Spec)
	in.Status.DeepCopyInto(&out.Status)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new Namespace.
func (in *Namespace) DeepCopy() *Namespace {
	if in == nil {
		return nil
	}
	out := new(Namespace)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyObject is an autogenerated deepcopy function, copying the receiver, creating a new runtime.Object.
func (in *Namespace) DeepCopyObject() runtime.Object {
	if c := in.DeepCopy(); c != nil {
		return c
	}
	return nil
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *NamespaceInitParameters) DeepCopyInto(out *NamespaceInitParameters) {
	*out = *in
	if in.Annotations != nil {
		in, out := &in.Annotations, &out.Annotations
		*out = make(map[string]*string, len(*in))
		for key, val := range *in {
			var outVal *string
			if val == nil {
				(*out)[key] = nil
			} else {
				inVal := (*in)[key]
				in, out := &inVal, &outVal
				*out = new(string)
				**out = **in
			}
			(*out)[key] = outVal
		}
	}
	if in.ClusterID != nil {
		in, out := &in.ClusterID, &out.ClusterID
		*out = new(string)
		**out = **in
	}
	if in.ClusterIDRef != nil {
		in, out := &in.ClusterIDRef, &out.ClusterIDRef
		*out = new(v1.Reference)
		(*in).DeepCopyInto(*out)
	}
	if in.ClusterIDSelector != nil {
		in, out := &in.ClusterIDSelector, &out.ClusterIDSelector
		*out = new(v1.Selector)
		(*in).DeepCopyInto(*out)
	}
	if in.Labels != nil {
		in, out := &in.Labels, &out.Labels
		*out = make(map[string]*string, len(*in))
		for key, val := range *in {
			var outVal *string
			if val == nil {
				(*out)[key] = nil
			} else {
				inVal := (*in)[key]
				in, out := &inVal, &outVal
				*out = new(string)
				**out = **in
			}
			(*out)[key] = outVal
		}
	}
	if in.Name != nil {
		in, out := &in.Name, &out.Name
		*out = new(string)
		**out = **in
	}
	if in.Prefix != nil {
		in, out := &in.Prefix, &out.Prefix
		*out = new(string)
		**out = **in
	}
	if in.Region != nil {
		in, out := &in.Region, &out.Region
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new NamespaceInitParameters.
func (in *NamespaceInitParameters) DeepCopy() *NamespaceInitParameters {
	if in == nil {
		return nil
	}
	out := new(NamespaceInitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *NamespaceList) DeepCopyInto(out *NamespaceList) {
	*out = *in
	out.TypeMeta = in.TypeMeta
	in.ListMeta.DeepCopyInto(&out.ListMeta)
	if in.Items != nil {
		in, out := &in.Items, &out.Items
		*out = make([]Namespace, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new NamespaceList.
func (in *NamespaceList) DeepCopy() *NamespaceList {
	if in == nil {
		return nil
	}
	out := new(NamespaceList)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyObject is an autogenerated deepcopy function, copying the receiver, creating a new runtime.Object.
func (in *NamespaceList) DeepCopyObject() runtime.Object {
	if c := in.DeepCopy(); c != nil {
		return c
	}
	return nil
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *NamespaceObservation) DeepCopyInto(out *NamespaceObservation) {
	*out = *in
	if in.Annotations != nil {
		in, out := &in.Annotations, &out.Annotations
		*out = make(map[string]*string, len(*in))
		for key, val := range *in {
			var outVal *string
			if val == nil {
				(*out)[key] = nil
			} else {
				inVal := (*in)[key]
				in, out := &inVal, &outVal
				*out = new(string)
				**out = **in
			}
			(*out)[key] = outVal
		}
	}
	if in.ClusterID != nil {
		in, out := &in.ClusterID, &out.ClusterID
		*out = new(string)
		**out = **in
	}
	if in.CreationTimestamp != nil {
		in, out := &in.CreationTimestamp, &out.CreationTimestamp
		*out = new(string)
		**out = **in
	}
	if in.ID != nil {
		in, out := &in.ID, &out.ID
		*out = new(string)
		**out = **in
	}
	if in.Labels != nil {
		in, out := &in.Labels, &out.Labels
		*out = make(map[string]*string, len(*in))
		for key, val := range *in {
			var outVal *string
			if val == nil {
				(*out)[key] = nil
			} else {
				inVal := (*in)[key]
				in, out := &inVal, &outVal
				*out = new(string)
				**out = **in
			}
			(*out)[key] = outVal
		}
	}
	if in.Name != nil {
		in, out := &in.Name, &out.Name
		*out = new(string)
		**out = **in
	}
	if in.Prefix != nil {
		in, out := &in.Prefix, &out.Prefix
		*out = new(string)
		**out = **in
	}
	if in.Region != nil {
		in, out := &in.Region, &out.Region
		*out = new(string)
		**out = **in
	}
	if in.Status != nil {
		in, out := &in.Status, &out.Status
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new NamespaceObservation.
func (in *NamespaceObservation) DeepCopy() *NamespaceObservation {
	if in == nil {
		return nil
	}
	out := new(NamespaceObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *NamespaceParameters) DeepCopyInto(out *NamespaceParameters) {
	*out = *in
	if in.Annotations != nil {
		in, out := &in.Annotations, &out.Annotations
		*out = make(map[string]*string, len(*in))
		for key, val := range *in {
			var outVal *string
			if val == nil {
				(*out)[key] = nil
			} else {
				inVal := (*in)[key]
				in, out := &inVal, &outVal
				*out = new(string)
				**out = **in
			}
			(*out)[key] = outVal
		}
	}
	if in.ClusterID != nil {
		in, out := &in.ClusterID, &out.ClusterID
		*out = new(string)
		**out = **in
	}
	if in.ClusterIDRef != nil {
		in, out := &in.ClusterIDRef, &out.ClusterIDRef
		*out = new(v1.Reference)
		(*in).DeepCopyInto(*out)
	}
	if in.ClusterIDSelector != nil {
		in, out := &in.ClusterIDSelector, &out.ClusterIDSelector
		*out = new(v1.Selector)
		(*in).DeepCopyInto(*out)
	}
	if in.Labels != nil {
		in, out := &in.Labels, &out.Labels
		*out = make(map[string]*string, len(*in))
		for key, val := range *in {
			var outVal *string
			if val == nil {
				(*out)[key] = nil
			} else {
				inVal := (*in)[key]
				in, out := &inVal, &outVal
				*out = new(string)
				**out = **in
			}
			(*out)[key] = outVal
		}
	}
	if in.Name != nil {
		in, out := &in.Name, &out.Name
		*out = new(string)
		**out = **in
	}
	if in.Prefix != nil {
		in, out := &in.Prefix, &out.Prefix
		*out = new(string)
		**out = **in
	}
	if in.Region != nil {
		in, out := &in.Region, &out.Region
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new NamespaceParameters.
func (in *NamespaceParameters) DeepCopy() *NamespaceParameters {
	if in == nil {
		return nil
	}
	out := new(NamespaceParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *NamespaceSpec) DeepCopyInto(out *NamespaceSpec) {
	*out = *in
	in.ResourceSpec.DeepCopyInto(&out.ResourceSpec)
	in.ForProvider.DeepCopyInto(&out.ForProvider)
	in.InitProvider.DeepCopyInto(&out.InitProvider)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new NamespaceSpec.
func (in *NamespaceSpec) DeepCopy() *NamespaceSpec {
	if in == nil {
		return nil
	}
	out := new(NamespaceSpec)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *NamespaceStatus) DeepCopyInto(out *NamespaceStatus) {
	*out = *in
	in.ResourceStatus.DeepCopyInto(&out.ResourceStatus)
	in.AtProvider.DeepCopyInto(&out.AtProvider)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new NamespaceStatus.
func (in *NamespaceStatus) DeepCopy() *NamespaceStatus {
	if in == nil {
		return nil
	}
	out := new(NamespaceStatus)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *Node) DeepCopyInto(out *Node) {
	*out = *in
	out.TypeMeta = in.TypeMeta
	in.ObjectMeta.DeepCopyInto(&out.ObjectMeta)
	in.Spec.DeepCopyInto(&out.Spec)
	in.Status.DeepCopyInto(&out.Status)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new Node.
func (in *Node) DeepCopy() *Node {
	if in == nil {
		return nil
	}
	out := new(Node)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyObject is an autogenerated deepcopy function, copying the receiver, creating a new runtime.Object.
func (in *Node) DeepCopyObject() runtime.Object {
	if c := in.DeepCopy(); c != nil {
		return c
	}
	return nil
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *NodeAttach) DeepCopyInto(out *NodeAttach) {
	*out = *in
	out.TypeMeta = in.TypeMeta
	in.ObjectMeta.DeepCopyInto(&out.ObjectMeta)
	in.Spec.DeepCopyInto(&out.Spec)
	in.Status.DeepCopyInto(&out.Status)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new NodeAttach.
func (in *NodeAttach) DeepCopy() *NodeAttach {
	if in == nil {
		return nil
	}
	out := new(NodeAttach)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyObject is an autogenerated deepcopy function, copying the receiver, creating a new runtime.Object.
func (in *NodeAttach) DeepCopyObject() runtime.Object {
	if c := in.DeepCopy(); c != nil {
		return c
	}
	return nil
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *NodeAttachDataVolumesInitParameters) DeepCopyInto(out *NodeAttachDataVolumesInitParameters) {
	*out = *in
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new NodeAttachDataVolumesInitParameters.
func (in *NodeAttachDataVolumesInitParameters) DeepCopy() *NodeAttachDataVolumesInitParameters {
	if in == nil {
		return nil
	}
	out := new(NodeAttachDataVolumesInitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *NodeAttachDataVolumesObservation) DeepCopyInto(out *NodeAttachDataVolumesObservation) {
	*out = *in
	if in.DssPoolID != nil {
		in, out := &in.DssPoolID, &out.DssPoolID
		*out = new(string)
		**out = **in
	}
	if in.ExtendParam != nil {
		in, out := &in.ExtendParam, &out.ExtendParam
		*out = new(string)
		**out = **in
	}
	if in.ExtendParams != nil {
		in, out := &in.ExtendParams, &out.ExtendParams
		*out = make(map[string]*string, len(*in))
		for key, val := range *in {
			var outVal *string
			if val == nil {
				(*out)[key] = nil
			} else {
				inVal := (*in)[key]
				in, out := &inVal, &outVal
				*out = new(string)
				**out = **in
			}
			(*out)[key] = outVal
		}
	}
	if in.HwPassthrough != nil {
		in, out := &in.HwPassthrough, &out.HwPassthrough
		*out = new(bool)
		**out = **in
	}
	if in.KMSKeyID != nil {
		in, out := &in.KMSKeyID, &out.KMSKeyID
		*out = new(string)
		**out = **in
	}
	if in.Size != nil {
		in, out := &in.Size, &out.Size
		*out = new(float64)
		**out = **in
	}
	if in.Volumetype != nil {
		in, out := &in.Volumetype, &out.Volumetype
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new NodeAttachDataVolumesObservation.
func (in *NodeAttachDataVolumesObservation) DeepCopy() *NodeAttachDataVolumesObservation {
	if in == nil {
		return nil
	}
	out := new(NodeAttachDataVolumesObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *NodeAttachDataVolumesParameters) DeepCopyInto(out *NodeAttachDataVolumesParameters) {
	*out = *in
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new NodeAttachDataVolumesParameters.
func (in *NodeAttachDataVolumesParameters) DeepCopy() *NodeAttachDataVolumesParameters {
	if in == nil {
		return nil
	}
	out := new(NodeAttachDataVolumesParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *NodeAttachHostnameConfigInitParameters) DeepCopyInto(out *NodeAttachHostnameConfigInitParameters) {
	*out = *in
	if in.Type != nil {
		in, out := &in.Type, &out.Type
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new NodeAttachHostnameConfigInitParameters.
func (in *NodeAttachHostnameConfigInitParameters) DeepCopy() *NodeAttachHostnameConfigInitParameters {
	if in == nil {
		return nil
	}
	out := new(NodeAttachHostnameConfigInitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *NodeAttachHostnameConfigObservation) DeepCopyInto(out *NodeAttachHostnameConfigObservation) {
	*out = *in
	if in.Type != nil {
		in, out := &in.Type, &out.Type
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new NodeAttachHostnameConfigObservation.
func (in *NodeAttachHostnameConfigObservation) DeepCopy() *NodeAttachHostnameConfigObservation {
	if in == nil {
		return nil
	}
	out := new(NodeAttachHostnameConfigObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *NodeAttachHostnameConfigParameters) DeepCopyInto(out *NodeAttachHostnameConfigParameters) {
	*out = *in
	if in.Type != nil {
		in, out := &in.Type, &out.Type
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new NodeAttachHostnameConfigParameters.
func (in *NodeAttachHostnameConfigParameters) DeepCopy() *NodeAttachHostnameConfigParameters {
	if in == nil {
		return nil
	}
	out := new(NodeAttachHostnameConfigParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *NodeAttachInitParameters) DeepCopyInto(out *NodeAttachInitParameters) {
	*out = *in
	if in.ClusterID != nil {
		in, out := &in.ClusterID, &out.ClusterID
		*out = new(string)
		**out = **in
	}
	if in.ClusterIDRef != nil {
		in, out := &in.ClusterIDRef, &out.ClusterIDRef
		*out = new(v1.Reference)
		(*in).DeepCopyInto(*out)
	}
	if in.ClusterIDSelector != nil {
		in, out := &in.ClusterIDSelector, &out.ClusterIDSelector
		*out = new(v1.Selector)
		(*in).DeepCopyInto(*out)
	}
	if in.DockerBaseSize != nil {
		in, out := &in.DockerBaseSize, &out.DockerBaseSize
		*out = new(float64)
		**out = **in
	}
	if in.HostnameConfig != nil {
		in, out := &in.HostnameConfig, &out.HostnameConfig
		*out = make([]NodeAttachHostnameConfigInitParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.ImageID != nil {
		in, out := &in.ImageID, &out.ImageID
		*out = new(string)
		**out = **in
	}
	if in.InitializedConditions != nil {
		in, out := &in.InitializedConditions, &out.InitializedConditions
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.KeyPair != nil {
		in, out := &in.KeyPair, &out.KeyPair
		*out = new(string)
		**out = **in
	}
	if in.Labels != nil {
		in, out := &in.Labels, &out.Labels
		*out = make(map[string]*string, len(*in))
		for key, val := range *in {
			var outVal *string
			if val == nil {
				(*out)[key] = nil
			} else {
				inVal := (*in)[key]
				in, out := &inVal, &outVal
				*out = new(string)
				**out = **in
			}
			(*out)[key] = outVal
		}
	}
	if in.LvmConfig != nil {
		in, out := &in.LvmConfig, &out.LvmConfig
		*out = new(string)
		**out = **in
	}
	if in.MaxPods != nil {
		in, out := &in.MaxPods, &out.MaxPods
		*out = new(float64)
		**out = **in
	}
	if in.Name != nil {
		in, out := &in.Name, &out.Name
		*out = new(string)
		**out = **in
	}
	if in.NicMultiQueue != nil {
		in, out := &in.NicMultiQueue, &out.NicMultiQueue
		*out = new(string)
		**out = **in
	}
	if in.NicThreshold != nil {
		in, out := &in.NicThreshold, &out.NicThreshold
		*out = new(string)
		**out = **in
	}
	if in.Os != nil {
		in, out := &in.Os, &out.Os
		*out = new(string)
		**out = **in
	}
	if in.PasswordSecretRef != nil {
		in, out := &in.PasswordSecretRef, &out.PasswordSecretRef
		*out = new(v1.SecretKeySelector)
		**out = **in
	}
	if in.Postinstall != nil {
		in, out := &in.Postinstall, &out.Postinstall
		*out = new(string)
		**out = **in
	}
	if in.Preinstall != nil {
		in, out := &in.Preinstall, &out.Preinstall
		*out = new(string)
		**out = **in
	}
	if in.PrivateKeySecretRef != nil {
		in, out := &in.PrivateKeySecretRef, &out.PrivateKeySecretRef
		*out = new(v1.SecretKeySelector)
		**out = **in
	}
	if in.Region != nil {
		in, out := &in.Region, &out.Region
		*out = new(string)
		**out = **in
	}
	if in.Runtime != nil {
		in, out := &in.Runtime, &out.Runtime
		*out = new(string)
		**out = **in
	}
	if in.ServerID != nil {
		in, out := &in.ServerID, &out.ServerID
		*out = new(string)
		**out = **in
	}
	if in.ServerIDRef != nil {
		in, out := &in.ServerIDRef, &out.ServerIDRef
		*out = new(v1.Reference)
		(*in).DeepCopyInto(*out)
	}
	if in.ServerIDSelector != nil {
		in, out := &in.ServerIDSelector, &out.ServerIDSelector
		*out = new(v1.Selector)
		(*in).DeepCopyInto(*out)
	}
	if in.Storage != nil {
		in, out := &in.Storage, &out.Storage
		*out = make([]NodeAttachStorageInitParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.SystemDiskKMSKeyID != nil {
		in, out := &in.SystemDiskKMSKeyID, &out.SystemDiskKMSKeyID
		*out = new(string)
		**out = **in
	}
	if in.Tags != nil {
		in, out := &in.Tags, &out.Tags
		*out = make(map[string]*string, len(*in))
		for key, val := range *in {
			var outVal *string
			if val == nil {
				(*out)[key] = nil
			} else {
				inVal := (*in)[key]
				in, out := &inVal, &outVal
				*out = new(string)
				**out = **in
			}
			(*out)[key] = outVal
		}
	}
	if in.Taints != nil {
		in, out := &in.Taints, &out.Taints
		*out = make([]NodeAttachTaintsInitParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new NodeAttachInitParameters.
func (in *NodeAttachInitParameters) DeepCopy() *NodeAttachInitParameters {
	if in == nil {
		return nil
	}
	out := new(NodeAttachInitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *NodeAttachList) DeepCopyInto(out *NodeAttachList) {
	*out = *in
	out.TypeMeta = in.TypeMeta
	in.ListMeta.DeepCopyInto(&out.ListMeta)
	if in.Items != nil {
		in, out := &in.Items, &out.Items
		*out = make([]NodeAttach, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new NodeAttachList.
func (in *NodeAttachList) DeepCopy() *NodeAttachList {
	if in == nil {
		return nil
	}
	out := new(NodeAttachList)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyObject is an autogenerated deepcopy function, copying the receiver, creating a new runtime.Object.
func (in *NodeAttachList) DeepCopyObject() runtime.Object {
	if c := in.DeepCopy(); c != nil {
		return c
	}
	return nil
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *NodeAttachObservation) DeepCopyInto(out *NodeAttachObservation) {
	*out = *in
	if in.AvailabilityZone != nil {
		in, out := &in.AvailabilityZone, &out.AvailabilityZone
		*out = new(string)
		**out = **in
	}
	if in.ChargingMode != nil {
		in, out := &in.ChargingMode, &out.ChargingMode
		*out = new(string)
		**out = **in
	}
	if in.ClusterID != nil {
		in, out := &in.ClusterID, &out.ClusterID
		*out = new(string)
		**out = **in
	}
	if in.DataVolumes != nil {
		in, out := &in.DataVolumes, &out.DataVolumes
		*out = make([]NodeAttachDataVolumesObservation, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.DockerBaseSize != nil {
		in, out := &in.DockerBaseSize, &out.DockerBaseSize
		*out = new(float64)
		**out = **in
	}
	if in.EcsGroupID != nil {
		in, out := &in.EcsGroupID, &out.EcsGroupID
		*out = new(string)
		**out = **in
	}
	if in.EnterpriseProjectID != nil {
		in, out := &in.EnterpriseProjectID, &out.EnterpriseProjectID
		*out = new(string)
		**out = **in
	}
	if in.FlavorID != nil {
		in, out := &in.FlavorID, &out.FlavorID
		*out = new(string)
		**out = **in
	}
	if in.HostnameConfig != nil {
		in, out := &in.HostnameConfig, &out.HostnameConfig
		*out = make([]NodeAttachHostnameConfigObservation, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.ID != nil {
		in, out := &in.ID, &out.ID
		*out = new(string)
		**out = **in
	}
	if in.ImageID != nil {
		in, out := &in.ImageID, &out.ImageID
		*out = new(string)
		**out = **in
	}
	if in.InitializedConditions != nil {
		in, out := &in.InitializedConditions, &out.InitializedConditions
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.KeyPair != nil {
		in, out := &in.KeyPair, &out.KeyPair
		*out = new(string)
		**out = **in
	}
	if in.Labels != nil {
		in, out := &in.Labels, &out.Labels
		*out = make(map[string]*string, len(*in))
		for key, val := range *in {
			var outVal *string
			if val == nil {
				(*out)[key] = nil
			} else {
				inVal := (*in)[key]
				in, out := &inVal, &outVal
				*out = new(string)
				**out = **in
			}
			(*out)[key] = outVal
		}
	}
	if in.LvmConfig != nil {
		in, out := &in.LvmConfig, &out.LvmConfig
		*out = new(string)
		**out = **in
	}
	if in.MaxPods != nil {
		in, out := &in.MaxPods, &out.MaxPods
		*out = new(float64)
		**out = **in
	}
	if in.Name != nil {
		in, out := &in.Name, &out.Name
		*out = new(string)
		**out = **in
	}
	if in.NicMultiQueue != nil {
		in, out := &in.NicMultiQueue, &out.NicMultiQueue
		*out = new(string)
		**out = **in
	}
	if in.NicThreshold != nil {
		in, out := &in.NicThreshold, &out.NicThreshold
		*out = new(string)
		**out = **in
	}
	if in.Os != nil {
		in, out := &in.Os, &out.Os
		*out = new(string)
		**out = **in
	}
	if in.Postinstall != nil {
		in, out := &in.Postinstall, &out.Postinstall
		*out = new(string)
		**out = **in
	}
	if in.Preinstall != nil {
		in, out := &in.Preinstall, &out.Preinstall
		*out = new(string)
		**out = **in
	}
	if in.PrivateIP != nil {
		in, out := &in.PrivateIP, &out.PrivateIP
		*out = new(string)
		**out = **in
	}
	if in.PublicIP != nil {
		in, out := &in.PublicIP, &out.PublicIP
		*out = new(string)
		**out = **in
	}
	if in.Region != nil {
		in, out := &in.Region, &out.Region
		*out = new(string)
		**out = **in
	}
	if in.RootVolume != nil {
		in, out := &in.RootVolume, &out.RootVolume
		*out = make([]NodeAttachRootVolumeObservation, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.Runtime != nil {
		in, out := &in.Runtime, &out.Runtime
		*out = new(string)
		**out = **in
	}
	if in.ServerID != nil {
		in, out := &in.ServerID, &out.ServerID
		*out = new(string)
		**out = **in
	}
	if in.Status != nil {
		in, out := &in.Status, &out.Status
		*out = new(string)
		**out = **in
	}
	if in.Storage != nil {
		in, out := &in.Storage, &out.Storage
		*out = make([]NodeAttachStorageObservation, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.SubnetID != nil {
		in, out := &in.SubnetID, &out.SubnetID
		*out = new(string)
		**out = **in
	}
	if in.SystemDiskKMSKeyID != nil {
		in, out := &in.SystemDiskKMSKeyID, &out.SystemDiskKMSKeyID
		*out = new(string)
		**out = **in
	}
	if in.Tags != nil {
		in, out := &in.Tags, &out.Tags
		*out = make(map[string]*string, len(*in))
		for key, val := range *in {
			var outVal *string
			if val == nil {
				(*out)[key] = nil
			} else {
				inVal := (*in)[key]
				in, out := &inVal, &outVal
				*out = new(string)
				**out = **in
			}
			(*out)[key] = outVal
		}
	}
	if in.Taints != nil {
		in, out := &in.Taints, &out.Taints
		*out = make([]NodeAttachTaintsObservation, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new NodeAttachObservation.
func (in *NodeAttachObservation) DeepCopy() *NodeAttachObservation {
	if in == nil {
		return nil
	}
	out := new(NodeAttachObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *NodeAttachParameters) DeepCopyInto(out *NodeAttachParameters) {
	*out = *in
	if in.ClusterID != nil {
		in, out := &in.ClusterID, &out.ClusterID
		*out = new(string)
		**out = **in
	}
	if in.ClusterIDRef != nil {
		in, out := &in.ClusterIDRef, &out.ClusterIDRef
		*out = new(v1.Reference)
		(*in).DeepCopyInto(*out)
	}
	if in.ClusterIDSelector != nil {
		in, out := &in.ClusterIDSelector, &out.ClusterIDSelector
		*out = new(v1.Selector)
		(*in).DeepCopyInto(*out)
	}
	if in.DockerBaseSize != nil {
		in, out := &in.DockerBaseSize, &out.DockerBaseSize
		*out = new(float64)
		**out = **in
	}
	if in.HostnameConfig != nil {
		in, out := &in.HostnameConfig, &out.HostnameConfig
		*out = make([]NodeAttachHostnameConfigParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.ImageID != nil {
		in, out := &in.ImageID, &out.ImageID
		*out = new(string)
		**out = **in
	}
	if in.InitializedConditions != nil {
		in, out := &in.InitializedConditions, &out.InitializedConditions
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.KeyPair != nil {
		in, out := &in.KeyPair, &out.KeyPair
		*out = new(string)
		**out = **in
	}
	if in.Labels != nil {
		in, out := &in.Labels, &out.Labels
		*out = make(map[string]*string, len(*in))
		for key, val := range *in {
			var outVal *string
			if val == nil {
				(*out)[key] = nil
			} else {
				inVal := (*in)[key]
				in, out := &inVal, &outVal
				*out = new(string)
				**out = **in
			}
			(*out)[key] = outVal
		}
	}
	if in.LvmConfig != nil {
		in, out := &in.LvmConfig, &out.LvmConfig
		*out = new(string)
		**out = **in
	}
	if in.MaxPods != nil {
		in, out := &in.MaxPods, &out.MaxPods
		*out = new(float64)
		**out = **in
	}
	if in.Name != nil {
		in, out := &in.Name, &out.Name
		*out = new(string)
		**out = **in
	}
	if in.NicMultiQueue != nil {
		in, out := &in.NicMultiQueue, &out.NicMultiQueue
		*out = new(string)
		**out = **in
	}
	if in.NicThreshold != nil {
		in, out := &in.NicThreshold, &out.NicThreshold
		*out = new(string)
		**out = **in
	}
	if in.Os != nil {
		in, out := &in.Os, &out.Os
		*out = new(string)
		**out = **in
	}
	if in.PasswordSecretRef != nil {
		in, out := &in.PasswordSecretRef, &out.PasswordSecretRef
		*out = new(v1.SecretKeySelector)
		**out = **in
	}
	if in.Postinstall != nil {
		in, out := &in.Postinstall, &out.Postinstall
		*out = new(string)
		**out = **in
	}
	if in.Preinstall != nil {
		in, out := &in.Preinstall, &out.Preinstall
		*out = new(string)
		**out = **in
	}
	if in.PrivateKeySecretRef != nil {
		in, out := &in.PrivateKeySecretRef, &out.PrivateKeySecretRef
		*out = new(v1.SecretKeySelector)
		**out = **in
	}
	if in.Region != nil {
		in, out := &in.Region, &out.Region
		*out = new(string)
		**out = **in
	}
	if in.Runtime != nil {
		in, out := &in.Runtime, &out.Runtime
		*out = new(string)
		**out = **in
	}
	if in.ServerID != nil {
		in, out := &in.ServerID, &out.ServerID
		*out = new(string)
		**out = **in
	}
	if in.ServerIDRef != nil {
		in, out := &in.ServerIDRef, &out.ServerIDRef
		*out = new(v1.Reference)
		(*in).DeepCopyInto(*out)
	}
	if in.ServerIDSelector != nil {
		in, out := &in.ServerIDSelector, &out.ServerIDSelector
		*out = new(v1.Selector)
		(*in).DeepCopyInto(*out)
	}
	if in.Storage != nil {
		in, out := &in.Storage, &out.Storage
		*out = make([]NodeAttachStorageParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.SystemDiskKMSKeyID != nil {
		in, out := &in.SystemDiskKMSKeyID, &out.SystemDiskKMSKeyID
		*out = new(string)
		**out = **in
	}
	if in.Tags != nil {
		in, out := &in.Tags, &out.Tags
		*out = make(map[string]*string, len(*in))
		for key, val := range *in {
			var outVal *string
			if val == nil {
				(*out)[key] = nil
			} else {
				inVal := (*in)[key]
				in, out := &inVal, &outVal
				*out = new(string)
				**out = **in
			}
			(*out)[key] = outVal
		}
	}
	if in.Taints != nil {
		in, out := &in.Taints, &out.Taints
		*out = make([]NodeAttachTaintsParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new NodeAttachParameters.
func (in *NodeAttachParameters) DeepCopy() *NodeAttachParameters {
	if in == nil {
		return nil
	}
	out := new(NodeAttachParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *NodeAttachRootVolumeInitParameters) DeepCopyInto(out *NodeAttachRootVolumeInitParameters) {
	*out = *in
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new NodeAttachRootVolumeInitParameters.
func (in *NodeAttachRootVolumeInitParameters) DeepCopy() *NodeAttachRootVolumeInitParameters {
	if in == nil {
		return nil
	}
	out := new(NodeAttachRootVolumeInitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *NodeAttachRootVolumeObservation) DeepCopyInto(out *NodeAttachRootVolumeObservation) {
	*out = *in
	if in.DssPoolID != nil {
		in, out := &in.DssPoolID, &out.DssPoolID
		*out = new(string)
		**out = **in
	}
	if in.ExtendParam != nil {
		in, out := &in.ExtendParam, &out.ExtendParam
		*out = new(string)
		**out = **in
	}
	if in.ExtendParams != nil {
		in, out := &in.ExtendParams, &out.ExtendParams
		*out = make(map[string]*string, len(*in))
		for key, val := range *in {
			var outVal *string
			if val == nil {
				(*out)[key] = nil
			} else {
				inVal := (*in)[key]
				in, out := &inVal, &outVal
				*out = new(string)
				**out = **in
			}
			(*out)[key] = outVal
		}
	}
	if in.HwPassthrough != nil {
		in, out := &in.HwPassthrough, &out.HwPassthrough
		*out = new(bool)
		**out = **in
	}
	if in.KMSKeyID != nil {
		in, out := &in.KMSKeyID, &out.KMSKeyID
		*out = new(string)
		**out = **in
	}
	if in.Size != nil {
		in, out := &in.Size, &out.Size
		*out = new(float64)
		**out = **in
	}
	if in.Volumetype != nil {
		in, out := &in.Volumetype, &out.Volumetype
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new NodeAttachRootVolumeObservation.
func (in *NodeAttachRootVolumeObservation) DeepCopy() *NodeAttachRootVolumeObservation {
	if in == nil {
		return nil
	}
	out := new(NodeAttachRootVolumeObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *NodeAttachRootVolumeParameters) DeepCopyInto(out *NodeAttachRootVolumeParameters) {
	*out = *in
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new NodeAttachRootVolumeParameters.
func (in *NodeAttachRootVolumeParameters) DeepCopy() *NodeAttachRootVolumeParameters {
	if in == nil {
		return nil
	}
	out := new(NodeAttachRootVolumeParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *NodeAttachSpec) DeepCopyInto(out *NodeAttachSpec) {
	*out = *in
	in.ResourceSpec.DeepCopyInto(&out.ResourceSpec)
	in.ForProvider.DeepCopyInto(&out.ForProvider)
	in.InitProvider.DeepCopyInto(&out.InitProvider)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new NodeAttachSpec.
func (in *NodeAttachSpec) DeepCopy() *NodeAttachSpec {
	if in == nil {
		return nil
	}
	out := new(NodeAttachSpec)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *NodeAttachStatus) DeepCopyInto(out *NodeAttachStatus) {
	*out = *in
	in.ResourceStatus.DeepCopyInto(&out.ResourceStatus)
	in.AtProvider.DeepCopyInto(&out.AtProvider)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new NodeAttachStatus.
func (in *NodeAttachStatus) DeepCopy() *NodeAttachStatus {
	if in == nil {
		return nil
	}
	out := new(NodeAttachStatus)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *NodeAttachStorageInitParameters) DeepCopyInto(out *NodeAttachStorageInitParameters) {
	*out = *in
	if in.Groups != nil {
		in, out := &in.Groups, &out.Groups
		*out = make([]StorageGroupsInitParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.Selectors != nil {
		in, out := &in.Selectors, &out.Selectors
		*out = make([]StorageSelectorsInitParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new NodeAttachStorageInitParameters.
func (in *NodeAttachStorageInitParameters) DeepCopy() *NodeAttachStorageInitParameters {
	if in == nil {
		return nil
	}
	out := new(NodeAttachStorageInitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *NodeAttachStorageObservation) DeepCopyInto(out *NodeAttachStorageObservation) {
	*out = *in
	if in.Groups != nil {
		in, out := &in.Groups, &out.Groups
		*out = make([]StorageGroupsObservation, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.Selectors != nil {
		in, out := &in.Selectors, &out.Selectors
		*out = make([]StorageSelectorsObservation, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new NodeAttachStorageObservation.
func (in *NodeAttachStorageObservation) DeepCopy() *NodeAttachStorageObservation {
	if in == nil {
		return nil
	}
	out := new(NodeAttachStorageObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *NodeAttachStorageParameters) DeepCopyInto(out *NodeAttachStorageParameters) {
	*out = *in
	if in.Groups != nil {
		in, out := &in.Groups, &out.Groups
		*out = make([]StorageGroupsParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.Selectors != nil {
		in, out := &in.Selectors, &out.Selectors
		*out = make([]StorageSelectorsParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new NodeAttachStorageParameters.
func (in *NodeAttachStorageParameters) DeepCopy() *NodeAttachStorageParameters {
	if in == nil {
		return nil
	}
	out := new(NodeAttachStorageParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *NodeAttachTaintsInitParameters) DeepCopyInto(out *NodeAttachTaintsInitParameters) {
	*out = *in
	if in.Effect != nil {
		in, out := &in.Effect, &out.Effect
		*out = new(string)
		**out = **in
	}
	if in.Key != nil {
		in, out := &in.Key, &out.Key
		*out = new(string)
		**out = **in
	}
	if in.Value != nil {
		in, out := &in.Value, &out.Value
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new NodeAttachTaintsInitParameters.
func (in *NodeAttachTaintsInitParameters) DeepCopy() *NodeAttachTaintsInitParameters {
	if in == nil {
		return nil
	}
	out := new(NodeAttachTaintsInitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *NodeAttachTaintsObservation) DeepCopyInto(out *NodeAttachTaintsObservation) {
	*out = *in
	if in.Effect != nil {
		in, out := &in.Effect, &out.Effect
		*out = new(string)
		**out = **in
	}
	if in.Key != nil {
		in, out := &in.Key, &out.Key
		*out = new(string)
		**out = **in
	}
	if in.Value != nil {
		in, out := &in.Value, &out.Value
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new NodeAttachTaintsObservation.
func (in *NodeAttachTaintsObservation) DeepCopy() *NodeAttachTaintsObservation {
	if in == nil {
		return nil
	}
	out := new(NodeAttachTaintsObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *NodeAttachTaintsParameters) DeepCopyInto(out *NodeAttachTaintsParameters) {
	*out = *in
	if in.Effect != nil {
		in, out := &in.Effect, &out.Effect
		*out = new(string)
		**out = **in
	}
	if in.Key != nil {
		in, out := &in.Key, &out.Key
		*out = new(string)
		**out = **in
	}
	if in.Value != nil {
		in, out := &in.Value, &out.Value
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new NodeAttachTaintsParameters.
func (in *NodeAttachTaintsParameters) DeepCopy() *NodeAttachTaintsParameters {
	if in == nil {
		return nil
	}
	out := new(NodeAttachTaintsParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *NodeExtendParamsInitParameters) DeepCopyInto(out *NodeExtendParamsInitParameters) {
	*out = *in
	if in.AgencyName != nil {
		in, out := &in.AgencyName, &out.AgencyName
		*out = new(string)
		**out = **in
	}
	if in.DockerBaseSize != nil {
		in, out := &in.DockerBaseSize, &out.DockerBaseSize
		*out = new(float64)
		**out = **in
	}
	if in.KubeReservedMem != nil {
		in, out := &in.KubeReservedMem, &out.KubeReservedMem
		*out = new(float64)
		**out = **in
	}
	if in.MarketType != nil {
		in, out := &in.MarketType, &out.MarketType
		*out = new(string)
		**out = **in
	}
	if in.MaxPods != nil {
		in, out := &in.MaxPods, &out.MaxPods
		*out = new(float64)
		**out = **in
	}
	if in.NicThreshold != nil {
		in, out := &in.NicThreshold, &out.NicThreshold
		*out = new(string)
		**out = **in
	}
	if in.NodeImageID != nil {
		in, out := &in.NodeImageID, &out.NodeImageID
		*out = new(string)
		**out = **in
	}
	if in.NodeMultiQueue != nil {
		in, out := &in.NodeMultiQueue, &out.NodeMultiQueue
		*out = new(string)
		**out = **in
	}
	if in.Postinstall != nil {
		in, out := &in.Postinstall, &out.Postinstall
		*out = new(string)
		**out = **in
	}
	if in.Preinstall != nil {
		in, out := &in.Preinstall, &out.Preinstall
		*out = new(string)
		**out = **in
	}
	if in.SpotPrice != nil {
		in, out := &in.SpotPrice, &out.SpotPrice
		*out = new(string)
		**out = **in
	}
	if in.SystemReservedMem != nil {
		in, out := &in.SystemReservedMem, &out.SystemReservedMem
		*out = new(float64)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new NodeExtendParamsInitParameters.
func (in *NodeExtendParamsInitParameters) DeepCopy() *NodeExtendParamsInitParameters {
	if in == nil {
		return nil
	}
	out := new(NodeExtendParamsInitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *NodeExtendParamsObservation) DeepCopyInto(out *NodeExtendParamsObservation) {
	*out = *in
	if in.AgencyName != nil {
		in, out := &in.AgencyName, &out.AgencyName
		*out = new(string)
		**out = **in
	}
	if in.DockerBaseSize != nil {
		in, out := &in.DockerBaseSize, &out.DockerBaseSize
		*out = new(float64)
		**out = **in
	}
	if in.KubeReservedMem != nil {
		in, out := &in.KubeReservedMem, &out.KubeReservedMem
		*out = new(float64)
		**out = **in
	}
	if in.MarketType != nil {
		in, out := &in.MarketType, &out.MarketType
		*out = new(string)
		**out = **in
	}
	if in.MaxPods != nil {
		in, out := &in.MaxPods, &out.MaxPods
		*out = new(float64)
		**out = **in
	}
	if in.NicThreshold != nil {
		in, out := &in.NicThreshold, &out.NicThreshold
		*out = new(string)
		**out = **in
	}
	if in.NodeImageID != nil {
		in, out := &in.NodeImageID, &out.NodeImageID
		*out = new(string)
		**out = **in
	}
	if in.NodeMultiQueue != nil {
		in, out := &in.NodeMultiQueue, &out.NodeMultiQueue
		*out = new(string)
		**out = **in
	}
	if in.Postinstall != nil {
		in, out := &in.Postinstall, &out.Postinstall
		*out = new(string)
		**out = **in
	}
	if in.Preinstall != nil {
		in, out := &in.Preinstall, &out.Preinstall
		*out = new(string)
		**out = **in
	}
	if in.SpotPrice != nil {
		in, out := &in.SpotPrice, &out.SpotPrice
		*out = new(string)
		**out = **in
	}
	if in.SystemReservedMem != nil {
		in, out := &in.SystemReservedMem, &out.SystemReservedMem
		*out = new(float64)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new NodeExtendParamsObservation.
func (in *NodeExtendParamsObservation) DeepCopy() *NodeExtendParamsObservation {
	if in == nil {
		return nil
	}
	out := new(NodeExtendParamsObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *NodeExtendParamsParameters) DeepCopyInto(out *NodeExtendParamsParameters) {
	*out = *in
	if in.AgencyName != nil {
		in, out := &in.AgencyName, &out.AgencyName
		*out = new(string)
		**out = **in
	}
	if in.DockerBaseSize != nil {
		in, out := &in.DockerBaseSize, &out.DockerBaseSize
		*out = new(float64)
		**out = **in
	}
	if in.KubeReservedMem != nil {
		in, out := &in.KubeReservedMem, &out.KubeReservedMem
		*out = new(float64)
		**out = **in
	}
	if in.MarketType != nil {
		in, out := &in.MarketType, &out.MarketType
		*out = new(string)
		**out = **in
	}
	if in.MaxPods != nil {
		in, out := &in.MaxPods, &out.MaxPods
		*out = new(float64)
		**out = **in
	}
	if in.NicThreshold != nil {
		in, out := &in.NicThreshold, &out.NicThreshold
		*out = new(string)
		**out = **in
	}
	if in.NodeImageID != nil {
		in, out := &in.NodeImageID, &out.NodeImageID
		*out = new(string)
		**out = **in
	}
	if in.NodeMultiQueue != nil {
		in, out := &in.NodeMultiQueue, &out.NodeMultiQueue
		*out = new(string)
		**out = **in
	}
	if in.Postinstall != nil {
		in, out := &in.Postinstall, &out.Postinstall
		*out = new(string)
		**out = **in
	}
	if in.Preinstall != nil {
		in, out := &in.Preinstall, &out.Preinstall
		*out = new(string)
		**out = **in
	}
	if in.SpotPrice != nil {
		in, out := &in.SpotPrice, &out.SpotPrice
		*out = new(string)
		**out = **in
	}
	if in.SystemReservedMem != nil {
		in, out := &in.SystemReservedMem, &out.SystemReservedMem
		*out = new(float64)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new NodeExtendParamsParameters.
func (in *NodeExtendParamsParameters) DeepCopy() *NodeExtendParamsParameters {
	if in == nil {
		return nil
	}
	out := new(NodeExtendParamsParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *NodeInitParameters) DeepCopyInto(out *NodeInitParameters) {
	*out = *in
	if in.Annotations != nil {
		in, out := &in.Annotations, &out.Annotations
		*out = make(map[string]*string, len(*in))
		for key, val := range *in {
			var outVal *string
			if val == nil {
				(*out)[key] = nil
			} else {
				inVal := (*in)[key]
				in, out := &inVal, &outVal
				*out = new(string)
				**out = **in
			}
			(*out)[key] = outVal
		}
	}
	if in.AutoPay != nil {
		in, out := &in.AutoPay, &out.AutoPay
		*out = new(string)
		**out = **in
	}
	if in.AutoRenew != nil {
		in, out := &in.AutoRenew, &out.AutoRenew
		*out = new(string)
		**out = **in
	}
	if in.AvailabilityZone != nil {
		in, out := &in.AvailabilityZone, &out.AvailabilityZone
		*out = new(string)
		**out = **in
	}
	if in.BandwidthChargeMode != nil {
		in, out := &in.BandwidthChargeMode, &out.BandwidthChargeMode
		*out = new(string)
		**out = **in
	}
	if in.BandwidthSize != nil {
		in, out := &in.BandwidthSize, &out.BandwidthSize
		*out = new(float64)
		**out = **in
	}
	if in.BillingMode != nil {
		in, out := &in.BillingMode, &out.BillingMode
		*out = new(float64)
		**out = **in
	}
	if in.ChargingMode != nil {
		in, out := &in.ChargingMode, &out.ChargingMode
		*out = new(string)
		**out = **in
	}
	if in.ClusterID != nil {
		in, out := &in.ClusterID, &out.ClusterID
		*out = new(string)
		**out = **in
	}
	if in.ClusterIDRef != nil {
		in, out := &in.ClusterIDRef, &out.ClusterIDRef
		*out = new(v1.Reference)
		(*in).DeepCopyInto(*out)
	}
	if in.ClusterIDSelector != nil {
		in, out := &in.ClusterIDSelector, &out.ClusterIDSelector
		*out = new(v1.Selector)
		(*in).DeepCopyInto(*out)
	}
	if in.DataVolumes != nil {
		in, out := &in.DataVolumes, &out.DataVolumes
		*out = make([]DataVolumesInitParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.DedicatedHostID != nil {
		in, out := &in.DedicatedHostID, &out.DedicatedHostID
		*out = new(string)
		**out = **in
	}
	if in.EIPID != nil {
		in, out := &in.EIPID, &out.EIPID
		*out = new(string)
		**out = **in
	}
	if in.EIPIDRef != nil {
		in, out := &in.EIPIDRef, &out.EIPIDRef
		*out = new(v1.Reference)
		(*in).DeepCopyInto(*out)
	}
	if in.EIPIDSelector != nil {
		in, out := &in.EIPIDSelector, &out.EIPIDSelector
		*out = new(v1.Selector)
		(*in).DeepCopyInto(*out)
	}
	if in.EIPIds != nil {
		in, out := &in.EIPIds, &out.EIPIds
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.EcsGroupID != nil {
		in, out := &in.EcsGroupID, &out.EcsGroupID
		*out = new(string)
		**out = **in
	}
	if in.EcsGroupIDRef != nil {
		in, out := &in.EcsGroupIDRef, &out.EcsGroupIDRef
		*out = new(v1.Reference)
		(*in).DeepCopyInto(*out)
	}
	if in.EcsGroupIDSelector != nil {
		in, out := &in.EcsGroupIDSelector, &out.EcsGroupIDSelector
		*out = new(v1.Selector)
		(*in).DeepCopyInto(*out)
	}
	if in.EcsPerformanceType != nil {
		in, out := &in.EcsPerformanceType, &out.EcsPerformanceType
		*out = new(string)
		**out = **in
	}
	if in.EnterpriseProjectID != nil {
		in, out := &in.EnterpriseProjectID, &out.EnterpriseProjectID
		*out = new(string)
		**out = **in
	}
	if in.ExtendParam != nil {
		in, out := &in.ExtendParam, &out.ExtendParam
		*out = make(map[string]*string, len(*in))
		for key, val := range *in {
			var outVal *string
			if val == nil {
				(*out)[key] = nil
			} else {
				inVal := (*in)[key]
				in, out := &inVal, &outVal
				*out = new(string)
				**out = **in
			}
			(*out)[key] = outVal
		}
	}
	if in.ExtendParamChargingMode != nil {
		in, out := &in.ExtendParamChargingMode, &out.ExtendParamChargingMode
		*out = new(float64)
		**out = **in
	}
	if in.ExtendParams != nil {
		in, out := &in.ExtendParams, &out.ExtendParams
		*out = make([]NodeExtendParamsInitParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.ExtensionNics != nil {
		in, out := &in.ExtensionNics, &out.ExtensionNics
		*out = make([]ExtensionNicsInitParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.FixedIP != nil {
		in, out := &in.FixedIP, &out.FixedIP
		*out = new(string)
		**out = **in
	}
	if in.FlavorID != nil {
		in, out := &in.FlavorID, &out.FlavorID
		*out = new(string)
		**out = **in
	}
	if in.HostnameConfig != nil {
		in, out := &in.HostnameConfig, &out.HostnameConfig
		*out = make([]HostnameConfigInitParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.InitializedConditions != nil {
		in, out := &in.InitializedConditions, &out.InitializedConditions
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.Iptype != nil {
		in, out := &in.Iptype, &out.Iptype
		*out = new(string)
		**out = **in
	}
	if in.KeepEcs != nil {
		in, out := &in.KeepEcs, &out.KeepEcs
		*out = new(bool)
		**out = **in
	}
	if in.KeyPair != nil {
		in, out := &in.KeyPair, &out.KeyPair
		*out = new(string)
		**out = **in
	}
	if in.Labels != nil {
		in, out := &in.Labels, &out.Labels
		*out = make(map[string]*string, len(*in))
		for key, val := range *in {
			var outVal *string
			if val == nil {
				(*out)[key] = nil
			} else {
				inVal := (*in)[key]
				in, out := &inVal, &outVal
				*out = new(string)
				**out = **in
			}
			(*out)[key] = outVal
		}
	}
	if in.MaxPods != nil {
		in, out := &in.MaxPods, &out.MaxPods
		*out = new(float64)
		**out = **in
	}
	if in.Name != nil {
		in, out := &in.Name, &out.Name
		*out = new(string)
		**out = **in
	}
	if in.OrderID != nil {
		in, out := &in.OrderID, &out.OrderID
		*out = new(string)
		**out = **in
	}
	if in.Os != nil {
		in, out := &in.Os, &out.Os
		*out = new(string)
		**out = **in
	}
	if in.Partition != nil {
		in, out := &in.Partition, &out.Partition
		*out = new(string)
		**out = **in
	}
	if in.PasswordSecretRef != nil {
		in, out := &in.PasswordSecretRef, &out.PasswordSecretRef
		*out = new(v1.SecretKeySelector)
		**out = **in
	}
	if in.Period != nil {
		in, out := &in.Period, &out.Period
		*out = new(float64)
		**out = **in
	}
	if in.PeriodUnit != nil {
		in, out := &in.PeriodUnit, &out.PeriodUnit
		*out = new(string)
		**out = **in
	}
	if in.Postinstall != nil {
		in, out := &in.Postinstall, &out.Postinstall
		*out = new(string)
		**out = **in
	}
	if in.Preinstall != nil {
		in, out := &in.Preinstall, &out.Preinstall
		*out = new(string)
		**out = **in
	}
	if in.PrivateKeySecretRef != nil {
		in, out := &in.PrivateKeySecretRef, &out.PrivateKeySecretRef
		*out = new(v1.SecretKeySelector)
		**out = **in
	}
	if in.ProductID != nil {
		in, out := &in.ProductID, &out.ProductID
		*out = new(string)
		**out = **in
	}
	if in.PublicKey != nil {
		in, out := &in.PublicKey, &out.PublicKey
		*out = new(string)
		**out = **in
	}
	if in.Region != nil {
		in, out := &in.Region, &out.Region
		*out = new(string)
		**out = **in
	}
	if in.RootVolume != nil {
		in, out := &in.RootVolume, &out.RootVolume
		*out = make([]RootVolumeInitParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.Runtime != nil {
		in, out := &in.Runtime, &out.Runtime
		*out = new(string)
		**out = **in
	}
	if in.Sharetype != nil {
		in, out := &in.Sharetype, &out.Sharetype
		*out = new(string)
		**out = **in
	}
	if in.Storage != nil {
		in, out := &in.Storage, &out.Storage
		*out = make([]StorageInitParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.SubnetID != nil {
		in, out := &in.SubnetID, &out.SubnetID
		*out = new(string)
		**out = **in
	}
	if in.SubnetIDRef != nil {
		in, out := &in.SubnetIDRef, &out.SubnetIDRef
		*out = new(v1.Reference)
		(*in).DeepCopyInto(*out)
	}
	if in.SubnetIDSelector != nil {
		in, out := &in.SubnetIDSelector, &out.SubnetIDSelector
		*out = new(v1.Selector)
		(*in).DeepCopyInto(*out)
	}
	if in.Tags != nil {
		in, out := &in.Tags, &out.Tags
		*out = make(map[string]*string, len(*in))
		for key, val := range *in {
			var outVal *string
			if val == nil {
				(*out)[key] = nil
			} else {
				inVal := (*in)[key]
				in, out := &inVal, &outVal
				*out = new(string)
				**out = **in
			}
			(*out)[key] = outVal
		}
	}
	if in.Taints != nil {
		in, out := &in.Taints, &out.Taints
		*out = make([]TaintsInitParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new NodeInitParameters.
func (in *NodeInitParameters) DeepCopy() *NodeInitParameters {
	if in == nil {
		return nil
	}
	out := new(NodeInitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *NodeList) DeepCopyInto(out *NodeList) {
	*out = *in
	out.TypeMeta = in.TypeMeta
	in.ListMeta.DeepCopyInto(&out.ListMeta)
	if in.Items != nil {
		in, out := &in.Items, &out.Items
		*out = make([]Node, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new NodeList.
func (in *NodeList) DeepCopy() *NodeList {
	if in == nil {
		return nil
	}
	out := new(NodeList)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyObject is an autogenerated deepcopy function, copying the receiver, creating a new runtime.Object.
func (in *NodeList) DeepCopyObject() runtime.Object {
	if c := in.DeepCopy(); c != nil {
		return c
	}
	return nil
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *NodeListInitParameters) DeepCopyInto(out *NodeListInitParameters) {
	*out = *in
	if in.ServerID != nil {
		in, out := &in.ServerID, &out.ServerID
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new NodeListInitParameters.
func (in *NodeListInitParameters) DeepCopy() *NodeListInitParameters {
	if in == nil {
		return nil
	}
	out := new(NodeListInitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *NodeListObservation) DeepCopyInto(out *NodeListObservation) {
	*out = *in
	if in.ServerID != nil {
		in, out := &in.ServerID, &out.ServerID
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new NodeListObservation.
func (in *NodeListObservation) DeepCopy() *NodeListObservation {
	if in == nil {
		return nil
	}
	out := new(NodeListObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *NodeListParameters) DeepCopyInto(out *NodeListParameters) {
	*out = *in
	if in.ServerID != nil {
		in, out := &in.ServerID, &out.ServerID
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new NodeListParameters.
func (in *NodeListParameters) DeepCopy() *NodeListParameters {
	if in == nil {
		return nil
	}
	out := new(NodeListParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *NodeObservation) DeepCopyInto(out *NodeObservation) {
	*out = *in
	if in.Annotations != nil {
		in, out := &in.Annotations, &out.Annotations
		*out = make(map[string]*string, len(*in))
		for key, val := range *in {
			var outVal *string
			if val == nil {
				(*out)[key] = nil
			} else {
				inVal := (*in)[key]
				in, out := &inVal, &outVal
				*out = new(string)
				**out = **in
			}
			(*out)[key] = outVal
		}
	}
	if in.AutoPay != nil {
		in, out := &in.AutoPay, &out.AutoPay
		*out = new(string)
		**out = **in
	}
	if in.AutoRenew != nil {
		in, out := &in.AutoRenew, &out.AutoRenew
		*out = new(string)
		**out = **in
	}
	if in.AvailabilityZone != nil {
		in, out := &in.AvailabilityZone, &out.AvailabilityZone
		*out = new(string)
		**out = **in
	}
	if in.BandwidthChargeMode != nil {
		in, out := &in.BandwidthChargeMode, &out.BandwidthChargeMode
		*out = new(string)
		**out = **in
	}
	if in.BandwidthSize != nil {
		in, out := &in.BandwidthSize, &out.BandwidthSize
		*out = new(float64)
		**out = **in
	}
	if in.BillingMode != nil {
		in, out := &in.BillingMode, &out.BillingMode
		*out = new(float64)
		**out = **in
	}
	if in.ChargingMode != nil {
		in, out := &in.ChargingMode, &out.ChargingMode
		*out = new(string)
		**out = **in
	}
	if in.ClusterID != nil {
		in, out := &in.ClusterID, &out.ClusterID
		*out = new(string)
		**out = **in
	}
	if in.DataVolumes != nil {
		in, out := &in.DataVolumes, &out.DataVolumes
		*out = make([]DataVolumesObservation, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.DedicatedHostID != nil {
		in, out := &in.DedicatedHostID, &out.DedicatedHostID
		*out = new(string)
		**out = **in
	}
	if in.EIPID != nil {
		in, out := &in.EIPID, &out.EIPID
		*out = new(string)
		**out = **in
	}
	if in.EIPIds != nil {
		in, out := &in.EIPIds, &out.EIPIds
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.EcsGroupID != nil {
		in, out := &in.EcsGroupID, &out.EcsGroupID
		*out = new(string)
		**out = **in
	}
	if in.EcsPerformanceType != nil {
		in, out := &in.EcsPerformanceType, &out.EcsPerformanceType
		*out = new(string)
		**out = **in
	}
	if in.EnterpriseProjectID != nil {
		in, out := &in.EnterpriseProjectID, &out.EnterpriseProjectID
		*out = new(string)
		**out = **in
	}
	if in.ExtendParam != nil {
		in, out := &in.ExtendParam, &out.ExtendParam
		*out = make(map[string]*string, len(*in))
		for key, val := range *in {
			var outVal *string
			if val == nil {
				(*out)[key] = nil
			} else {
				inVal := (*in)[key]
				in, out := &inVal, &outVal
				*out = new(string)
				**out = **in
			}
			(*out)[key] = outVal
		}
	}
	if in.ExtendParamChargingMode != nil {
		in, out := &in.ExtendParamChargingMode, &out.ExtendParamChargingMode
		*out = new(float64)
		**out = **in
	}
	if in.ExtendParams != nil {
		in, out := &in.ExtendParams, &out.ExtendParams
		*out = make([]NodeExtendParamsObservation, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.ExtensionNics != nil {
		in, out := &in.ExtensionNics, &out.ExtensionNics
		*out = make([]ExtensionNicsObservation, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.FixedIP != nil {
		in, out := &in.FixedIP, &out.FixedIP
		*out = new(string)
		**out = **in
	}
	if in.FlavorID != nil {
		in, out := &in.FlavorID, &out.FlavorID
		*out = new(string)
		**out = **in
	}
	if in.HostnameConfig != nil {
		in, out := &in.HostnameConfig, &out.HostnameConfig
		*out = make([]HostnameConfigObservation, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.ID != nil {
		in, out := &in.ID, &out.ID
		*out = new(string)
		**out = **in
	}
	if in.InitializedConditions != nil {
		in, out := &in.InitializedConditions, &out.InitializedConditions
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.Iptype != nil {
		in, out := &in.Iptype, &out.Iptype
		*out = new(string)
		**out = **in
	}
	if in.KeepEcs != nil {
		in, out := &in.KeepEcs, &out.KeepEcs
		*out = new(bool)
		**out = **in
	}
	if in.KeyPair != nil {
		in, out := &in.KeyPair, &out.KeyPair
		*out = new(string)
		**out = **in
	}
	if in.Labels != nil {
		in, out := &in.Labels, &out.Labels
		*out = make(map[string]*string, len(*in))
		for key, val := range *in {
			var outVal *string
			if val == nil {
				(*out)[key] = nil
			} else {
				inVal := (*in)[key]
				in, out := &inVal, &outVal
				*out = new(string)
				**out = **in
			}
			(*out)[key] = outVal
		}
	}
	if in.MaxPods != nil {
		in, out := &in.MaxPods, &out.MaxPods
		*out = new(float64)
		**out = **in
	}
	if in.Name != nil {
		in, out := &in.Name, &out.Name
		*out = new(string)
		**out = **in
	}
	if in.OrderID != nil {
		in, out := &in.OrderID, &out.OrderID
		*out = new(string)
		**out = **in
	}
	if in.Os != nil {
		in, out := &in.Os, &out.Os
		*out = new(string)
		**out = **in
	}
	if in.Partition != nil {
		in, out := &in.Partition, &out.Partition
		*out = new(string)
		**out = **in
	}
	if in.Period != nil {
		in, out := &in.Period, &out.Period
		*out = new(float64)
		**out = **in
	}
	if in.PeriodUnit != nil {
		in, out := &in.PeriodUnit, &out.PeriodUnit
		*out = new(string)
		**out = **in
	}
	if in.Postinstall != nil {
		in, out := &in.Postinstall, &out.Postinstall
		*out = new(string)
		**out = **in
	}
	if in.Preinstall != nil {
		in, out := &in.Preinstall, &out.Preinstall
		*out = new(string)
		**out = **in
	}
	if in.PrivateIP != nil {
		in, out := &in.PrivateIP, &out.PrivateIP
		*out = new(string)
		**out = **in
	}
	if in.ProductID != nil {
		in, out := &in.ProductID, &out.ProductID
		*out = new(string)
		**out = **in
	}
	if in.PublicIP != nil {
		in, out := &in.PublicIP, &out.PublicIP
		*out = new(string)
		**out = **in
	}
	if in.PublicKey != nil {
		in, out := &in.PublicKey, &out.PublicKey
		*out = new(string)
		**out = **in
	}
	if in.Region != nil {
		in, out := &in.Region, &out.Region
		*out = new(string)
		**out = **in
	}
	if in.RootVolume != nil {
		in, out := &in.RootVolume, &out.RootVolume
		*out = make([]RootVolumeObservation, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.Runtime != nil {
		in, out := &in.Runtime, &out.Runtime
		*out = new(string)
		**out = **in
	}
	if in.ServerID != nil {
		in, out := &in.ServerID, &out.ServerID
		*out = new(string)
		**out = **in
	}
	if in.Sharetype != nil {
		in, out := &in.Sharetype, &out.Sharetype
		*out = new(string)
		**out = **in
	}
	if in.Status != nil {
		in, out := &in.Status, &out.Status
		*out = new(string)
		**out = **in
	}
	if in.Storage != nil {
		in, out := &in.Storage, &out.Storage
		*out = make([]StorageObservation, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.SubnetID != nil {
		in, out := &in.SubnetID, &out.SubnetID
		*out = new(string)
		**out = **in
	}
	if in.Tags != nil {
		in, out := &in.Tags, &out.Tags
		*out = make(map[string]*string, len(*in))
		for key, val := range *in {
			var outVal *string
			if val == nil {
				(*out)[key] = nil
			} else {
				inVal := (*in)[key]
				in, out := &inVal, &outVal
				*out = new(string)
				**out = **in
			}
			(*out)[key] = outVal
		}
	}
	if in.Taints != nil {
		in, out := &in.Taints, &out.Taints
		*out = make([]TaintsObservation, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new NodeObservation.
func (in *NodeObservation) DeepCopy() *NodeObservation {
	if in == nil {
		return nil
	}
	out := new(NodeObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *NodeParameters) DeepCopyInto(out *NodeParameters) {
	*out = *in
	if in.Annotations != nil {
		in, out := &in.Annotations, &out.Annotations
		*out = make(map[string]*string, len(*in))
		for key, val := range *in {
			var outVal *string
			if val == nil {
				(*out)[key] = nil
			} else {
				inVal := (*in)[key]
				in, out := &inVal, &outVal
				*out = new(string)
				**out = **in
			}
			(*out)[key] = outVal
		}
	}
	if in.AutoPay != nil {
		in, out := &in.AutoPay, &out.AutoPay
		*out = new(string)
		**out = **in
	}
	if in.AutoRenew != nil {
		in, out := &in.AutoRenew, &out.AutoRenew
		*out = new(string)
		**out = **in
	}
	if in.AvailabilityZone != nil {
		in, out := &in.AvailabilityZone, &out.AvailabilityZone
		*out = new(string)
		**out = **in
	}
	if in.BandwidthChargeMode != nil {
		in, out := &in.BandwidthChargeMode, &out.BandwidthChargeMode
		*out = new(string)
		**out = **in
	}
	if in.BandwidthSize != nil {
		in, out := &in.BandwidthSize, &out.BandwidthSize
		*out = new(float64)
		**out = **in
	}
	if in.BillingMode != nil {
		in, out := &in.BillingMode, &out.BillingMode
		*out = new(float64)
		**out = **in
	}
	if in.ChargingMode != nil {
		in, out := &in.ChargingMode, &out.ChargingMode
		*out = new(string)
		**out = **in
	}
	if in.ClusterID != nil {
		in, out := &in.ClusterID, &out.ClusterID
		*out = new(string)
		**out = **in
	}
	if in.ClusterIDRef != nil {
		in, out := &in.ClusterIDRef, &out.ClusterIDRef
		*out = new(v1.Reference)
		(*in).DeepCopyInto(*out)
	}
	if in.ClusterIDSelector != nil {
		in, out := &in.ClusterIDSelector, &out.ClusterIDSelector
		*out = new(v1.Selector)
		(*in).DeepCopyInto(*out)
	}
	if in.DataVolumes != nil {
		in, out := &in.DataVolumes, &out.DataVolumes
		*out = make([]DataVolumesParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.DedicatedHostID != nil {
		in, out := &in.DedicatedHostID, &out.DedicatedHostID
		*out = new(string)
		**out = **in
	}
	if in.EIPID != nil {
		in, out := &in.EIPID, &out.EIPID
		*out = new(string)
		**out = **in
	}
	if in.EIPIDRef != nil {
		in, out := &in.EIPIDRef, &out.EIPIDRef
		*out = new(v1.Reference)
		(*in).DeepCopyInto(*out)
	}
	if in.EIPIDSelector != nil {
		in, out := &in.EIPIDSelector, &out.EIPIDSelector
		*out = new(v1.Selector)
		(*in).DeepCopyInto(*out)
	}
	if in.EIPIds != nil {
		in, out := &in.EIPIds, &out.EIPIds
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.EcsGroupID != nil {
		in, out := &in.EcsGroupID, &out.EcsGroupID
		*out = new(string)
		**out = **in
	}
	if in.EcsGroupIDRef != nil {
		in, out := &in.EcsGroupIDRef, &out.EcsGroupIDRef
		*out = new(v1.Reference)
		(*in).DeepCopyInto(*out)
	}
	if in.EcsGroupIDSelector != nil {
		in, out := &in.EcsGroupIDSelector, &out.EcsGroupIDSelector
		*out = new(v1.Selector)
		(*in).DeepCopyInto(*out)
	}
	if in.EcsPerformanceType != nil {
		in, out := &in.EcsPerformanceType, &out.EcsPerformanceType
		*out = new(string)
		**out = **in
	}
	if in.EnterpriseProjectID != nil {
		in, out := &in.EnterpriseProjectID, &out.EnterpriseProjectID
		*out = new(string)
		**out = **in
	}
	if in.ExtendParam != nil {
		in, out := &in.ExtendParam, &out.ExtendParam
		*out = make(map[string]*string, len(*in))
		for key, val := range *in {
			var outVal *string
			if val == nil {
				(*out)[key] = nil
			} else {
				inVal := (*in)[key]
				in, out := &inVal, &outVal
				*out = new(string)
				**out = **in
			}
			(*out)[key] = outVal
		}
	}
	if in.ExtendParamChargingMode != nil {
		in, out := &in.ExtendParamChargingMode, &out.ExtendParamChargingMode
		*out = new(float64)
		**out = **in
	}
	if in.ExtendParams != nil {
		in, out := &in.ExtendParams, &out.ExtendParams
		*out = make([]NodeExtendParamsParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.ExtensionNics != nil {
		in, out := &in.ExtensionNics, &out.ExtensionNics
		*out = make([]ExtensionNicsParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.FixedIP != nil {
		in, out := &in.FixedIP, &out.FixedIP
		*out = new(string)
		**out = **in
	}
	if in.FlavorID != nil {
		in, out := &in.FlavorID, &out.FlavorID
		*out = new(string)
		**out = **in
	}
	if in.HostnameConfig != nil {
		in, out := &in.HostnameConfig, &out.HostnameConfig
		*out = make([]HostnameConfigParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.InitializedConditions != nil {
		in, out := &in.InitializedConditions, &out.InitializedConditions
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.Iptype != nil {
		in, out := &in.Iptype, &out.Iptype
		*out = new(string)
		**out = **in
	}
	if in.KeepEcs != nil {
		in, out := &in.KeepEcs, &out.KeepEcs
		*out = new(bool)
		**out = **in
	}
	if in.KeyPair != nil {
		in, out := &in.KeyPair, &out.KeyPair
		*out = new(string)
		**out = **in
	}
	if in.Labels != nil {
		in, out := &in.Labels, &out.Labels
		*out = make(map[string]*string, len(*in))
		for key, val := range *in {
			var outVal *string
			if val == nil {
				(*out)[key] = nil
			} else {
				inVal := (*in)[key]
				in, out := &inVal, &outVal
				*out = new(string)
				**out = **in
			}
			(*out)[key] = outVal
		}
	}
	if in.MaxPods != nil {
		in, out := &in.MaxPods, &out.MaxPods
		*out = new(float64)
		**out = **in
	}
	if in.Name != nil {
		in, out := &in.Name, &out.Name
		*out = new(string)
		**out = **in
	}
	if in.OrderID != nil {
		in, out := &in.OrderID, &out.OrderID
		*out = new(string)
		**out = **in
	}
	if in.Os != nil {
		in, out := &in.Os, &out.Os
		*out = new(string)
		**out = **in
	}
	if in.Partition != nil {
		in, out := &in.Partition, &out.Partition
		*out = new(string)
		**out = **in
	}
	if in.PasswordSecretRef != nil {
		in, out := &in.PasswordSecretRef, &out.PasswordSecretRef
		*out = new(v1.SecretKeySelector)
		**out = **in
	}
	if in.Period != nil {
		in, out := &in.Period, &out.Period
		*out = new(float64)
		**out = **in
	}
	if in.PeriodUnit != nil {
		in, out := &in.PeriodUnit, &out.PeriodUnit
		*out = new(string)
		**out = **in
	}
	if in.Postinstall != nil {
		in, out := &in.Postinstall, &out.Postinstall
		*out = new(string)
		**out = **in
	}
	if in.Preinstall != nil {
		in, out := &in.Preinstall, &out.Preinstall
		*out = new(string)
		**out = **in
	}
	if in.PrivateKeySecretRef != nil {
		in, out := &in.PrivateKeySecretRef, &out.PrivateKeySecretRef
		*out = new(v1.SecretKeySelector)
		**out = **in
	}
	if in.ProductID != nil {
		in, out := &in.ProductID, &out.ProductID
		*out = new(string)
		**out = **in
	}
	if in.PublicKey != nil {
		in, out := &in.PublicKey, &out.PublicKey
		*out = new(string)
		**out = **in
	}
	if in.Region != nil {
		in, out := &in.Region, &out.Region
		*out = new(string)
		**out = **in
	}
	if in.RootVolume != nil {
		in, out := &in.RootVolume, &out.RootVolume
		*out = make([]RootVolumeParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.Runtime != nil {
		in, out := &in.Runtime, &out.Runtime
		*out = new(string)
		**out = **in
	}
	if in.Sharetype != nil {
		in, out := &in.Sharetype, &out.Sharetype
		*out = new(string)
		**out = **in
	}
	if in.Storage != nil {
		in, out := &in.Storage, &out.Storage
		*out = make([]StorageParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.SubnetID != nil {
		in, out := &in.SubnetID, &out.SubnetID
		*out = new(string)
		**out = **in
	}
	if in.SubnetIDRef != nil {
		in, out := &in.SubnetIDRef, &out.SubnetIDRef
		*out = new(v1.Reference)
		(*in).DeepCopyInto(*out)
	}
	if in.SubnetIDSelector != nil {
		in, out := &in.SubnetIDSelector, &out.SubnetIDSelector
		*out = new(v1.Selector)
		(*in).DeepCopyInto(*out)
	}
	if in.Tags != nil {
		in, out := &in.Tags, &out.Tags
		*out = make(map[string]*string, len(*in))
		for key, val := range *in {
			var outVal *string
			if val == nil {
				(*out)[key] = nil
			} else {
				inVal := (*in)[key]
				in, out := &inVal, &outVal
				*out = new(string)
				**out = **in
			}
			(*out)[key] = outVal
		}
	}
	if in.Taints != nil {
		in, out := &in.Taints, &out.Taints
		*out = make([]TaintsParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new NodeParameters.
func (in *NodeParameters) DeepCopy() *NodeParameters {
	if in == nil {
		return nil
	}
	out := new(NodeParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *NodePool) DeepCopyInto(out *NodePool) {
	*out = *in
	out.TypeMeta = in.TypeMeta
	in.ObjectMeta.DeepCopyInto(&out.ObjectMeta)
	in.Spec.DeepCopyInto(&out.Spec)
	in.Status.DeepCopyInto(&out.Status)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new NodePool.
func (in *NodePool) DeepCopy() *NodePool {
	if in == nil {
		return nil
	}
	out := new(NodePool)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyObject is an autogenerated deepcopy function, copying the receiver, creating a new runtime.Object.
func (in *NodePool) DeepCopyObject() runtime.Object {
	if c := in.DeepCopy(); c != nil {
		return c
	}
	return nil
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *NodePoolDataVolumesInitParameters) DeepCopyInto(out *NodePoolDataVolumesInitParameters) {
	*out = *in
	if in.DssPoolID != nil {
		in, out := &in.DssPoolID, &out.DssPoolID
		*out = new(string)
		**out = **in
	}
	if in.ExtendParam != nil {
		in, out := &in.ExtendParam, &out.ExtendParam
		*out = new(string)
		**out = **in
	}
	if in.ExtendParams != nil {
		in, out := &in.ExtendParams, &out.ExtendParams
		*out = make(map[string]*string, len(*in))
		for key, val := range *in {
			var outVal *string
			if val == nil {
				(*out)[key] = nil
			} else {
				inVal := (*in)[key]
				in, out := &inVal, &outVal
				*out = new(string)
				**out = **in
			}
			(*out)[key] = outVal
		}
	}
	if in.HwPassthrough != nil {
		in, out := &in.HwPassthrough, &out.HwPassthrough
		*out = new(bool)
		**out = **in
	}
	if in.KMSKeyID != nil {
		in, out := &in.KMSKeyID, &out.KMSKeyID
		*out = new(string)
		**out = **in
	}
	if in.Size != nil {
		in, out := &in.Size, &out.Size
		*out = new(float64)
		**out = **in
	}
	if in.Volumetype != nil {
		in, out := &in.Volumetype, &out.Volumetype
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new NodePoolDataVolumesInitParameters.
func (in *NodePoolDataVolumesInitParameters) DeepCopy() *NodePoolDataVolumesInitParameters {
	if in == nil {
		return nil
	}
	out := new(NodePoolDataVolumesInitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *NodePoolDataVolumesObservation) DeepCopyInto(out *NodePoolDataVolumesObservation) {
	*out = *in
	if in.DssPoolID != nil {
		in, out := &in.DssPoolID, &out.DssPoolID
		*out = new(string)
		**out = **in
	}
	if in.ExtendParam != nil {
		in, out := &in.ExtendParam, &out.ExtendParam
		*out = new(string)
		**out = **in
	}
	if in.ExtendParams != nil {
		in, out := &in.ExtendParams, &out.ExtendParams
		*out = make(map[string]*string, len(*in))
		for key, val := range *in {
			var outVal *string
			if val == nil {
				(*out)[key] = nil
			} else {
				inVal := (*in)[key]
				in, out := &inVal, &outVal
				*out = new(string)
				**out = **in
			}
			(*out)[key] = outVal
		}
	}
	if in.HwPassthrough != nil {
		in, out := &in.HwPassthrough, &out.HwPassthrough
		*out = new(bool)
		**out = **in
	}
	if in.KMSKeyID != nil {
		in, out := &in.KMSKeyID, &out.KMSKeyID
		*out = new(string)
		**out = **in
	}
	if in.Size != nil {
		in, out := &in.Size, &out.Size
		*out = new(float64)
		**out = **in
	}
	if in.Volumetype != nil {
		in, out := &in.Volumetype, &out.Volumetype
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new NodePoolDataVolumesObservation.
func (in *NodePoolDataVolumesObservation) DeepCopy() *NodePoolDataVolumesObservation {
	if in == nil {
		return nil
	}
	out := new(NodePoolDataVolumesObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *NodePoolDataVolumesParameters) DeepCopyInto(out *NodePoolDataVolumesParameters) {
	*out = *in
	if in.DssPoolID != nil {
		in, out := &in.DssPoolID, &out.DssPoolID
		*out = new(string)
		**out = **in
	}
	if in.ExtendParam != nil {
		in, out := &in.ExtendParam, &out.ExtendParam
		*out = new(string)
		**out = **in
	}
	if in.ExtendParams != nil {
		in, out := &in.ExtendParams, &out.ExtendParams
		*out = make(map[string]*string, len(*in))
		for key, val := range *in {
			var outVal *string
			if val == nil {
				(*out)[key] = nil
			} else {
				inVal := (*in)[key]
				in, out := &inVal, &outVal
				*out = new(string)
				**out = **in
			}
			(*out)[key] = outVal
		}
	}
	if in.HwPassthrough != nil {
		in, out := &in.HwPassthrough, &out.HwPassthrough
		*out = new(bool)
		**out = **in
	}
	if in.KMSKeyID != nil {
		in, out := &in.KMSKeyID, &out.KMSKeyID
		*out = new(string)
		**out = **in
	}
	if in.Size != nil {
		in, out := &in.Size, &out.Size
		*out = new(float64)
		**out = **in
	}
	if in.Volumetype != nil {
		in, out := &in.Volumetype, &out.Volumetype
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new NodePoolDataVolumesParameters.
func (in *NodePoolDataVolumesParameters) DeepCopy() *NodePoolDataVolumesParameters {
	if in == nil {
		return nil
	}
	out := new(NodePoolDataVolumesParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *NodePoolExtendParamsInitParameters) DeepCopyInto(out *NodePoolExtendParamsInitParameters) {
	*out = *in
	if in.AgencyName != nil {
		in, out := &in.AgencyName, &out.AgencyName
		*out = new(string)
		**out = **in
	}
	if in.DockerBaseSize != nil {
		in, out := &in.DockerBaseSize, &out.DockerBaseSize
		*out = new(float64)
		**out = **in
	}
	if in.KubeReservedMem != nil {
		in, out := &in.KubeReservedMem, &out.KubeReservedMem
		*out = new(float64)
		**out = **in
	}
	if in.MarketType != nil {
		in, out := &in.MarketType, &out.MarketType
		*out = new(string)
		**out = **in
	}
	if in.MaxPods != nil {
		in, out := &in.MaxPods, &out.MaxPods
		*out = new(float64)
		**out = **in
	}
	if in.NicThreshold != nil {
		in, out := &in.NicThreshold, &out.NicThreshold
		*out = new(string)
		**out = **in
	}
	if in.NodeImageID != nil {
		in, out := &in.NodeImageID, &out.NodeImageID
		*out = new(string)
		**out = **in
	}
	if in.NodeMultiQueue != nil {
		in, out := &in.NodeMultiQueue, &out.NodeMultiQueue
		*out = new(string)
		**out = **in
	}
	if in.Postinstall != nil {
		in, out := &in.Postinstall, &out.Postinstall
		*out = new(string)
		**out = **in
	}
	if in.Preinstall != nil {
		in, out := &in.Preinstall, &out.Preinstall
		*out = new(string)
		**out = **in
	}
	if in.SpotPrice != nil {
		in, out := &in.SpotPrice, &out.SpotPrice
		*out = new(string)
		**out = **in
	}
	if in.SystemReservedMem != nil {
		in, out := &in.SystemReservedMem, &out.SystemReservedMem
		*out = new(float64)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new NodePoolExtendParamsInitParameters.
func (in *NodePoolExtendParamsInitParameters) DeepCopy() *NodePoolExtendParamsInitParameters {
	if in == nil {
		return nil
	}
	out := new(NodePoolExtendParamsInitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *NodePoolExtendParamsObservation) DeepCopyInto(out *NodePoolExtendParamsObservation) {
	*out = *in
	if in.AgencyName != nil {
		in, out := &in.AgencyName, &out.AgencyName
		*out = new(string)
		**out = **in
	}
	if in.DockerBaseSize != nil {
		in, out := &in.DockerBaseSize, &out.DockerBaseSize
		*out = new(float64)
		**out = **in
	}
	if in.KubeReservedMem != nil {
		in, out := &in.KubeReservedMem, &out.KubeReservedMem
		*out = new(float64)
		**out = **in
	}
	if in.MarketType != nil {
		in, out := &in.MarketType, &out.MarketType
		*out = new(string)
		**out = **in
	}
	if in.MaxPods != nil {
		in, out := &in.MaxPods, &out.MaxPods
		*out = new(float64)
		**out = **in
	}
	if in.NicThreshold != nil {
		in, out := &in.NicThreshold, &out.NicThreshold
		*out = new(string)
		**out = **in
	}
	if in.NodeImageID != nil {
		in, out := &in.NodeImageID, &out.NodeImageID
		*out = new(string)
		**out = **in
	}
	if in.NodeMultiQueue != nil {
		in, out := &in.NodeMultiQueue, &out.NodeMultiQueue
		*out = new(string)
		**out = **in
	}
	if in.Postinstall != nil {
		in, out := &in.Postinstall, &out.Postinstall
		*out = new(string)
		**out = **in
	}
	if in.Preinstall != nil {
		in, out := &in.Preinstall, &out.Preinstall
		*out = new(string)
		**out = **in
	}
	if in.SpotPrice != nil {
		in, out := &in.SpotPrice, &out.SpotPrice
		*out = new(string)
		**out = **in
	}
	if in.SystemReservedMem != nil {
		in, out := &in.SystemReservedMem, &out.SystemReservedMem
		*out = new(float64)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new NodePoolExtendParamsObservation.
func (in *NodePoolExtendParamsObservation) DeepCopy() *NodePoolExtendParamsObservation {
	if in == nil {
		return nil
	}
	out := new(NodePoolExtendParamsObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *NodePoolExtendParamsParameters) DeepCopyInto(out *NodePoolExtendParamsParameters) {
	*out = *in
	if in.AgencyName != nil {
		in, out := &in.AgencyName, &out.AgencyName
		*out = new(string)
		**out = **in
	}
	if in.DockerBaseSize != nil {
		in, out := &in.DockerBaseSize, &out.DockerBaseSize
		*out = new(float64)
		**out = **in
	}
	if in.KubeReservedMem != nil {
		in, out := &in.KubeReservedMem, &out.KubeReservedMem
		*out = new(float64)
		**out = **in
	}
	if in.MarketType != nil {
		in, out := &in.MarketType, &out.MarketType
		*out = new(string)
		**out = **in
	}
	if in.MaxPods != nil {
		in, out := &in.MaxPods, &out.MaxPods
		*out = new(float64)
		**out = **in
	}
	if in.NicThreshold != nil {
		in, out := &in.NicThreshold, &out.NicThreshold
		*out = new(string)
		**out = **in
	}
	if in.NodeImageID != nil {
		in, out := &in.NodeImageID, &out.NodeImageID
		*out = new(string)
		**out = **in
	}
	if in.NodeMultiQueue != nil {
		in, out := &in.NodeMultiQueue, &out.NodeMultiQueue
		*out = new(string)
		**out = **in
	}
	if in.Postinstall != nil {
		in, out := &in.Postinstall, &out.Postinstall
		*out = new(string)
		**out = **in
	}
	if in.Preinstall != nil {
		in, out := &in.Preinstall, &out.Preinstall
		*out = new(string)
		**out = **in
	}
	if in.SpotPrice != nil {
		in, out := &in.SpotPrice, &out.SpotPrice
		*out = new(string)
		**out = **in
	}
	if in.SystemReservedMem != nil {
		in, out := &in.SystemReservedMem, &out.SystemReservedMem
		*out = new(float64)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new NodePoolExtendParamsParameters.
func (in *NodePoolExtendParamsParameters) DeepCopy() *NodePoolExtendParamsParameters {
	if in == nil {
		return nil
	}
	out := new(NodePoolExtendParamsParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *NodePoolHostnameConfigInitParameters) DeepCopyInto(out *NodePoolHostnameConfigInitParameters) {
	*out = *in
	if in.Type != nil {
		in, out := &in.Type, &out.Type
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new NodePoolHostnameConfigInitParameters.
func (in *NodePoolHostnameConfigInitParameters) DeepCopy() *NodePoolHostnameConfigInitParameters {
	if in == nil {
		return nil
	}
	out := new(NodePoolHostnameConfigInitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *NodePoolHostnameConfigObservation) DeepCopyInto(out *NodePoolHostnameConfigObservation) {
	*out = *in
	if in.Type != nil {
		in, out := &in.Type, &out.Type
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new NodePoolHostnameConfigObservation.
func (in *NodePoolHostnameConfigObservation) DeepCopy() *NodePoolHostnameConfigObservation {
	if in == nil {
		return nil
	}
	out := new(NodePoolHostnameConfigObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *NodePoolHostnameConfigParameters) DeepCopyInto(out *NodePoolHostnameConfigParameters) {
	*out = *in
	if in.Type != nil {
		in, out := &in.Type, &out.Type
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new NodePoolHostnameConfigParameters.
func (in *NodePoolHostnameConfigParameters) DeepCopy() *NodePoolHostnameConfigParameters {
	if in == nil {
		return nil
	}
	out := new(NodePoolHostnameConfigParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *NodePoolInitParameters) DeepCopyInto(out *NodePoolInitParameters) {
	*out = *in
	if in.AutoRenew != nil {
		in, out := &in.AutoRenew, &out.AutoRenew
		*out = new(string)
		**out = **in
	}
	if in.AvailabilityZone != nil {
		in, out := &in.AvailabilityZone, &out.AvailabilityZone
		*out = new(string)
		**out = **in
	}
	if in.ChargingMode != nil {
		in, out := &in.ChargingMode, &out.ChargingMode
		*out = new(string)
		**out = **in
	}
	if in.ClusterID != nil {
		in, out := &in.ClusterID, &out.ClusterID
		*out = new(string)
		**out = **in
	}
	if in.ClusterIDRef != nil {
		in, out := &in.ClusterIDRef, &out.ClusterIDRef
		*out = new(v1.Reference)
		(*in).DeepCopyInto(*out)
	}
	if in.ClusterIDSelector != nil {
		in, out := &in.ClusterIDSelector, &out.ClusterIDSelector
		*out = new(v1.Selector)
		(*in).DeepCopyInto(*out)
	}
	if in.DataVolumes != nil {
		in, out := &in.DataVolumes, &out.DataVolumes
		*out = make([]NodePoolDataVolumesInitParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.EcsGroupID != nil {
		in, out := &in.EcsGroupID, &out.EcsGroupID
		*out = new(string)
		**out = **in
	}
	if in.EcsGroupIDRef != nil {
		in, out := &in.EcsGroupIDRef, &out.EcsGroupIDRef
		*out = new(v1.Reference)
		(*in).DeepCopyInto(*out)
	}
	if in.EcsGroupIDSelector != nil {
		in, out := &in.EcsGroupIDSelector, &out.EcsGroupIDSelector
		*out = new(v1.Selector)
		(*in).DeepCopyInto(*out)
	}
	if in.EnterpriseProjectID != nil {
		in, out := &in.EnterpriseProjectID, &out.EnterpriseProjectID
		*out = new(string)
		**out = **in
	}
	if in.ExtendParam != nil {
		in, out := &in.ExtendParam, &out.ExtendParam
		*out = make(map[string]*string, len(*in))
		for key, val := range *in {
			var outVal *string
			if val == nil {
				(*out)[key] = nil
			} else {
				inVal := (*in)[key]
				in, out := &inVal, &outVal
				*out = new(string)
				**out = **in
			}
			(*out)[key] = outVal
		}
	}
	if in.ExtendParams != nil {
		in, out := &in.ExtendParams, &out.ExtendParams
		*out = make([]NodePoolExtendParamsInitParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.ExtensionScaleGroups != nil {
		in, out := &in.ExtensionScaleGroups, &out.ExtensionScaleGroups
		*out = make([]ExtensionScaleGroupsInitParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.FlavorID != nil {
		in, out := &in.FlavorID, &out.FlavorID
		*out = new(string)
		**out = **in
	}
	if in.HostnameConfig != nil {
		in, out := &in.HostnameConfig, &out.HostnameConfig
		*out = make([]NodePoolHostnameConfigInitParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.InitialNodeCount != nil {
		in, out := &in.InitialNodeCount, &out.InitialNodeCount
		*out = new(float64)
		**out = **in
	}
	if in.InitializedConditions != nil {
		in, out := &in.InitializedConditions, &out.InitializedConditions
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.KeyPair != nil {
		in, out := &in.KeyPair, &out.KeyPair
		*out = new(string)
		**out = **in
	}
	if in.LabelPolicyOnExistingNodes != nil {
		in, out := &in.LabelPolicyOnExistingNodes, &out.LabelPolicyOnExistingNodes
		*out = new(string)
		**out = **in
	}
	if in.Labels != nil {
		in, out := &in.Labels, &out.Labels
		*out = make(map[string]*string, len(*in))
		for key, val := range *in {
			var outVal *string
			if val == nil {
				(*out)[key] = nil
			} else {
				inVal := (*in)[key]
				in, out := &inVal, &outVal
				*out = new(string)
				**out = **in
			}
			(*out)[key] = outVal
		}
	}
	if in.MaxNodeCount != nil {
		in, out := &in.MaxNodeCount, &out.MaxNodeCount
		*out = new(float64)
		**out = **in
	}
	if in.MaxPods != nil {
		in, out := &in.MaxPods, &out.MaxPods
		*out = new(float64)
		**out = **in
	}
	if in.MinNodeCount != nil {
		in, out := &in.MinNodeCount, &out.MinNodeCount
		*out = new(float64)
		**out = **in
	}
	if in.Name != nil {
		in, out := &in.Name, &out.Name
		*out = new(string)
		**out = **in
	}
	if in.Os != nil {
		in, out := &in.Os, &out.Os
		*out = new(string)
		**out = **in
	}
	if in.PasswordSecretRef != nil {
		in, out := &in.PasswordSecretRef, &out.PasswordSecretRef
		*out = new(v1.SecretKeySelector)
		**out = **in
	}
	if in.Period != nil {
		in, out := &in.Period, &out.Period
		*out = new(float64)
		**out = **in
	}
	if in.PeriodUnit != nil {
		in, out := &in.PeriodUnit, &out.PeriodUnit
		*out = new(string)
		**out = **in
	}
	if in.PodSecurityGroups != nil {
		in, out := &in.PodSecurityGroups, &out.PodSecurityGroups
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.Postinstall != nil {
		in, out := &in.Postinstall, &out.Postinstall
		*out = new(string)
		**out = **in
	}
	if in.Preinstall != nil {
		in, out := &in.Preinstall, &out.Preinstall
		*out = new(string)
		**out = **in
	}
	if in.Priority != nil {
		in, out := &in.Priority, &out.Priority
		*out = new(float64)
		**out = **in
	}
	if in.Region != nil {
		in, out := &in.Region, &out.Region
		*out = new(string)
		**out = **in
	}
	if in.RootVolume != nil {
		in, out := &in.RootVolume, &out.RootVolume
		*out = make([]NodePoolRootVolumeInitParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.Runtime != nil {
		in, out := &in.Runtime, &out.Runtime
		*out = new(string)
		**out = **in
	}
	if in.ScaleDownCooldownTime != nil {
		in, out := &in.ScaleDownCooldownTime, &out.ScaleDownCooldownTime
		*out = new(float64)
		**out = **in
	}
	if in.ScallEnable != nil {
		in, out := &in.ScallEnable, &out.ScallEnable
		*out = new(bool)
		**out = **in
	}
	if in.SecurityGroups != nil {
		in, out := &in.SecurityGroups, &out.SecurityGroups
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.Storage != nil {
		in, out := &in.Storage, &out.Storage
		*out = make([]NodePoolStorageInitParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.SubnetID != nil {
		in, out := &in.SubnetID, &out.SubnetID
		*out = new(string)
		**out = **in
	}
	if in.SubnetIDRef != nil {
		in, out := &in.SubnetIDRef, &out.SubnetIDRef
		*out = new(v1.Reference)
		(*in).DeepCopyInto(*out)
	}
	if in.SubnetIDSelector != nil {
		in, out := &in.SubnetIDSelector, &out.SubnetIDSelector
		*out = new(v1.Selector)
		(*in).DeepCopyInto(*out)
	}
	if in.TagPolicyOnExistingNodes != nil {
		in, out := &in.TagPolicyOnExistingNodes, &out.TagPolicyOnExistingNodes
		*out = new(string)
		**out = **in
	}
	if in.Tags != nil {
		in, out := &in.Tags, &out.Tags
		*out = make(map[string]*string, len(*in))
		for key, val := range *in {
			var outVal *string
			if val == nil {
				(*out)[key] = nil
			} else {
				inVal := (*in)[key]
				in, out := &inVal, &outVal
				*out = new(string)
				**out = **in
			}
			(*out)[key] = outVal
		}
	}
	if in.TaintPolicyOnExistingNodes != nil {
		in, out := &in.TaintPolicyOnExistingNodes, &out.TaintPolicyOnExistingNodes
		*out = new(string)
		**out = **in
	}
	if in.Taints != nil {
		in, out := &in.Taints, &out.Taints
		*out = make([]NodePoolTaintsInitParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.Type != nil {
		in, out := &in.Type, &out.Type
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new NodePoolInitParameters.
func (in *NodePoolInitParameters) DeepCopy() *NodePoolInitParameters {
	if in == nil {
		return nil
	}
	out := new(NodePoolInitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *NodePoolList) DeepCopyInto(out *NodePoolList) {
	*out = *in
	out.TypeMeta = in.TypeMeta
	in.ListMeta.DeepCopyInto(&out.ListMeta)
	if in.Items != nil {
		in, out := &in.Items, &out.Items
		*out = make([]NodePool, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new NodePoolList.
func (in *NodePoolList) DeepCopy() *NodePoolList {
	if in == nil {
		return nil
	}
	out := new(NodePoolList)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyObject is an autogenerated deepcopy function, copying the receiver, creating a new runtime.Object.
func (in *NodePoolList) DeepCopyObject() runtime.Object {
	if c := in.DeepCopy(); c != nil {
		return c
	}
	return nil
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *NodePoolNodesAdd) DeepCopyInto(out *NodePoolNodesAdd) {
	*out = *in
	out.TypeMeta = in.TypeMeta
	in.ObjectMeta.DeepCopyInto(&out.ObjectMeta)
	in.Spec.DeepCopyInto(&out.Spec)
	in.Status.DeepCopyInto(&out.Status)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new NodePoolNodesAdd.
func (in *NodePoolNodesAdd) DeepCopy() *NodePoolNodesAdd {
	if in == nil {
		return nil
	}
	out := new(NodePoolNodesAdd)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyObject is an autogenerated deepcopy function, copying the receiver, creating a new runtime.Object.
func (in *NodePoolNodesAdd) DeepCopyObject() runtime.Object {
	if c := in.DeepCopy(); c != nil {
		return c
	}
	return nil
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *NodePoolNodesAddInitParameters) DeepCopyInto(out *NodePoolNodesAddInitParameters) {
	*out = *in
	if in.ClusterID != nil {
		in, out := &in.ClusterID, &out.ClusterID
		*out = new(string)
		**out = **in
	}
	if in.ClusterIDRef != nil {
		in, out := &in.ClusterIDRef, &out.ClusterIDRef
		*out = new(v1.Reference)
		(*in).DeepCopyInto(*out)
	}
	if in.ClusterIDSelector != nil {
		in, out := &in.ClusterIDSelector, &out.ClusterIDSelector
		*out = new(v1.Selector)
		(*in).DeepCopyInto(*out)
	}
	if in.EnableForceNew != nil {
		in, out := &in.EnableForceNew, &out.EnableForceNew
		*out = new(string)
		**out = **in
	}
	if in.NodeList != nil {
		in, out := &in.NodeList, &out.NodeList
		*out = make([]NodeListInitParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.NodepoolID != nil {
		in, out := &in.NodepoolID, &out.NodepoolID
		*out = new(string)
		**out = **in
	}
	if in.NodepoolIDRef != nil {
		in, out := &in.NodepoolIDRef, &out.NodepoolIDRef
		*out = new(v1.Reference)
		(*in).DeepCopyInto(*out)
	}
	if in.NodepoolIDSelector != nil {
		in, out := &in.NodepoolIDSelector, &out.NodepoolIDSelector
		*out = new(v1.Selector)
		(*in).DeepCopyInto(*out)
	}
	if in.Region != nil {
		in, out := &in.Region, &out.Region
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new NodePoolNodesAddInitParameters.
func (in *NodePoolNodesAddInitParameters) DeepCopy() *NodePoolNodesAddInitParameters {
	if in == nil {
		return nil
	}
	out := new(NodePoolNodesAddInitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *NodePoolNodesAddList) DeepCopyInto(out *NodePoolNodesAddList) {
	*out = *in
	out.TypeMeta = in.TypeMeta
	in.ListMeta.DeepCopyInto(&out.ListMeta)
	if in.Items != nil {
		in, out := &in.Items, &out.Items
		*out = make([]NodePoolNodesAdd, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new NodePoolNodesAddList.
func (in *NodePoolNodesAddList) DeepCopy() *NodePoolNodesAddList {
	if in == nil {
		return nil
	}
	out := new(NodePoolNodesAddList)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyObject is an autogenerated deepcopy function, copying the receiver, creating a new runtime.Object.
func (in *NodePoolNodesAddList) DeepCopyObject() runtime.Object {
	if c := in.DeepCopy(); c != nil {
		return c
	}
	return nil
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *NodePoolNodesAddObservation) DeepCopyInto(out *NodePoolNodesAddObservation) {
	*out = *in
	if in.ClusterID != nil {
		in, out := &in.ClusterID, &out.ClusterID
		*out = new(string)
		**out = **in
	}
	if in.EnableForceNew != nil {
		in, out := &in.EnableForceNew, &out.EnableForceNew
		*out = new(string)
		**out = **in
	}
	if in.ID != nil {
		in, out := &in.ID, &out.ID
		*out = new(string)
		**out = **in
	}
	if in.NodeList != nil {
		in, out := &in.NodeList, &out.NodeList
		*out = make([]NodeListObservation, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.NodepoolID != nil {
		in, out := &in.NodepoolID, &out.NodepoolID
		*out = new(string)
		**out = **in
	}
	if in.Region != nil {
		in, out := &in.Region, &out.Region
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new NodePoolNodesAddObservation.
func (in *NodePoolNodesAddObservation) DeepCopy() *NodePoolNodesAddObservation {
	if in == nil {
		return nil
	}
	out := new(NodePoolNodesAddObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *NodePoolNodesAddParameters) DeepCopyInto(out *NodePoolNodesAddParameters) {
	*out = *in
	if in.ClusterID != nil {
		in, out := &in.ClusterID, &out.ClusterID
		*out = new(string)
		**out = **in
	}
	if in.ClusterIDRef != nil {
		in, out := &in.ClusterIDRef, &out.ClusterIDRef
		*out = new(v1.Reference)
		(*in).DeepCopyInto(*out)
	}
	if in.ClusterIDSelector != nil {
		in, out := &in.ClusterIDSelector, &out.ClusterIDSelector
		*out = new(v1.Selector)
		(*in).DeepCopyInto(*out)
	}
	if in.EnableForceNew != nil {
		in, out := &in.EnableForceNew, &out.EnableForceNew
		*out = new(string)
		**out = **in
	}
	if in.NodeList != nil {
		in, out := &in.NodeList, &out.NodeList
		*out = make([]NodeListParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.NodepoolID != nil {
		in, out := &in.NodepoolID, &out.NodepoolID
		*out = new(string)
		**out = **in
	}
	if in.NodepoolIDRef != nil {
		in, out := &in.NodepoolIDRef, &out.NodepoolIDRef
		*out = new(v1.Reference)
		(*in).DeepCopyInto(*out)
	}
	if in.NodepoolIDSelector != nil {
		in, out := &in.NodepoolIDSelector, &out.NodepoolIDSelector
		*out = new(v1.Selector)
		(*in).DeepCopyInto(*out)
	}
	if in.Region != nil {
		in, out := &in.Region, &out.Region
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new NodePoolNodesAddParameters.
func (in *NodePoolNodesAddParameters) DeepCopy() *NodePoolNodesAddParameters {
	if in == nil {
		return nil
	}
	out := new(NodePoolNodesAddParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *NodePoolNodesAddSpec) DeepCopyInto(out *NodePoolNodesAddSpec) {
	*out = *in
	in.ResourceSpec.DeepCopyInto(&out.ResourceSpec)
	in.ForProvider.DeepCopyInto(&out.ForProvider)
	in.InitProvider.DeepCopyInto(&out.InitProvider)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new NodePoolNodesAddSpec.
func (in *NodePoolNodesAddSpec) DeepCopy() *NodePoolNodesAddSpec {
	if in == nil {
		return nil
	}
	out := new(NodePoolNodesAddSpec)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *NodePoolNodesAddStatus) DeepCopyInto(out *NodePoolNodesAddStatus) {
	*out = *in
	in.ResourceStatus.DeepCopyInto(&out.ResourceStatus)
	in.AtProvider.DeepCopyInto(&out.AtProvider)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new NodePoolNodesAddStatus.
func (in *NodePoolNodesAddStatus) DeepCopy() *NodePoolNodesAddStatus {
	if in == nil {
		return nil
	}
	out := new(NodePoolNodesAddStatus)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *NodePoolObservation) DeepCopyInto(out *NodePoolObservation) {
	*out = *in
	if in.AutoRenew != nil {
		in, out := &in.AutoRenew, &out.AutoRenew
		*out = new(string)
		**out = **in
	}
	if in.AvailabilityZone != nil {
		in, out := &in.AvailabilityZone, &out.AvailabilityZone
		*out = new(string)
		**out = **in
	}
	if in.BillingMode != nil {
		in, out := &in.BillingMode, &out.BillingMode
		*out = new(float64)
		**out = **in
	}
	if in.ChargingMode != nil {
		in, out := &in.ChargingMode, &out.ChargingMode
		*out = new(string)
		**out = **in
	}
	if in.ClusterID != nil {
		in, out := &in.ClusterID, &out.ClusterID
		*out = new(string)
		**out = **in
	}
	if in.CurrentNodeCount != nil {
		in, out := &in.CurrentNodeCount, &out.CurrentNodeCount
		*out = new(float64)
		**out = **in
	}
	if in.DataVolumes != nil {
		in, out := &in.DataVolumes, &out.DataVolumes
		*out = make([]NodePoolDataVolumesObservation, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.EcsGroupID != nil {
		in, out := &in.EcsGroupID, &out.EcsGroupID
		*out = new(string)
		**out = **in
	}
	if in.EnterpriseProjectID != nil {
		in, out := &in.EnterpriseProjectID, &out.EnterpriseProjectID
		*out = new(string)
		**out = **in
	}
	if in.ExtendParam != nil {
		in, out := &in.ExtendParam, &out.ExtendParam
		*out = make(map[string]*string, len(*in))
		for key, val := range *in {
			var outVal *string
			if val == nil {
				(*out)[key] = nil
			} else {
				inVal := (*in)[key]
				in, out := &inVal, &outVal
				*out = new(string)
				**out = **in
			}
			(*out)[key] = outVal
		}
	}
	if in.ExtendParams != nil {
		in, out := &in.ExtendParams, &out.ExtendParams
		*out = make([]NodePoolExtendParamsObservation, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.ExtensionScaleGroups != nil {
		in, out := &in.ExtensionScaleGroups, &out.ExtensionScaleGroups
		*out = make([]ExtensionScaleGroupsObservation, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.FlavorID != nil {
		in, out := &in.FlavorID, &out.FlavorID
		*out = new(string)
		**out = **in
	}
	if in.HostnameConfig != nil {
		in, out := &in.HostnameConfig, &out.HostnameConfig
		*out = make([]NodePoolHostnameConfigObservation, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.ID != nil {
		in, out := &in.ID, &out.ID
		*out = new(string)
		**out = **in
	}
	if in.InitialNodeCount != nil {
		in, out := &in.InitialNodeCount, &out.InitialNodeCount
		*out = new(float64)
		**out = **in
	}
	if in.InitializedConditions != nil {
		in, out := &in.InitializedConditions, &out.InitializedConditions
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.KeyPair != nil {
		in, out := &in.KeyPair, &out.KeyPair
		*out = new(string)
		**out = **in
	}
	if in.LabelPolicyOnExistingNodes != nil {
		in, out := &in.LabelPolicyOnExistingNodes, &out.LabelPolicyOnExistingNodes
		*out = new(string)
		**out = **in
	}
	if in.Labels != nil {
		in, out := &in.Labels, &out.Labels
		*out = make(map[string]*string, len(*in))
		for key, val := range *in {
			var outVal *string
			if val == nil {
				(*out)[key] = nil
			} else {
				inVal := (*in)[key]
				in, out := &inVal, &outVal
				*out = new(string)
				**out = **in
			}
			(*out)[key] = outVal
		}
	}
	if in.MaxNodeCount != nil {
		in, out := &in.MaxNodeCount, &out.MaxNodeCount
		*out = new(float64)
		**out = **in
	}
	if in.MaxPods != nil {
		in, out := &in.MaxPods, &out.MaxPods
		*out = new(float64)
		**out = **in
	}
	if in.MinNodeCount != nil {
		in, out := &in.MinNodeCount, &out.MinNodeCount
		*out = new(float64)
		**out = **in
	}
	if in.Name != nil {
		in, out := &in.Name, &out.Name
		*out = new(string)
		**out = **in
	}
	if in.Os != nil {
		in, out := &in.Os, &out.Os
		*out = new(string)
		**out = **in
	}
	if in.Period != nil {
		in, out := &in.Period, &out.Period
		*out = new(float64)
		**out = **in
	}
	if in.PeriodUnit != nil {
		in, out := &in.PeriodUnit, &out.PeriodUnit
		*out = new(string)
		**out = **in
	}
	if in.PodSecurityGroups != nil {
		in, out := &in.PodSecurityGroups, &out.PodSecurityGroups
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.Postinstall != nil {
		in, out := &in.Postinstall, &out.Postinstall
		*out = new(string)
		**out = **in
	}
	if in.Preinstall != nil {
		in, out := &in.Preinstall, &out.Preinstall
		*out = new(string)
		**out = **in
	}
	if in.Priority != nil {
		in, out := &in.Priority, &out.Priority
		*out = new(float64)
		**out = **in
	}
	if in.Region != nil {
		in, out := &in.Region, &out.Region
		*out = new(string)
		**out = **in
	}
	if in.RootVolume != nil {
		in, out := &in.RootVolume, &out.RootVolume
		*out = make([]NodePoolRootVolumeObservation, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.Runtime != nil {
		in, out := &in.Runtime, &out.Runtime
		*out = new(string)
		**out = **in
	}
	if in.ScaleDownCooldownTime != nil {
		in, out := &in.ScaleDownCooldownTime, &out.ScaleDownCooldownTime
		*out = new(float64)
		**out = **in
	}
	if in.ScallEnable != nil {
		in, out := &in.ScallEnable, &out.ScallEnable
		*out = new(bool)
		**out = **in
	}
	if in.SecurityGroups != nil {
		in, out := &in.SecurityGroups, &out.SecurityGroups
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.Status != nil {
		in, out := &in.Status, &out.Status
		*out = new(string)
		**out = **in
	}
	if in.Storage != nil {
		in, out := &in.Storage, &out.Storage
		*out = make([]NodePoolStorageObservation, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.SubnetID != nil {
		in, out := &in.SubnetID, &out.SubnetID
		*out = new(string)
		**out = **in
	}
	if in.TagPolicyOnExistingNodes != nil {
		in, out := &in.TagPolicyOnExistingNodes, &out.TagPolicyOnExistingNodes
		*out = new(string)
		**out = **in
	}
	if in.Tags != nil {
		in, out := &in.Tags, &out.Tags
		*out = make(map[string]*string, len(*in))
		for key, val := range *in {
			var outVal *string
			if val == nil {
				(*out)[key] = nil
			} else {
				inVal := (*in)[key]
				in, out := &inVal, &outVal
				*out = new(string)
				**out = **in
			}
			(*out)[key] = outVal
		}
	}
	if in.TaintPolicyOnExistingNodes != nil {
		in, out := &in.TaintPolicyOnExistingNodes, &out.TaintPolicyOnExistingNodes
		*out = new(string)
		**out = **in
	}
	if in.Taints != nil {
		in, out := &in.Taints, &out.Taints
		*out = make([]NodePoolTaintsObservation, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.Type != nil {
		in, out := &in.Type, &out.Type
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new NodePoolObservation.
func (in *NodePoolObservation) DeepCopy() *NodePoolObservation {
	if in == nil {
		return nil
	}
	out := new(NodePoolObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *NodePoolParameters) DeepCopyInto(out *NodePoolParameters) {
	*out = *in
	if in.AutoRenew != nil {
		in, out := &in.AutoRenew, &out.AutoRenew
		*out = new(string)
		**out = **in
	}
	if in.AvailabilityZone != nil {
		in, out := &in.AvailabilityZone, &out.AvailabilityZone
		*out = new(string)
		**out = **in
	}
	if in.ChargingMode != nil {
		in, out := &in.ChargingMode, &out.ChargingMode
		*out = new(string)
		**out = **in
	}
	if in.ClusterID != nil {
		in, out := &in.ClusterID, &out.ClusterID
		*out = new(string)
		**out = **in
	}
	if in.ClusterIDRef != nil {
		in, out := &in.ClusterIDRef, &out.ClusterIDRef
		*out = new(v1.Reference)
		(*in).DeepCopyInto(*out)
	}
	if in.ClusterIDSelector != nil {
		in, out := &in.ClusterIDSelector, &out.ClusterIDSelector
		*out = new(v1.Selector)
		(*in).DeepCopyInto(*out)
	}
	if in.DataVolumes != nil {
		in, out := &in.DataVolumes, &out.DataVolumes
		*out = make([]NodePoolDataVolumesParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.EcsGroupID != nil {
		in, out := &in.EcsGroupID, &out.EcsGroupID
		*out = new(string)
		**out = **in
	}
	if in.EcsGroupIDRef != nil {
		in, out := &in.EcsGroupIDRef, &out.EcsGroupIDRef
		*out = new(v1.Reference)
		(*in).DeepCopyInto(*out)
	}
	if in.EcsGroupIDSelector != nil {
		in, out := &in.EcsGroupIDSelector, &out.EcsGroupIDSelector
		*out = new(v1.Selector)
		(*in).DeepCopyInto(*out)
	}
	if in.EnterpriseProjectID != nil {
		in, out := &in.EnterpriseProjectID, &out.EnterpriseProjectID
		*out = new(string)
		**out = **in
	}
	if in.ExtendParam != nil {
		in, out := &in.ExtendParam, &out.ExtendParam
		*out = make(map[string]*string, len(*in))
		for key, val := range *in {
			var outVal *string
			if val == nil {
				(*out)[key] = nil
			} else {
				inVal := (*in)[key]
				in, out := &inVal, &outVal
				*out = new(string)
				**out = **in
			}
			(*out)[key] = outVal
		}
	}
	if in.ExtendParams != nil {
		in, out := &in.ExtendParams, &out.ExtendParams
		*out = make([]NodePoolExtendParamsParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.ExtensionScaleGroups != nil {
		in, out := &in.ExtensionScaleGroups, &out.ExtensionScaleGroups
		*out = make([]ExtensionScaleGroupsParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.FlavorID != nil {
		in, out := &in.FlavorID, &out.FlavorID
		*out = new(string)
		**out = **in
	}
	if in.HostnameConfig != nil {
		in, out := &in.HostnameConfig, &out.HostnameConfig
		*out = make([]NodePoolHostnameConfigParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.InitialNodeCount != nil {
		in, out := &in.InitialNodeCount, &out.InitialNodeCount
		*out = new(float64)
		**out = **in
	}
	if in.InitializedConditions != nil {
		in, out := &in.InitializedConditions, &out.InitializedConditions
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.KeyPair != nil {
		in, out := &in.KeyPair, &out.KeyPair
		*out = new(string)
		**out = **in
	}
	if in.LabelPolicyOnExistingNodes != nil {
		in, out := &in.LabelPolicyOnExistingNodes, &out.LabelPolicyOnExistingNodes
		*out = new(string)
		**out = **in
	}
	if in.Labels != nil {
		in, out := &in.Labels, &out.Labels
		*out = make(map[string]*string, len(*in))
		for key, val := range *in {
			var outVal *string
			if val == nil {
				(*out)[key] = nil
			} else {
				inVal := (*in)[key]
				in, out := &inVal, &outVal
				*out = new(string)
				**out = **in
			}
			(*out)[key] = outVal
		}
	}
	if in.MaxNodeCount != nil {
		in, out := &in.MaxNodeCount, &out.MaxNodeCount
		*out = new(float64)
		**out = **in
	}
	if in.MaxPods != nil {
		in, out := &in.MaxPods, &out.MaxPods
		*out = new(float64)
		**out = **in
	}
	if in.MinNodeCount != nil {
		in, out := &in.MinNodeCount, &out.MinNodeCount
		*out = new(float64)
		**out = **in
	}
	if in.Name != nil {
		in, out := &in.Name, &out.Name
		*out = new(string)
		**out = **in
	}
	if in.Os != nil {
		in, out := &in.Os, &out.Os
		*out = new(string)
		**out = **in
	}
	if in.PasswordSecretRef != nil {
		in, out := &in.PasswordSecretRef, &out.PasswordSecretRef
		*out = new(v1.SecretKeySelector)
		**out = **in
	}
	if in.Period != nil {
		in, out := &in.Period, &out.Period
		*out = new(float64)
		**out = **in
	}
	if in.PeriodUnit != nil {
		in, out := &in.PeriodUnit, &out.PeriodUnit
		*out = new(string)
		**out = **in
	}
	if in.PodSecurityGroups != nil {
		in, out := &in.PodSecurityGroups, &out.PodSecurityGroups
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.Postinstall != nil {
		in, out := &in.Postinstall, &out.Postinstall
		*out = new(string)
		**out = **in
	}
	if in.Preinstall != nil {
		in, out := &in.Preinstall, &out.Preinstall
		*out = new(string)
		**out = **in
	}
	if in.Priority != nil {
		in, out := &in.Priority, &out.Priority
		*out = new(float64)
		**out = **in
	}
	if in.Region != nil {
		in, out := &in.Region, &out.Region
		*out = new(string)
		**out = **in
	}
	if in.RootVolume != nil {
		in, out := &in.RootVolume, &out.RootVolume
		*out = make([]NodePoolRootVolumeParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.Runtime != nil {
		in, out := &in.Runtime, &out.Runtime
		*out = new(string)
		**out = **in
	}
	if in.ScaleDownCooldownTime != nil {
		in, out := &in.ScaleDownCooldownTime, &out.ScaleDownCooldownTime
		*out = new(float64)
		**out = **in
	}
	if in.ScallEnable != nil {
		in, out := &in.ScallEnable, &out.ScallEnable
		*out = new(bool)
		**out = **in
	}
	if in.SecurityGroups != nil {
		in, out := &in.SecurityGroups, &out.SecurityGroups
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.Storage != nil {
		in, out := &in.Storage, &out.Storage
		*out = make([]NodePoolStorageParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.SubnetID != nil {
		in, out := &in.SubnetID, &out.SubnetID
		*out = new(string)
		**out = **in
	}
	if in.SubnetIDRef != nil {
		in, out := &in.SubnetIDRef, &out.SubnetIDRef
		*out = new(v1.Reference)
		(*in).DeepCopyInto(*out)
	}
	if in.SubnetIDSelector != nil {
		in, out := &in.SubnetIDSelector, &out.SubnetIDSelector
		*out = new(v1.Selector)
		(*in).DeepCopyInto(*out)
	}
	if in.TagPolicyOnExistingNodes != nil {
		in, out := &in.TagPolicyOnExistingNodes, &out.TagPolicyOnExistingNodes
		*out = new(string)
		**out = **in
	}
	if in.Tags != nil {
		in, out := &in.Tags, &out.Tags
		*out = make(map[string]*string, len(*in))
		for key, val := range *in {
			var outVal *string
			if val == nil {
				(*out)[key] = nil
			} else {
				inVal := (*in)[key]
				in, out := &inVal, &outVal
				*out = new(string)
				**out = **in
			}
			(*out)[key] = outVal
		}
	}
	if in.TaintPolicyOnExistingNodes != nil {
		in, out := &in.TaintPolicyOnExistingNodes, &out.TaintPolicyOnExistingNodes
		*out = new(string)
		**out = **in
	}
	if in.Taints != nil {
		in, out := &in.Taints, &out.Taints
		*out = make([]NodePoolTaintsParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.Type != nil {
		in, out := &in.Type, &out.Type
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new NodePoolParameters.
func (in *NodePoolParameters) DeepCopy() *NodePoolParameters {
	if in == nil {
		return nil
	}
	out := new(NodePoolParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *NodePoolRootVolumeInitParameters) DeepCopyInto(out *NodePoolRootVolumeInitParameters) {
	*out = *in
	if in.DssPoolID != nil {
		in, out := &in.DssPoolID, &out.DssPoolID
		*out = new(string)
		**out = **in
	}
	if in.ExtendParam != nil {
		in, out := &in.ExtendParam, &out.ExtendParam
		*out = new(string)
		**out = **in
	}
	if in.ExtendParams != nil {
		in, out := &in.ExtendParams, &out.ExtendParams
		*out = make(map[string]*string, len(*in))
		for key, val := range *in {
			var outVal *string
			if val == nil {
				(*out)[key] = nil
			} else {
				inVal := (*in)[key]
				in, out := &inVal, &outVal
				*out = new(string)
				**out = **in
			}
			(*out)[key] = outVal
		}
	}
	if in.HwPassthrough != nil {
		in, out := &in.HwPassthrough, &out.HwPassthrough
		*out = new(bool)
		**out = **in
	}
	if in.KMSKeyID != nil {
		in, out := &in.KMSKeyID, &out.KMSKeyID
		*out = new(string)
		**out = **in
	}
	if in.Size != nil {
		in, out := &in.Size, &out.Size
		*out = new(float64)
		**out = **in
	}
	if in.Volumetype != nil {
		in, out := &in.Volumetype, &out.Volumetype
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new NodePoolRootVolumeInitParameters.
func (in *NodePoolRootVolumeInitParameters) DeepCopy() *NodePoolRootVolumeInitParameters {
	if in == nil {
		return nil
	}
	out := new(NodePoolRootVolumeInitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *NodePoolRootVolumeObservation) DeepCopyInto(out *NodePoolRootVolumeObservation) {
	*out = *in
	if in.DssPoolID != nil {
		in, out := &in.DssPoolID, &out.DssPoolID
		*out = new(string)
		**out = **in
	}
	if in.ExtendParam != nil {
		in, out := &in.ExtendParam, &out.ExtendParam
		*out = new(string)
		**out = **in
	}
	if in.ExtendParams != nil {
		in, out := &in.ExtendParams, &out.ExtendParams
		*out = make(map[string]*string, len(*in))
		for key, val := range *in {
			var outVal *string
			if val == nil {
				(*out)[key] = nil
			} else {
				inVal := (*in)[key]
				in, out := &inVal, &outVal
				*out = new(string)
				**out = **in
			}
			(*out)[key] = outVal
		}
	}
	if in.HwPassthrough != nil {
		in, out := &in.HwPassthrough, &out.HwPassthrough
		*out = new(bool)
		**out = **in
	}
	if in.KMSKeyID != nil {
		in, out := &in.KMSKeyID, &out.KMSKeyID
		*out = new(string)
		**out = **in
	}
	if in.Size != nil {
		in, out := &in.Size, &out.Size
		*out = new(float64)
		**out = **in
	}
	if in.Volumetype != nil {
		in, out := &in.Volumetype, &out.Volumetype
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new NodePoolRootVolumeObservation.
func (in *NodePoolRootVolumeObservation) DeepCopy() *NodePoolRootVolumeObservation {
	if in == nil {
		return nil
	}
	out := new(NodePoolRootVolumeObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *NodePoolRootVolumeParameters) DeepCopyInto(out *NodePoolRootVolumeParameters) {
	*out = *in
	if in.DssPoolID != nil {
		in, out := &in.DssPoolID, &out.DssPoolID
		*out = new(string)
		**out = **in
	}
	if in.ExtendParam != nil {
		in, out := &in.ExtendParam, &out.ExtendParam
		*out = new(string)
		**out = **in
	}
	if in.ExtendParams != nil {
		in, out := &in.ExtendParams, &out.ExtendParams
		*out = make(map[string]*string, len(*in))
		for key, val := range *in {
			var outVal *string
			if val == nil {
				(*out)[key] = nil
			} else {
				inVal := (*in)[key]
				in, out := &inVal, &outVal
				*out = new(string)
				**out = **in
			}
			(*out)[key] = outVal
		}
	}
	if in.HwPassthrough != nil {
		in, out := &in.HwPassthrough, &out.HwPassthrough
		*out = new(bool)
		**out = **in
	}
	if in.KMSKeyID != nil {
		in, out := &in.KMSKeyID, &out.KMSKeyID
		*out = new(string)
		**out = **in
	}
	if in.Size != nil {
		in, out := &in.Size, &out.Size
		*out = new(float64)
		**out = **in
	}
	if in.Volumetype != nil {
		in, out := &in.Volumetype, &out.Volumetype
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new NodePoolRootVolumeParameters.
func (in *NodePoolRootVolumeParameters) DeepCopy() *NodePoolRootVolumeParameters {
	if in == nil {
		return nil
	}
	out := new(NodePoolRootVolumeParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *NodePoolSpec) DeepCopyInto(out *NodePoolSpec) {
	*out = *in
	in.ResourceSpec.DeepCopyInto(&out.ResourceSpec)
	in.ForProvider.DeepCopyInto(&out.ForProvider)
	in.InitProvider.DeepCopyInto(&out.InitProvider)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new NodePoolSpec.
func (in *NodePoolSpec) DeepCopy() *NodePoolSpec {
	if in == nil {
		return nil
	}
	out := new(NodePoolSpec)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *NodePoolStatus) DeepCopyInto(out *NodePoolStatus) {
	*out = *in
	in.ResourceStatus.DeepCopyInto(&out.ResourceStatus)
	in.AtProvider.DeepCopyInto(&out.AtProvider)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new NodePoolStatus.
func (in *NodePoolStatus) DeepCopy() *NodePoolStatus {
	if in == nil {
		return nil
	}
	out := new(NodePoolStatus)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *NodePoolStorageGroupsInitParameters) DeepCopyInto(out *NodePoolStorageGroupsInitParameters) {
	*out = *in
	if in.CceManaged != nil {
		in, out := &in.CceManaged, &out.CceManaged
		*out = new(bool)
		**out = **in
	}
	if in.Name != nil {
		in, out := &in.Name, &out.Name
		*out = new(string)
		**out = **in
	}
	if in.SelectorNames != nil {
		in, out := &in.SelectorNames, &out.SelectorNames
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.VirtualSpaces != nil {
		in, out := &in.VirtualSpaces, &out.VirtualSpaces
		*out = make([]StorageGroupsVirtualSpacesInitParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new NodePoolStorageGroupsInitParameters.
func (in *NodePoolStorageGroupsInitParameters) DeepCopy() *NodePoolStorageGroupsInitParameters {
	if in == nil {
		return nil
	}
	out := new(NodePoolStorageGroupsInitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *NodePoolStorageGroupsObservation) DeepCopyInto(out *NodePoolStorageGroupsObservation) {
	*out = *in
	if in.CceManaged != nil {
		in, out := &in.CceManaged, &out.CceManaged
		*out = new(bool)
		**out = **in
	}
	if in.Name != nil {
		in, out := &in.Name, &out.Name
		*out = new(string)
		**out = **in
	}
	if in.SelectorNames != nil {
		in, out := &in.SelectorNames, &out.SelectorNames
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.VirtualSpaces != nil {
		in, out := &in.VirtualSpaces, &out.VirtualSpaces
		*out = make([]StorageGroupsVirtualSpacesObservation, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new NodePoolStorageGroupsObservation.
func (in *NodePoolStorageGroupsObservation) DeepCopy() *NodePoolStorageGroupsObservation {
	if in == nil {
		return nil
	}
	out := new(NodePoolStorageGroupsObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *NodePoolStorageGroupsParameters) DeepCopyInto(out *NodePoolStorageGroupsParameters) {
	*out = *in
	if in.CceManaged != nil {
		in, out := &in.CceManaged, &out.CceManaged
		*out = new(bool)
		**out = **in
	}
	if in.Name != nil {
		in, out := &in.Name, &out.Name
		*out = new(string)
		**out = **in
	}
	if in.SelectorNames != nil {
		in, out := &in.SelectorNames, &out.SelectorNames
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.VirtualSpaces != nil {
		in, out := &in.VirtualSpaces, &out.VirtualSpaces
		*out = make([]StorageGroupsVirtualSpacesParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new NodePoolStorageGroupsParameters.
func (in *NodePoolStorageGroupsParameters) DeepCopy() *NodePoolStorageGroupsParameters {
	if in == nil {
		return nil
	}
	out := new(NodePoolStorageGroupsParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *NodePoolStorageInitParameters) DeepCopyInto(out *NodePoolStorageInitParameters) {
	*out = *in
	if in.Groups != nil {
		in, out := &in.Groups, &out.Groups
		*out = make([]NodePoolStorageGroupsInitParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.Selectors != nil {
		in, out := &in.Selectors, &out.Selectors
		*out = make([]NodePoolStorageSelectorsInitParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new NodePoolStorageInitParameters.
func (in *NodePoolStorageInitParameters) DeepCopy() *NodePoolStorageInitParameters {
	if in == nil {
		return nil
	}
	out := new(NodePoolStorageInitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *NodePoolStorageObservation) DeepCopyInto(out *NodePoolStorageObservation) {
	*out = *in
	if in.Groups != nil {
		in, out := &in.Groups, &out.Groups
		*out = make([]NodePoolStorageGroupsObservation, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.Selectors != nil {
		in, out := &in.Selectors, &out.Selectors
		*out = make([]NodePoolStorageSelectorsObservation, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new NodePoolStorageObservation.
func (in *NodePoolStorageObservation) DeepCopy() *NodePoolStorageObservation {
	if in == nil {
		return nil
	}
	out := new(NodePoolStorageObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *NodePoolStorageParameters) DeepCopyInto(out *NodePoolStorageParameters) {
	*out = *in
	if in.Groups != nil {
		in, out := &in.Groups, &out.Groups
		*out = make([]NodePoolStorageGroupsParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.Selectors != nil {
		in, out := &in.Selectors, &out.Selectors
		*out = make([]NodePoolStorageSelectorsParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new NodePoolStorageParameters.
func (in *NodePoolStorageParameters) DeepCopy() *NodePoolStorageParameters {
	if in == nil {
		return nil
	}
	out := new(NodePoolStorageParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *NodePoolStorageSelectorsInitParameters) DeepCopyInto(out *NodePoolStorageSelectorsInitParameters) {
	*out = *in
	if in.MatchLabelCount != nil {
		in, out := &in.MatchLabelCount, &out.MatchLabelCount
		*out = new(string)
		**out = **in
	}
	if in.MatchLabelMetadataCmkid != nil {
		in, out := &in.MatchLabelMetadataCmkid, &out.MatchLabelMetadataCmkid
		*out = new(string)
		**out = **in
	}
	if in.MatchLabelMetadataEncrypted != nil {
		in, out := &in.MatchLabelMetadataEncrypted, &out.MatchLabelMetadataEncrypted
		*out = new(string)
		**out = **in
	}
	if in.MatchLabelSize != nil {
		in, out := &in.MatchLabelSize, &out.MatchLabelSize
		*out = new(string)
		**out = **in
	}
	if in.MatchLabelVolumeType != nil {
		in, out := &in.MatchLabelVolumeType, &out.MatchLabelVolumeType
		*out = new(string)
		**out = **in
	}
	if in.Name != nil {
		in, out := &in.Name, &out.Name
		*out = new(string)
		**out = **in
	}
	if in.Type != nil {
		in, out := &in.Type, &out.Type
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new NodePoolStorageSelectorsInitParameters.
func (in *NodePoolStorageSelectorsInitParameters) DeepCopy() *NodePoolStorageSelectorsInitParameters {
	if in == nil {
		return nil
	}
	out := new(NodePoolStorageSelectorsInitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *NodePoolStorageSelectorsObservation) DeepCopyInto(out *NodePoolStorageSelectorsObservation) {
	*out = *in
	if in.MatchLabelCount != nil {
		in, out := &in.MatchLabelCount, &out.MatchLabelCount
		*out = new(string)
		**out = **in
	}
	if in.MatchLabelMetadataCmkid != nil {
		in, out := &in.MatchLabelMetadataCmkid, &out.MatchLabelMetadataCmkid
		*out = new(string)
		**out = **in
	}
	if in.MatchLabelMetadataEncrypted != nil {
		in, out := &in.MatchLabelMetadataEncrypted, &out.MatchLabelMetadataEncrypted
		*out = new(string)
		**out = **in
	}
	if in.MatchLabelSize != nil {
		in, out := &in.MatchLabelSize, &out.MatchLabelSize
		*out = new(string)
		**out = **in
	}
	if in.MatchLabelVolumeType != nil {
		in, out := &in.MatchLabelVolumeType, &out.MatchLabelVolumeType
		*out = new(string)
		**out = **in
	}
	if in.Name != nil {
		in, out := &in.Name, &out.Name
		*out = new(string)
		**out = **in
	}
	if in.Type != nil {
		in, out := &in.Type, &out.Type
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new NodePoolStorageSelectorsObservation.
func (in *NodePoolStorageSelectorsObservation) DeepCopy() *NodePoolStorageSelectorsObservation {
	if in == nil {
		return nil
	}
	out := new(NodePoolStorageSelectorsObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *NodePoolStorageSelectorsParameters) DeepCopyInto(out *NodePoolStorageSelectorsParameters) {
	*out = *in
	if in.MatchLabelCount != nil {
		in, out := &in.MatchLabelCount, &out.MatchLabelCount
		*out = new(string)
		**out = **in
	}
	if in.MatchLabelMetadataCmkid != nil {
		in, out := &in.MatchLabelMetadataCmkid, &out.MatchLabelMetadataCmkid
		*out = new(string)
		**out = **in
	}
	if in.MatchLabelMetadataEncrypted != nil {
		in, out := &in.MatchLabelMetadataEncrypted, &out.MatchLabelMetadataEncrypted
		*out = new(string)
		**out = **in
	}
	if in.MatchLabelSize != nil {
		in, out := &in.MatchLabelSize, &out.MatchLabelSize
		*out = new(string)
		**out = **in
	}
	if in.MatchLabelVolumeType != nil {
		in, out := &in.MatchLabelVolumeType, &out.MatchLabelVolumeType
		*out = new(string)
		**out = **in
	}
	if in.Name != nil {
		in, out := &in.Name, &out.Name
		*out = new(string)
		**out = **in
	}
	if in.Type != nil {
		in, out := &in.Type, &out.Type
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new NodePoolStorageSelectorsParameters.
func (in *NodePoolStorageSelectorsParameters) DeepCopy() *NodePoolStorageSelectorsParameters {
	if in == nil {
		return nil
	}
	out := new(NodePoolStorageSelectorsParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *NodePoolTaintsInitParameters) DeepCopyInto(out *NodePoolTaintsInitParameters) {
	*out = *in
	if in.Effect != nil {
		in, out := &in.Effect, &out.Effect
		*out = new(string)
		**out = **in
	}
	if in.Key != nil {
		in, out := &in.Key, &out.Key
		*out = new(string)
		**out = **in
	}
	if in.Value != nil {
		in, out := &in.Value, &out.Value
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new NodePoolTaintsInitParameters.
func (in *NodePoolTaintsInitParameters) DeepCopy() *NodePoolTaintsInitParameters {
	if in == nil {
		return nil
	}
	out := new(NodePoolTaintsInitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *NodePoolTaintsObservation) DeepCopyInto(out *NodePoolTaintsObservation) {
	*out = *in
	if in.Effect != nil {
		in, out := &in.Effect, &out.Effect
		*out = new(string)
		**out = **in
	}
	if in.Key != nil {
		in, out := &in.Key, &out.Key
		*out = new(string)
		**out = **in
	}
	if in.Value != nil {
		in, out := &in.Value, &out.Value
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new NodePoolTaintsObservation.
func (in *NodePoolTaintsObservation) DeepCopy() *NodePoolTaintsObservation {
	if in == nil {
		return nil
	}
	out := new(NodePoolTaintsObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *NodePoolTaintsParameters) DeepCopyInto(out *NodePoolTaintsParameters) {
	*out = *in
	if in.Effect != nil {
		in, out := &in.Effect, &out.Effect
		*out = new(string)
		**out = **in
	}
	if in.Key != nil {
		in, out := &in.Key, &out.Key
		*out = new(string)
		**out = **in
	}
	if in.Value != nil {
		in, out := &in.Value, &out.Value
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new NodePoolTaintsParameters.
func (in *NodePoolTaintsParameters) DeepCopy() *NodePoolTaintsParameters {
	if in == nil {
		return nil
	}
	out := new(NodePoolTaintsParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *NodeSpec) DeepCopyInto(out *NodeSpec) {
	*out = *in
	in.ResourceSpec.DeepCopyInto(&out.ResourceSpec)
	in.ForProvider.DeepCopyInto(&out.ForProvider)
	in.InitProvider.DeepCopyInto(&out.InitProvider)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new NodeSpec.
func (in *NodeSpec) DeepCopy() *NodeSpec {
	if in == nil {
		return nil
	}
	out := new(NodeSpec)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *NodeStatus) DeepCopyInto(out *NodeStatus) {
	*out = *in
	in.ResourceStatus.DeepCopyInto(&out.ResourceStatus)
	in.AtProvider.DeepCopyInto(&out.AtProvider)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new NodeStatus.
func (in *NodeStatus) DeepCopy() *NodeStatus {
	if in == nil {
		return nil
	}
	out := new(NodeStatus)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *Pvc) DeepCopyInto(out *Pvc) {
	*out = *in
	out.TypeMeta = in.TypeMeta
	in.ObjectMeta.DeepCopyInto(&out.ObjectMeta)
	in.Spec.DeepCopyInto(&out.Spec)
	in.Status.DeepCopyInto(&out.Status)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new Pvc.
func (in *Pvc) DeepCopy() *Pvc {
	if in == nil {
		return nil
	}
	out := new(Pvc)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyObject is an autogenerated deepcopy function, copying the receiver, creating a new runtime.Object.
func (in *Pvc) DeepCopyObject() runtime.Object {
	if c := in.DeepCopy(); c != nil {
		return c
	}
	return nil
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *PvcInitParameters) DeepCopyInto(out *PvcInitParameters) {
	*out = *in
	if in.AccessModes != nil {
		in, out := &in.AccessModes, &out.AccessModes
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.Annotations != nil {
		in, out := &in.Annotations, &out.Annotations
		*out = make(map[string]*string, len(*in))
		for key, val := range *in {
			var outVal *string
			if val == nil {
				(*out)[key] = nil
			} else {
				inVal := (*in)[key]
				in, out := &inVal, &outVal
				*out = new(string)
				**out = **in
			}
			(*out)[key] = outVal
		}
	}
	if in.ClusterID != nil {
		in, out := &in.ClusterID, &out.ClusterID
		*out = new(string)
		**out = **in
	}
	if in.ClusterIDRef != nil {
		in, out := &in.ClusterIDRef, &out.ClusterIDRef
		*out = new(v1.Reference)
		(*in).DeepCopyInto(*out)
	}
	if in.ClusterIDSelector != nil {
		in, out := &in.ClusterIDSelector, &out.ClusterIDSelector
		*out = new(v1.Selector)
		(*in).DeepCopyInto(*out)
	}
	if in.Labels != nil {
		in, out := &in.Labels, &out.Labels
		*out = make(map[string]*string, len(*in))
		for key, val := range *in {
			var outVal *string
			if val == nil {
				(*out)[key] = nil
			} else {
				inVal := (*in)[key]
				in, out := &inVal, &outVal
				*out = new(string)
				**out = **in
			}
			(*out)[key] = outVal
		}
	}
	if in.Name != nil {
		in, out := &in.Name, &out.Name
		*out = new(string)
		**out = **in
	}
	if in.Namespace != nil {
		in, out := &in.Namespace, &out.Namespace
		*out = new(string)
		**out = **in
	}
	if in.Region != nil {
		in, out := &in.Region, &out.Region
		*out = new(string)
		**out = **in
	}
	if in.Storage != nil {
		in, out := &in.Storage, &out.Storage
		*out = new(string)
		**out = **in
	}
	if in.StorageClassName != nil {
		in, out := &in.StorageClassName, &out.StorageClassName
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new PvcInitParameters.
func (in *PvcInitParameters) DeepCopy() *PvcInitParameters {
	if in == nil {
		return nil
	}
	out := new(PvcInitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *PvcList) DeepCopyInto(out *PvcList) {
	*out = *in
	out.TypeMeta = in.TypeMeta
	in.ListMeta.DeepCopyInto(&out.ListMeta)
	if in.Items != nil {
		in, out := &in.Items, &out.Items
		*out = make([]Pvc, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new PvcList.
func (in *PvcList) DeepCopy() *PvcList {
	if in == nil {
		return nil
	}
	out := new(PvcList)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyObject is an autogenerated deepcopy function, copying the receiver, creating a new runtime.Object.
func (in *PvcList) DeepCopyObject() runtime.Object {
	if c := in.DeepCopy(); c != nil {
		return c
	}
	return nil
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *PvcObservation) DeepCopyInto(out *PvcObservation) {
	*out = *in
	if in.AccessModes != nil {
		in, out := &in.AccessModes, &out.AccessModes
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.Annotations != nil {
		in, out := &in.Annotations, &out.Annotations
		*out = make(map[string]*string, len(*in))
		for key, val := range *in {
			var outVal *string
			if val == nil {
				(*out)[key] = nil
			} else {
				inVal := (*in)[key]
				in, out := &inVal, &outVal
				*out = new(string)
				**out = **in
			}
			(*out)[key] = outVal
		}
	}
	if in.ClusterID != nil {
		in, out := &in.ClusterID, &out.ClusterID
		*out = new(string)
		**out = **in
	}
	if in.CreationTimestamp != nil {
		in, out := &in.CreationTimestamp, &out.CreationTimestamp
		*out = new(string)
		**out = **in
	}
	if in.ID != nil {
		in, out := &in.ID, &out.ID
		*out = new(string)
		**out = **in
	}
	if in.Labels != nil {
		in, out := &in.Labels, &out.Labels
		*out = make(map[string]*string, len(*in))
		for key, val := range *in {
			var outVal *string
			if val == nil {
				(*out)[key] = nil
			} else {
				inVal := (*in)[key]
				in, out := &inVal, &outVal
				*out = new(string)
				**out = **in
			}
			(*out)[key] = outVal
		}
	}
	if in.Name != nil {
		in, out := &in.Name, &out.Name
		*out = new(string)
		**out = **in
	}
	if in.Namespace != nil {
		in, out := &in.Namespace, &out.Namespace
		*out = new(string)
		**out = **in
	}
	if in.Region != nil {
		in, out := &in.Region, &out.Region
		*out = new(string)
		**out = **in
	}
	if in.Status != nil {
		in, out := &in.Status, &out.Status
		*out = new(string)
		**out = **in
	}
	if in.Storage != nil {
		in, out := &in.Storage, &out.Storage
		*out = new(string)
		**out = **in
	}
	if in.StorageClassName != nil {
		in, out := &in.StorageClassName, &out.StorageClassName
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new PvcObservation.
func (in *PvcObservation) DeepCopy() *PvcObservation {
	if in == nil {
		return nil
	}
	out := new(PvcObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *PvcParameters) DeepCopyInto(out *PvcParameters) {
	*out = *in
	if in.AccessModes != nil {
		in, out := &in.AccessModes, &out.AccessModes
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.Annotations != nil {
		in, out := &in.Annotations, &out.Annotations
		*out = make(map[string]*string, len(*in))
		for key, val := range *in {
			var outVal *string
			if val == nil {
				(*out)[key] = nil
			} else {
				inVal := (*in)[key]
				in, out := &inVal, &outVal
				*out = new(string)
				**out = **in
			}
			(*out)[key] = outVal
		}
	}
	if in.ClusterID != nil {
		in, out := &in.ClusterID, &out.ClusterID
		*out = new(string)
		**out = **in
	}
	if in.ClusterIDRef != nil {
		in, out := &in.ClusterIDRef, &out.ClusterIDRef
		*out = new(v1.Reference)
		(*in).DeepCopyInto(*out)
	}
	if in.ClusterIDSelector != nil {
		in, out := &in.ClusterIDSelector, &out.ClusterIDSelector
		*out = new(v1.Selector)
		(*in).DeepCopyInto(*out)
	}
	if in.Labels != nil {
		in, out := &in.Labels, &out.Labels
		*out = make(map[string]*string, len(*in))
		for key, val := range *in {
			var outVal *string
			if val == nil {
				(*out)[key] = nil
			} else {
				inVal := (*in)[key]
				in, out := &inVal, &outVal
				*out = new(string)
				**out = **in
			}
			(*out)[key] = outVal
		}
	}
	if in.Name != nil {
		in, out := &in.Name, &out.Name
		*out = new(string)
		**out = **in
	}
	if in.Namespace != nil {
		in, out := &in.Namespace, &out.Namespace
		*out = new(string)
		**out = **in
	}
	if in.Region != nil {
		in, out := &in.Region, &out.Region
		*out = new(string)
		**out = **in
	}
	if in.Storage != nil {
		in, out := &in.Storage, &out.Storage
		*out = new(string)
		**out = **in
	}
	if in.StorageClassName != nil {
		in, out := &in.StorageClassName, &out.StorageClassName
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new PvcParameters.
func (in *PvcParameters) DeepCopy() *PvcParameters {
	if in == nil {
		return nil
	}
	out := new(PvcParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *PvcSpec) DeepCopyInto(out *PvcSpec) {
	*out = *in
	in.ResourceSpec.DeepCopyInto(&out.ResourceSpec)
	in.ForProvider.DeepCopyInto(&out.ForProvider)
	in.InitProvider.DeepCopyInto(&out.InitProvider)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new PvcSpec.
func (in *PvcSpec) DeepCopy() *PvcSpec {
	if in == nil {
		return nil
	}
	out := new(PvcSpec)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *PvcStatus) DeepCopyInto(out *PvcStatus) {
	*out = *in
	in.ResourceStatus.DeepCopyInto(&out.ResourceStatus)
	in.AtProvider.DeepCopyInto(&out.AtProvider)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new PvcStatus.
func (in *PvcStatus) DeepCopy() *PvcStatus {
	if in == nil {
		return nil
	}
	out := new(PvcStatus)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *RootVolumeInitParameters) DeepCopyInto(out *RootVolumeInitParameters) {
	*out = *in
	if in.DssPoolID != nil {
		in, out := &in.DssPoolID, &out.DssPoolID
		*out = new(string)
		**out = **in
	}
	if in.ExtendParam != nil {
		in, out := &in.ExtendParam, &out.ExtendParam
		*out = new(string)
		**out = **in
	}
	if in.ExtendParams != nil {
		in, out := &in.ExtendParams, &out.ExtendParams
		*out = make(map[string]*string, len(*in))
		for key, val := range *in {
			var outVal *string
			if val == nil {
				(*out)[key] = nil
			} else {
				inVal := (*in)[key]
				in, out := &inVal, &outVal
				*out = new(string)
				**out = **in
			}
			(*out)[key] = outVal
		}
	}
	if in.HwPassthrough != nil {
		in, out := &in.HwPassthrough, &out.HwPassthrough
		*out = new(bool)
		**out = **in
	}
	if in.KMSKeyID != nil {
		in, out := &in.KMSKeyID, &out.KMSKeyID
		*out = new(string)
		**out = **in
	}
	if in.Size != nil {
		in, out := &in.Size, &out.Size
		*out = new(float64)
		**out = **in
	}
	if in.Volumetype != nil {
		in, out := &in.Volumetype, &out.Volumetype
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new RootVolumeInitParameters.
func (in *RootVolumeInitParameters) DeepCopy() *RootVolumeInitParameters {
	if in == nil {
		return nil
	}
	out := new(RootVolumeInitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *RootVolumeObservation) DeepCopyInto(out *RootVolumeObservation) {
	*out = *in
	if in.DssPoolID != nil {
		in, out := &in.DssPoolID, &out.DssPoolID
		*out = new(string)
		**out = **in
	}
	if in.ExtendParam != nil {
		in, out := &in.ExtendParam, &out.ExtendParam
		*out = new(string)
		**out = **in
	}
	if in.ExtendParams != nil {
		in, out := &in.ExtendParams, &out.ExtendParams
		*out = make(map[string]*string, len(*in))
		for key, val := range *in {
			var outVal *string
			if val == nil {
				(*out)[key] = nil
			} else {
				inVal := (*in)[key]
				in, out := &inVal, &outVal
				*out = new(string)
				**out = **in
			}
			(*out)[key] = outVal
		}
	}
	if in.HwPassthrough != nil {
		in, out := &in.HwPassthrough, &out.HwPassthrough
		*out = new(bool)
		**out = **in
	}
	if in.KMSKeyID != nil {
		in, out := &in.KMSKeyID, &out.KMSKeyID
		*out = new(string)
		**out = **in
	}
	if in.Size != nil {
		in, out := &in.Size, &out.Size
		*out = new(float64)
		**out = **in
	}
	if in.Volumetype != nil {
		in, out := &in.Volumetype, &out.Volumetype
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new RootVolumeObservation.
func (in *RootVolumeObservation) DeepCopy() *RootVolumeObservation {
	if in == nil {
		return nil
	}
	out := new(RootVolumeObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *RootVolumeParameters) DeepCopyInto(out *RootVolumeParameters) {
	*out = *in
	if in.DssPoolID != nil {
		in, out := &in.DssPoolID, &out.DssPoolID
		*out = new(string)
		**out = **in
	}
	if in.ExtendParam != nil {
		in, out := &in.ExtendParam, &out.ExtendParam
		*out = new(string)
		**out = **in
	}
	if in.ExtendParams != nil {
		in, out := &in.ExtendParams, &out.ExtendParams
		*out = make(map[string]*string, len(*in))
		for key, val := range *in {
			var outVal *string
			if val == nil {
				(*out)[key] = nil
			} else {
				inVal := (*in)[key]
				in, out := &inVal, &outVal
				*out = new(string)
				**out = **in
			}
			(*out)[key] = outVal
		}
	}
	if in.HwPassthrough != nil {
		in, out := &in.HwPassthrough, &out.HwPassthrough
		*out = new(bool)
		**out = **in
	}
	if in.KMSKeyID != nil {
		in, out := &in.KMSKeyID, &out.KMSKeyID
		*out = new(string)
		**out = **in
	}
	if in.Size != nil {
		in, out := &in.Size, &out.Size
		*out = new(float64)
		**out = **in
	}
	if in.Volumetype != nil {
		in, out := &in.Volumetype, &out.Volumetype
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new RootVolumeParameters.
func (in *RootVolumeParameters) DeepCopy() *RootVolumeParameters {
	if in == nil {
		return nil
	}
	out := new(RootVolumeParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *SelectorsInitParameters) DeepCopyInto(out *SelectorsInitParameters) {
	*out = *in
	if in.MatchLabelCount != nil {
		in, out := &in.MatchLabelCount, &out.MatchLabelCount
		*out = new(string)
		**out = **in
	}
	if in.MatchLabelMetadataCmkid != nil {
		in, out := &in.MatchLabelMetadataCmkid, &out.MatchLabelMetadataCmkid
		*out = new(string)
		**out = **in
	}
	if in.MatchLabelMetadataEncrypted != nil {
		in, out := &in.MatchLabelMetadataEncrypted, &out.MatchLabelMetadataEncrypted
		*out = new(string)
		**out = **in
	}
	if in.MatchLabelSize != nil {
		in, out := &in.MatchLabelSize, &out.MatchLabelSize
		*out = new(string)
		**out = **in
	}
	if in.MatchLabelVolumeType != nil {
		in, out := &in.MatchLabelVolumeType, &out.MatchLabelVolumeType
		*out = new(string)
		**out = **in
	}
	if in.Name != nil {
		in, out := &in.Name, &out.Name
		*out = new(string)
		**out = **in
	}
	if in.Type != nil {
		in, out := &in.Type, &out.Type
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new SelectorsInitParameters.
func (in *SelectorsInitParameters) DeepCopy() *SelectorsInitParameters {
	if in == nil {
		return nil
	}
	out := new(SelectorsInitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *SelectorsObservation) DeepCopyInto(out *SelectorsObservation) {
	*out = *in
	if in.MatchLabelCount != nil {
		in, out := &in.MatchLabelCount, &out.MatchLabelCount
		*out = new(string)
		**out = **in
	}
	if in.MatchLabelMetadataCmkid != nil {
		in, out := &in.MatchLabelMetadataCmkid, &out.MatchLabelMetadataCmkid
		*out = new(string)
		**out = **in
	}
	if in.MatchLabelMetadataEncrypted != nil {
		in, out := &in.MatchLabelMetadataEncrypted, &out.MatchLabelMetadataEncrypted
		*out = new(string)
		**out = **in
	}
	if in.MatchLabelSize != nil {
		in, out := &in.MatchLabelSize, &out.MatchLabelSize
		*out = new(string)
		**out = **in
	}
	if in.MatchLabelVolumeType != nil {
		in, out := &in.MatchLabelVolumeType, &out.MatchLabelVolumeType
		*out = new(string)
		**out = **in
	}
	if in.Name != nil {
		in, out := &in.Name, &out.Name
		*out = new(string)
		**out = **in
	}
	if in.Type != nil {
		in, out := &in.Type, &out.Type
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new SelectorsObservation.
func (in *SelectorsObservation) DeepCopy() *SelectorsObservation {
	if in == nil {
		return nil
	}
	out := new(SelectorsObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *SelectorsParameters) DeepCopyInto(out *SelectorsParameters) {
	*out = *in
	if in.MatchLabelCount != nil {
		in, out := &in.MatchLabelCount, &out.MatchLabelCount
		*out = new(string)
		**out = **in
	}
	if in.MatchLabelMetadataCmkid != nil {
		in, out := &in.MatchLabelMetadataCmkid, &out.MatchLabelMetadataCmkid
		*out = new(string)
		**out = **in
	}
	if in.MatchLabelMetadataEncrypted != nil {
		in, out := &in.MatchLabelMetadataEncrypted, &out.MatchLabelMetadataEncrypted
		*out = new(string)
		**out = **in
	}
	if in.MatchLabelSize != nil {
		in, out := &in.MatchLabelSize, &out.MatchLabelSize
		*out = new(string)
		**out = **in
	}
	if in.MatchLabelVolumeType != nil {
		in, out := &in.MatchLabelVolumeType, &out.MatchLabelVolumeType
		*out = new(string)
		**out = **in
	}
	if in.Name != nil {
		in, out := &in.Name, &out.Name
		*out = new(string)
		**out = **in
	}
	if in.Type != nil {
		in, out := &in.Type, &out.Type
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new SelectorsParameters.
func (in *SelectorsParameters) DeepCopy() *SelectorsParameters {
	if in == nil {
		return nil
	}
	out := new(SelectorsParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *SpecInitParameters) DeepCopyInto(out *SpecInitParameters) {
	*out = *in
	if in.Autoscaling != nil {
		in, out := &in.Autoscaling, &out.Autoscaling
		*out = make([]AutoscalingInitParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.Az != nil {
		in, out := &in.Az, &out.Az
		*out = new(string)
		**out = **in
	}
	if in.CapacityReservationSpecification != nil {
		in, out := &in.CapacityReservationSpecification, &out.CapacityReservationSpecification
		*out = make([]CapacityReservationSpecificationInitParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.Flavor != nil {
		in, out := &in.Flavor, &out.Flavor
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new SpecInitParameters.
func (in *SpecInitParameters) DeepCopy() *SpecInitParameters {
	if in == nil {
		return nil
	}
	out := new(SpecInitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *SpecObservation) DeepCopyInto(out *SpecObservation) {
	*out = *in
	if in.Autoscaling != nil {
		in, out := &in.Autoscaling, &out.Autoscaling
		*out = make([]AutoscalingObservation, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.Az != nil {
		in, out := &in.Az, &out.Az
		*out = new(string)
		**out = **in
	}
	if in.CapacityReservationSpecification != nil {
		in, out := &in.CapacityReservationSpecification, &out.CapacityReservationSpecification
		*out = make([]CapacityReservationSpecificationObservation, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.Flavor != nil {
		in, out := &in.Flavor, &out.Flavor
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new SpecObservation.
func (in *SpecObservation) DeepCopy() *SpecObservation {
	if in == nil {
		return nil
	}
	out := new(SpecObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *SpecParameters) DeepCopyInto(out *SpecParameters) {
	*out = *in
	if in.Autoscaling != nil {
		in, out := &in.Autoscaling, &out.Autoscaling
		*out = make([]AutoscalingParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.Az != nil {
		in, out := &in.Az, &out.Az
		*out = new(string)
		**out = **in
	}
	if in.CapacityReservationSpecification != nil {
		in, out := &in.CapacityReservationSpecification, &out.CapacityReservationSpecification
		*out = make([]CapacityReservationSpecificationParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.Flavor != nil {
		in, out := &in.Flavor, &out.Flavor
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new SpecParameters.
func (in *SpecParameters) DeepCopy() *SpecParameters {
	if in == nil {
		return nil
	}
	out := new(SpecParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *StorageGroupsInitParameters) DeepCopyInto(out *StorageGroupsInitParameters) {
	*out = *in
	if in.CceManaged != nil {
		in, out := &in.CceManaged, &out.CceManaged
		*out = new(bool)
		**out = **in
	}
	if in.Name != nil {
		in, out := &in.Name, &out.Name
		*out = new(string)
		**out = **in
	}
	if in.SelectorNames != nil {
		in, out := &in.SelectorNames, &out.SelectorNames
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.VirtualSpaces != nil {
		in, out := &in.VirtualSpaces, &out.VirtualSpaces
		*out = make([]GroupsVirtualSpacesInitParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new StorageGroupsInitParameters.
func (in *StorageGroupsInitParameters) DeepCopy() *StorageGroupsInitParameters {
	if in == nil {
		return nil
	}
	out := new(StorageGroupsInitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *StorageGroupsObservation) DeepCopyInto(out *StorageGroupsObservation) {
	*out = *in
	if in.CceManaged != nil {
		in, out := &in.CceManaged, &out.CceManaged
		*out = new(bool)
		**out = **in
	}
	if in.Name != nil {
		in, out := &in.Name, &out.Name
		*out = new(string)
		**out = **in
	}
	if in.SelectorNames != nil {
		in, out := &in.SelectorNames, &out.SelectorNames
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.VirtualSpaces != nil {
		in, out := &in.VirtualSpaces, &out.VirtualSpaces
		*out = make([]GroupsVirtualSpacesObservation, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new StorageGroupsObservation.
func (in *StorageGroupsObservation) DeepCopy() *StorageGroupsObservation {
	if in == nil {
		return nil
	}
	out := new(StorageGroupsObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *StorageGroupsParameters) DeepCopyInto(out *StorageGroupsParameters) {
	*out = *in
	if in.CceManaged != nil {
		in, out := &in.CceManaged, &out.CceManaged
		*out = new(bool)
		**out = **in
	}
	if in.Name != nil {
		in, out := &in.Name, &out.Name
		*out = new(string)
		**out = **in
	}
	if in.SelectorNames != nil {
		in, out := &in.SelectorNames, &out.SelectorNames
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.VirtualSpaces != nil {
		in, out := &in.VirtualSpaces, &out.VirtualSpaces
		*out = make([]GroupsVirtualSpacesParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new StorageGroupsParameters.
func (in *StorageGroupsParameters) DeepCopy() *StorageGroupsParameters {
	if in == nil {
		return nil
	}
	out := new(StorageGroupsParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *StorageGroupsVirtualSpacesInitParameters) DeepCopyInto(out *StorageGroupsVirtualSpacesInitParameters) {
	*out = *in
	if in.LvmLvType != nil {
		in, out := &in.LvmLvType, &out.LvmLvType
		*out = new(string)
		**out = **in
	}
	if in.LvmPath != nil {
		in, out := &in.LvmPath, &out.LvmPath
		*out = new(string)
		**out = **in
	}
	if in.Name != nil {
		in, out := &in.Name, &out.Name
		*out = new(string)
		**out = **in
	}
	if in.RuntimeLvType != nil {
		in, out := &in.RuntimeLvType, &out.RuntimeLvType
		*out = new(string)
		**out = **in
	}
	if in.Size != nil {
		in, out := &in.Size, &out.Size
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new StorageGroupsVirtualSpacesInitParameters.
func (in *StorageGroupsVirtualSpacesInitParameters) DeepCopy() *StorageGroupsVirtualSpacesInitParameters {
	if in == nil {
		return nil
	}
	out := new(StorageGroupsVirtualSpacesInitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *StorageGroupsVirtualSpacesObservation) DeepCopyInto(out *StorageGroupsVirtualSpacesObservation) {
	*out = *in
	if in.LvmLvType != nil {
		in, out := &in.LvmLvType, &out.LvmLvType
		*out = new(string)
		**out = **in
	}
	if in.LvmPath != nil {
		in, out := &in.LvmPath, &out.LvmPath
		*out = new(string)
		**out = **in
	}
	if in.Name != nil {
		in, out := &in.Name, &out.Name
		*out = new(string)
		**out = **in
	}
	if in.RuntimeLvType != nil {
		in, out := &in.RuntimeLvType, &out.RuntimeLvType
		*out = new(string)
		**out = **in
	}
	if in.Size != nil {
		in, out := &in.Size, &out.Size
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new StorageGroupsVirtualSpacesObservation.
func (in *StorageGroupsVirtualSpacesObservation) DeepCopy() *StorageGroupsVirtualSpacesObservation {
	if in == nil {
		return nil
	}
	out := new(StorageGroupsVirtualSpacesObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *StorageGroupsVirtualSpacesParameters) DeepCopyInto(out *StorageGroupsVirtualSpacesParameters) {
	*out = *in
	if in.LvmLvType != nil {
		in, out := &in.LvmLvType, &out.LvmLvType
		*out = new(string)
		**out = **in
	}
	if in.LvmPath != nil {
		in, out := &in.LvmPath, &out.LvmPath
		*out = new(string)
		**out = **in
	}
	if in.Name != nil {
		in, out := &in.Name, &out.Name
		*out = new(string)
		**out = **in
	}
	if in.RuntimeLvType != nil {
		in, out := &in.RuntimeLvType, &out.RuntimeLvType
		*out = new(string)
		**out = **in
	}
	if in.Size != nil {
		in, out := &in.Size, &out.Size
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new StorageGroupsVirtualSpacesParameters.
func (in *StorageGroupsVirtualSpacesParameters) DeepCopy() *StorageGroupsVirtualSpacesParameters {
	if in == nil {
		return nil
	}
	out := new(StorageGroupsVirtualSpacesParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *StorageInitParameters) DeepCopyInto(out *StorageInitParameters) {
	*out = *in
	if in.Groups != nil {
		in, out := &in.Groups, &out.Groups
		*out = make([]GroupsInitParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.Selectors != nil {
		in, out := &in.Selectors, &out.Selectors
		*out = make([]SelectorsInitParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new StorageInitParameters.
func (in *StorageInitParameters) DeepCopy() *StorageInitParameters {
	if in == nil {
		return nil
	}
	out := new(StorageInitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *StorageObservation) DeepCopyInto(out *StorageObservation) {
	*out = *in
	if in.Groups != nil {
		in, out := &in.Groups, &out.Groups
		*out = make([]GroupsObservation, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.Selectors != nil {
		in, out := &in.Selectors, &out.Selectors
		*out = make([]SelectorsObservation, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new StorageObservation.
func (in *StorageObservation) DeepCopy() *StorageObservation {
	if in == nil {
		return nil
	}
	out := new(StorageObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *StorageParameters) DeepCopyInto(out *StorageParameters) {
	*out = *in
	if in.Groups != nil {
		in, out := &in.Groups, &out.Groups
		*out = make([]GroupsParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.Selectors != nil {
		in, out := &in.Selectors, &out.Selectors
		*out = make([]SelectorsParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new StorageParameters.
func (in *StorageParameters) DeepCopy() *StorageParameters {
	if in == nil {
		return nil
	}
	out := new(StorageParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *StorageSelectorsInitParameters) DeepCopyInto(out *StorageSelectorsInitParameters) {
	*out = *in
	if in.MatchLabelCount != nil {
		in, out := &in.MatchLabelCount, &out.MatchLabelCount
		*out = new(string)
		**out = **in
	}
	if in.MatchLabelMetadataCmkid != nil {
		in, out := &in.MatchLabelMetadataCmkid, &out.MatchLabelMetadataCmkid
		*out = new(string)
		**out = **in
	}
	if in.MatchLabelMetadataEncrypted != nil {
		in, out := &in.MatchLabelMetadataEncrypted, &out.MatchLabelMetadataEncrypted
		*out = new(string)
		**out = **in
	}
	if in.MatchLabelSize != nil {
		in, out := &in.MatchLabelSize, &out.MatchLabelSize
		*out = new(string)
		**out = **in
	}
	if in.MatchLabelVolumeType != nil {
		in, out := &in.MatchLabelVolumeType, &out.MatchLabelVolumeType
		*out = new(string)
		**out = **in
	}
	if in.Name != nil {
		in, out := &in.Name, &out.Name
		*out = new(string)
		**out = **in
	}
	if in.Type != nil {
		in, out := &in.Type, &out.Type
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new StorageSelectorsInitParameters.
func (in *StorageSelectorsInitParameters) DeepCopy() *StorageSelectorsInitParameters {
	if in == nil {
		return nil
	}
	out := new(StorageSelectorsInitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *StorageSelectorsObservation) DeepCopyInto(out *StorageSelectorsObservation) {
	*out = *in
	if in.MatchLabelCount != nil {
		in, out := &in.MatchLabelCount, &out.MatchLabelCount
		*out = new(string)
		**out = **in
	}
	if in.MatchLabelMetadataCmkid != nil {
		in, out := &in.MatchLabelMetadataCmkid, &out.MatchLabelMetadataCmkid
		*out = new(string)
		**out = **in
	}
	if in.MatchLabelMetadataEncrypted != nil {
		in, out := &in.MatchLabelMetadataEncrypted, &out.MatchLabelMetadataEncrypted
		*out = new(string)
		**out = **in
	}
	if in.MatchLabelSize != nil {
		in, out := &in.MatchLabelSize, &out.MatchLabelSize
		*out = new(string)
		**out = **in
	}
	if in.MatchLabelVolumeType != nil {
		in, out := &in.MatchLabelVolumeType, &out.MatchLabelVolumeType
		*out = new(string)
		**out = **in
	}
	if in.Name != nil {
		in, out := &in.Name, &out.Name
		*out = new(string)
		**out = **in
	}
	if in.Type != nil {
		in, out := &in.Type, &out.Type
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new StorageSelectorsObservation.
func (in *StorageSelectorsObservation) DeepCopy() *StorageSelectorsObservation {
	if in == nil {
		return nil
	}
	out := new(StorageSelectorsObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *StorageSelectorsParameters) DeepCopyInto(out *StorageSelectorsParameters) {
	*out = *in
	if in.MatchLabelCount != nil {
		in, out := &in.MatchLabelCount, &out.MatchLabelCount
		*out = new(string)
		**out = **in
	}
	if in.MatchLabelMetadataCmkid != nil {
		in, out := &in.MatchLabelMetadataCmkid, &out.MatchLabelMetadataCmkid
		*out = new(string)
		**out = **in
	}
	if in.MatchLabelMetadataEncrypted != nil {
		in, out := &in.MatchLabelMetadataEncrypted, &out.MatchLabelMetadataEncrypted
		*out = new(string)
		**out = **in
	}
	if in.MatchLabelSize != nil {
		in, out := &in.MatchLabelSize, &out.MatchLabelSize
		*out = new(string)
		**out = **in
	}
	if in.MatchLabelVolumeType != nil {
		in, out := &in.MatchLabelVolumeType, &out.MatchLabelVolumeType
		*out = new(string)
		**out = **in
	}
	if in.Name != nil {
		in, out := &in.Name, &out.Name
		*out = new(string)
		**out = **in
	}
	if in.Type != nil {
		in, out := &in.Type, &out.Type
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new StorageSelectorsParameters.
func (in *StorageSelectorsParameters) DeepCopy() *StorageSelectorsParameters {
	if in == nil {
		return nil
	}
	out := new(StorageSelectorsParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *StrategyInitParameters) DeepCopyInto(out *StrategyInitParameters) {
	*out = *in
	if in.InPlaceRollingUpdate != nil {
		in, out := &in.InPlaceRollingUpdate, &out.InPlaceRollingUpdate
		*out = make([]InPlaceRollingUpdateInitParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.Type != nil {
		in, out := &in.Type, &out.Type
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new StrategyInitParameters.
func (in *StrategyInitParameters) DeepCopy() *StrategyInitParameters {
	if in == nil {
		return nil
	}
	out := new(StrategyInitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *StrategyObservation) DeepCopyInto(out *StrategyObservation) {
	*out = *in
	if in.InPlaceRollingUpdate != nil {
		in, out := &in.InPlaceRollingUpdate, &out.InPlaceRollingUpdate
		*out = make([]InPlaceRollingUpdateObservation, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.Type != nil {
		in, out := &in.Type, &out.Type
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new StrategyObservation.
func (in *StrategyObservation) DeepCopy() *StrategyObservation {
	if in == nil {
		return nil
	}
	out := new(StrategyObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *StrategyParameters) DeepCopyInto(out *StrategyParameters) {
	*out = *in
	if in.InPlaceRollingUpdate != nil {
		in, out := &in.InPlaceRollingUpdate, &out.InPlaceRollingUpdate
		*out = make([]InPlaceRollingUpdateParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.Type != nil {
		in, out := &in.Type, &out.Type
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new StrategyParameters.
func (in *StrategyParameters) DeepCopy() *StrategyParameters {
	if in == nil {
		return nil
	}
	out := new(StrategyParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *TaintsInitParameters) DeepCopyInto(out *TaintsInitParameters) {
	*out = *in
	if in.Effect != nil {
		in, out := &in.Effect, &out.Effect
		*out = new(string)
		**out = **in
	}
	if in.Key != nil {
		in, out := &in.Key, &out.Key
		*out = new(string)
		**out = **in
	}
	if in.Value != nil {
		in, out := &in.Value, &out.Value
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new TaintsInitParameters.
func (in *TaintsInitParameters) DeepCopy() *TaintsInitParameters {
	if in == nil {
		return nil
	}
	out := new(TaintsInitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *TaintsObservation) DeepCopyInto(out *TaintsObservation) {
	*out = *in
	if in.Effect != nil {
		in, out := &in.Effect, &out.Effect
		*out = new(string)
		**out = **in
	}
	if in.Key != nil {
		in, out := &in.Key, &out.Key
		*out = new(string)
		**out = **in
	}
	if in.Value != nil {
		in, out := &in.Value, &out.Value
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new TaintsObservation.
func (in *TaintsObservation) DeepCopy() *TaintsObservation {
	if in == nil {
		return nil
	}
	out := new(TaintsObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *TaintsParameters) DeepCopyInto(out *TaintsParameters) {
	*out = *in
	if in.Effect != nil {
		in, out := &in.Effect, &out.Effect
		*out = new(string)
		**out = **in
	}
	if in.Key != nil {
		in, out := &in.Key, &out.Key
		*out = new(string)
		**out = **in
	}
	if in.Value != nil {
		in, out := &in.Value, &out.Value
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new TaintsParameters.
func (in *TaintsParameters) DeepCopy() *TaintsParameters {
	if in == nil {
		return nil
	}
	out := new(TaintsParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ValuesInitParameters) DeepCopyInto(out *ValuesInitParameters) {
	*out = *in
	if in.Basic != nil {
		in, out := &in.Basic, &out.Basic
		*out = make(map[string]*string, len(*in))
		for key, val := range *in {
			var outVal *string
			if val == nil {
				(*out)[key] = nil
			} else {
				inVal := (*in)[key]
				in, out := &inVal, &outVal
				*out = new(string)
				**out = **in
			}
			(*out)[key] = outVal
		}
	}
	if in.BasicJSON != nil {
		in, out := &in.BasicJSON, &out.BasicJSON
		*out = new(string)
		**out = **in
	}
	if in.Custom != nil {
		in, out := &in.Custom, &out.Custom
		*out = make(map[string]*string, len(*in))
		for key, val := range *in {
			var outVal *string
			if val == nil {
				(*out)[key] = nil
			} else {
				inVal := (*in)[key]
				in, out := &inVal, &outVal
				*out = new(string)
				**out = **in
			}
			(*out)[key] = outVal
		}
	}
	if in.CustomJSON != nil {
		in, out := &in.CustomJSON, &out.CustomJSON
		*out = new(string)
		**out = **in
	}
	if in.Flavor != nil {
		in, out := &in.Flavor, &out.Flavor
		*out = make(map[string]*string, len(*in))
		for key, val := range *in {
			var outVal *string
			if val == nil {
				(*out)[key] = nil
			} else {
				inVal := (*in)[key]
				in, out := &inVal, &outVal
				*out = new(string)
				**out = **in
			}
			(*out)[key] = outVal
		}
	}
	if in.FlavorJSON != nil {
		in, out := &in.FlavorJSON, &out.FlavorJSON
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ValuesInitParameters.
func (in *ValuesInitParameters) DeepCopy() *ValuesInitParameters {
	if in == nil {
		return nil
	}
	out := new(ValuesInitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ValuesObservation) DeepCopyInto(out *ValuesObservation) {
	*out = *in
	if in.Basic != nil {
		in, out := &in.Basic, &out.Basic
		*out = make(map[string]*string, len(*in))
		for key, val := range *in {
			var outVal *string
			if val == nil {
				(*out)[key] = nil
			} else {
				inVal := (*in)[key]
				in, out := &inVal, &outVal
				*out = new(string)
				**out = **in
			}
			(*out)[key] = outVal
		}
	}
	if in.BasicJSON != nil {
		in, out := &in.BasicJSON, &out.BasicJSON
		*out = new(string)
		**out = **in
	}
	if in.Custom != nil {
		in, out := &in.Custom, &out.Custom
		*out = make(map[string]*string, len(*in))
		for key, val := range *in {
			var outVal *string
			if val == nil {
				(*out)[key] = nil
			} else {
				inVal := (*in)[key]
				in, out := &inVal, &outVal
				*out = new(string)
				**out = **in
			}
			(*out)[key] = outVal
		}
	}
	if in.CustomJSON != nil {
		in, out := &in.CustomJSON, &out.CustomJSON
		*out = new(string)
		**out = **in
	}
	if in.Flavor != nil {
		in, out := &in.Flavor, &out.Flavor
		*out = make(map[string]*string, len(*in))
		for key, val := range *in {
			var outVal *string
			if val == nil {
				(*out)[key] = nil
			} else {
				inVal := (*in)[key]
				in, out := &inVal, &outVal
				*out = new(string)
				**out = **in
			}
			(*out)[key] = outVal
		}
	}
	if in.FlavorJSON != nil {
		in, out := &in.FlavorJSON, &out.FlavorJSON
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ValuesObservation.
func (in *ValuesObservation) DeepCopy() *ValuesObservation {
	if in == nil {
		return nil
	}
	out := new(ValuesObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ValuesParameters) DeepCopyInto(out *ValuesParameters) {
	*out = *in
	if in.Basic != nil {
		in, out := &in.Basic, &out.Basic
		*out = make(map[string]*string, len(*in))
		for key, val := range *in {
			var outVal *string
			if val == nil {
				(*out)[key] = nil
			} else {
				inVal := (*in)[key]
				in, out := &inVal, &outVal
				*out = new(string)
				**out = **in
			}
			(*out)[key] = outVal
		}
	}
	if in.BasicJSON != nil {
		in, out := &in.BasicJSON, &out.BasicJSON
		*out = new(string)
		**out = **in
	}
	if in.Custom != nil {
		in, out := &in.Custom, &out.Custom
		*out = make(map[string]*string, len(*in))
		for key, val := range *in {
			var outVal *string
			if val == nil {
				(*out)[key] = nil
			} else {
				inVal := (*in)[key]
				in, out := &inVal, &outVal
				*out = new(string)
				**out = **in
			}
			(*out)[key] = outVal
		}
	}
	if in.CustomJSON != nil {
		in, out := &in.CustomJSON, &out.CustomJSON
		*out = new(string)
		**out = **in
	}
	if in.Flavor != nil {
		in, out := &in.Flavor, &out.Flavor
		*out = make(map[string]*string, len(*in))
		for key, val := range *in {
			var outVal *string
			if val == nil {
				(*out)[key] = nil
			} else {
				inVal := (*in)[key]
				in, out := &inVal, &outVal
				*out = new(string)
				**out = **in
			}
			(*out)[key] = outVal
		}
	}
	if in.FlavorJSON != nil {
		in, out := &in.FlavorJSON, &out.FlavorJSON
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ValuesParameters.
func (in *ValuesParameters) DeepCopy() *ValuesParameters {
	if in == nil {
		return nil
	}
	out := new(ValuesParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *VirtualSpacesInitParameters) DeepCopyInto(out *VirtualSpacesInitParameters) {
	*out = *in
	if in.LvmLvType != nil {
		in, out := &in.LvmLvType, &out.LvmLvType
		*out = new(string)
		**out = **in
	}
	if in.LvmPath != nil {
		in, out := &in.LvmPath, &out.LvmPath
		*out = new(string)
		**out = **in
	}
	if in.Name != nil {
		in, out := &in.Name, &out.Name
		*out = new(string)
		**out = **in
	}
	if in.RuntimeLvType != nil {
		in, out := &in.RuntimeLvType, &out.RuntimeLvType
		*out = new(string)
		**out = **in
	}
	if in.Size != nil {
		in, out := &in.Size, &out.Size
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new VirtualSpacesInitParameters.
func (in *VirtualSpacesInitParameters) DeepCopy() *VirtualSpacesInitParameters {
	if in == nil {
		return nil
	}
	out := new(VirtualSpacesInitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *VirtualSpacesObservation) DeepCopyInto(out *VirtualSpacesObservation) {
	*out = *in
	if in.LvmLvType != nil {
		in, out := &in.LvmLvType, &out.LvmLvType
		*out = new(string)
		**out = **in
	}
	if in.LvmPath != nil {
		in, out := &in.LvmPath, &out.LvmPath
		*out = new(string)
		**out = **in
	}
	if in.Name != nil {
		in, out := &in.Name, &out.Name
		*out = new(string)
		**out = **in
	}
	if in.RuntimeLvType != nil {
		in, out := &in.RuntimeLvType, &out.RuntimeLvType
		*out = new(string)
		**out = **in
	}
	if in.Size != nil {
		in, out := &in.Size, &out.Size
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new VirtualSpacesObservation.
func (in *VirtualSpacesObservation) DeepCopy() *VirtualSpacesObservation {
	if in == nil {
		return nil
	}
	out := new(VirtualSpacesObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *VirtualSpacesParameters) DeepCopyInto(out *VirtualSpacesParameters) {
	*out = *in
	if in.LvmLvType != nil {
		in, out := &in.LvmLvType, &out.LvmLvType
		*out = new(string)
		**out = **in
	}
	if in.LvmPath != nil {
		in, out := &in.LvmPath, &out.LvmPath
		*out = new(string)
		**out = **in
	}
	if in.Name != nil {
		in, out := &in.Name, &out.Name
		*out = new(string)
		**out = **in
	}
	if in.RuntimeLvType != nil {
		in, out := &in.RuntimeLvType, &out.RuntimeLvType
		*out = new(string)
		**out = **in
	}
	if in.Size != nil {
		in, out := &in.Size, &out.Size
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new VirtualSpacesParameters.
func (in *VirtualSpacesParameters) DeepCopy() *VirtualSpacesParameters {
	if in == nil {
		return nil
	}
	out := new(VirtualSpacesParameters)
	in.DeepCopyInto(out)
	return out
}
