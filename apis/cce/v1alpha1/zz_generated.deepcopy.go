//go:build !ignore_autogenerated

/*
Copyright 2022 Upbound Inc.
*/

// Code generated by controller-gen. DO NOT EDIT.

package v1alpha1

import (
	"github.com/crossplane/crossplane-runtime/apis/common/v1"
	runtime "k8s.io/apimachinery/pkg/runtime"
)

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *CertificateClustersInitParameters) DeepCopyInto(out *CertificateClustersInitParameters) {
	*out = *in
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new CertificateClustersInitParameters.
func (in *CertificateClustersInitParameters) DeepCopy() *CertificateClustersInitParameters {
	if in == nil {
		return nil
	}
	out := new(CertificateClustersInitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *CertificateClustersObservation) DeepCopyInto(out *CertificateClustersObservation) {
	*out = *in
	if in.CertificateAuthorityData != nil {
		in, out := &in.CertificateAuthorityData, &out.CertificateAuthorityData
		*out = new(string)
		**out = **in
	}
	if in.Name != nil {
		in, out := &in.Name, &out.Name
		*out = new(string)
		**out = **in
	}
	if in.Server != nil {
		in, out := &in.Server, &out.Server
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new CertificateClustersObservation.
func (in *CertificateClustersObservation) DeepCopy() *CertificateClustersObservation {
	if in == nil {
		return nil
	}
	out := new(CertificateClustersObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *CertificateClustersParameters) DeepCopyInto(out *CertificateClustersParameters) {
	*out = *in
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new CertificateClustersParameters.
func (in *CertificateClustersParameters) DeepCopy() *CertificateClustersParameters {
	if in == nil {
		return nil
	}
	out := new(CertificateClustersParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *CertificateUsersInitParameters) DeepCopyInto(out *CertificateUsersInitParameters) {
	*out = *in
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new CertificateUsersInitParameters.
func (in *CertificateUsersInitParameters) DeepCopy() *CertificateUsersInitParameters {
	if in == nil {
		return nil
	}
	out := new(CertificateUsersInitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *CertificateUsersObservation) DeepCopyInto(out *CertificateUsersObservation) {
	*out = *in
	if in.ClientCertificateData != nil {
		in, out := &in.ClientCertificateData, &out.ClientCertificateData
		*out = new(string)
		**out = **in
	}
	if in.ClientKeyData != nil {
		in, out := &in.ClientKeyData, &out.ClientKeyData
		*out = new(string)
		**out = **in
	}
	if in.Name != nil {
		in, out := &in.Name, &out.Name
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new CertificateUsersObservation.
func (in *CertificateUsersObservation) DeepCopy() *CertificateUsersObservation {
	if in == nil {
		return nil
	}
	out := new(CertificateUsersObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *CertificateUsersParameters) DeepCopyInto(out *CertificateUsersParameters) {
	*out = *in
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new CertificateUsersParameters.
func (in *CertificateUsersParameters) DeepCopy() *CertificateUsersParameters {
	if in == nil {
		return nil
	}
	out := new(CertificateUsersParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *Cluster) DeepCopyInto(out *Cluster) {
	*out = *in
	out.TypeMeta = in.TypeMeta
	in.ObjectMeta.DeepCopyInto(&out.ObjectMeta)
	in.Spec.DeepCopyInto(&out.Spec)
	in.Status.DeepCopyInto(&out.Status)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new Cluster.
func (in *Cluster) DeepCopy() *Cluster {
	if in == nil {
		return nil
	}
	out := new(Cluster)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyObject is an autogenerated deepcopy function, copying the receiver, creating a new runtime.Object.
func (in *Cluster) DeepCopyObject() runtime.Object {
	if c := in.DeepCopy(); c != nil {
		return c
	}
	return nil
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ClusterInitParameters) DeepCopyInto(out *ClusterInitParameters) {
	*out = *in
	if in.Alias != nil {
		in, out := &in.Alias, &out.Alias
		*out = new(string)
		**out = **in
	}
	if in.Annotations != nil {
		in, out := &in.Annotations, &out.Annotations
		*out = make(map[string]*string, len(*in))
		for key, val := range *in {
			var outVal *string
			if val == nil {
				(*out)[key] = nil
			} else {
				inVal := (*in)[key]
				in, out := &inVal, &outVal
				*out = new(string)
				**out = **in
			}
			(*out)[key] = outVal
		}
	}
	if in.AuthenticatingProxyCA != nil {
		in, out := &in.AuthenticatingProxyCA, &out.AuthenticatingProxyCA
		*out = new(string)
		**out = **in
	}
	if in.AuthenticatingProxyCert != nil {
		in, out := &in.AuthenticatingProxyCert, &out.AuthenticatingProxyCert
		*out = new(string)
		**out = **in
	}
	if in.AuthenticatingProxyPrivateKey != nil {
		in, out := &in.AuthenticatingProxyPrivateKey, &out.AuthenticatingProxyPrivateKey
		*out = new(string)
		**out = **in
	}
	if in.AuthenticationMode != nil {
		in, out := &in.AuthenticationMode, &out.AuthenticationMode
		*out = new(string)
		**out = **in
	}
	if in.AutoPay != nil {
		in, out := &in.AutoPay, &out.AutoPay
		*out = new(string)
		**out = **in
	}
	if in.AutoRenew != nil {
		in, out := &in.AutoRenew, &out.AutoRenew
		*out = new(string)
		**out = **in
	}
	if in.BillingMode != nil {
		in, out := &in.BillingMode, &out.BillingMode
		*out = new(float64)
		**out = **in
	}
	if in.ChargingMode != nil {
		in, out := &in.ChargingMode, &out.ChargingMode
		*out = new(string)
		**out = **in
	}
	if in.ClusterType != nil {
		in, out := &in.ClusterType, &out.ClusterType
		*out = new(string)
		**out = **in
	}
	if in.ClusterVersion != nil {
		in, out := &in.ClusterVersion, &out.ClusterVersion
		*out = new(string)
		**out = **in
	}
	if in.ComponentConfigurations != nil {
		in, out := &in.ComponentConfigurations, &out.ComponentConfigurations
		*out = make([]ComponentConfigurationsInitParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.ContainerNetworkCidr != nil {
		in, out := &in.ContainerNetworkCidr, &out.ContainerNetworkCidr
		*out = new(string)
		**out = **in
	}
	if in.ContainerNetworkType != nil {
		in, out := &in.ContainerNetworkType, &out.ContainerNetworkType
		*out = new(string)
		**out = **in
	}
	if in.CustomSan != nil {
		in, out := &in.CustomSan, &out.CustomSan
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.DeleteAll != nil {
		in, out := &in.DeleteAll, &out.DeleteAll
		*out = new(string)
		**out = **in
	}
	if in.DeleteEFS != nil {
		in, out := &in.DeleteEFS, &out.DeleteEFS
		*out = new(string)
		**out = **in
	}
	if in.DeleteEni != nil {
		in, out := &in.DeleteEni, &out.DeleteEni
		*out = new(string)
		**out = **in
	}
	if in.DeleteEvs != nil {
		in, out := &in.DeleteEvs, &out.DeleteEvs
		*out = new(string)
		**out = **in
	}
	if in.DeleteNet != nil {
		in, out := &in.DeleteNet, &out.DeleteNet
		*out = new(string)
		**out = **in
	}
	if in.DeleteObs != nil {
		in, out := &in.DeleteObs, &out.DeleteObs
		*out = new(string)
		**out = **in
	}
	if in.DeleteSfs != nil {
		in, out := &in.DeleteSfs, &out.DeleteSfs
		*out = new(string)
		**out = **in
	}
	if in.Description != nil {
		in, out := &in.Description, &out.Description
		*out = new(string)
		**out = **in
	}
	if in.EIP != nil {
		in, out := &in.EIP, &out.EIP
		*out = new(string)
		**out = **in
	}
	if in.EnableDistributeManagement != nil {
		in, out := &in.EnableDistributeManagement, &out.EnableDistributeManagement
		*out = new(bool)
		**out = **in
	}
	if in.EniSubnetCidr != nil {
		in, out := &in.EniSubnetCidr, &out.EniSubnetCidr
		*out = new(string)
		**out = **in
	}
	if in.EniSubnetID != nil {
		in, out := &in.EniSubnetID, &out.EniSubnetID
		*out = new(string)
		**out = **in
	}
	if in.EnterpriseProjectID != nil {
		in, out := &in.EnterpriseProjectID, &out.EnterpriseProjectID
		*out = new(string)
		**out = **in
	}
	if in.ExtendParam != nil {
		in, out := &in.ExtendParam, &out.ExtendParam
		*out = make(map[string]*string, len(*in))
		for key, val := range *in {
			var outVal *string
			if val == nil {
				(*out)[key] = nil
			} else {
				inVal := (*in)[key]
				in, out := &inVal, &outVal
				*out = new(string)
				**out = **in
			}
			(*out)[key] = outVal
		}
	}
	if in.ExtendParams != nil {
		in, out := &in.ExtendParams, &out.ExtendParams
		*out = make([]ExtendParamsInitParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.FlavorID != nil {
		in, out := &in.FlavorID, &out.FlavorID
		*out = new(string)
		**out = **in
	}
	if in.Hibernate != nil {
		in, out := &in.Hibernate, &out.Hibernate
		*out = new(bool)
		**out = **in
	}
	if in.HighwaySubnetID != nil {
		in, out := &in.HighwaySubnetID, &out.HighwaySubnetID
		*out = new(string)
		**out = **in
	}
	if in.IPv6Enable != nil {
		in, out := &in.IPv6Enable, &out.IPv6Enable
		*out = new(bool)
		**out = **in
	}
	if in.KubeProxyMode != nil {
		in, out := &in.KubeProxyMode, &out.KubeProxyMode
		*out = new(string)
		**out = **in
	}
	if in.Labels != nil {
		in, out := &in.Labels, &out.Labels
		*out = make(map[string]*string, len(*in))
		for key, val := range *in {
			var outVal *string
			if val == nil {
				(*out)[key] = nil
			} else {
				inVal := (*in)[key]
				in, out := &inVal, &outVal
				*out = new(string)
				**out = **in
			}
			(*out)[key] = outVal
		}
	}
	if in.Masters != nil {
		in, out := &in.Masters, &out.Masters
		*out = make([]MastersInitParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.MultiAz != nil {
		in, out := &in.MultiAz, &out.MultiAz
		*out = new(bool)
		**out = **in
	}
	if in.Name != nil {
		in, out := &in.Name, &out.Name
		*out = new(string)
		**out = **in
	}
	if in.Period != nil {
		in, out := &in.Period, &out.Period
		*out = new(float64)
		**out = **in
	}
	if in.PeriodUnit != nil {
		in, out := &in.PeriodUnit, &out.PeriodUnit
		*out = new(string)
		**out = **in
	}
	if in.Region != nil {
		in, out := &in.Region, &out.Region
		*out = new(string)
		**out = **in
	}
	if in.SecurityGroupID != nil {
		in, out := &in.SecurityGroupID, &out.SecurityGroupID
		*out = new(string)
		**out = **in
	}
	if in.ServiceNetworkCidr != nil {
		in, out := &in.ServiceNetworkCidr, &out.ServiceNetworkCidr
		*out = new(string)
		**out = **in
	}
	if in.SubnetID != nil {
		in, out := &in.SubnetID, &out.SubnetID
		*out = new(string)
		**out = **in
	}
	if in.SupportIstio != nil {
		in, out := &in.SupportIstio, &out.SupportIstio
		*out = new(bool)
		**out = **in
	}
	if in.Tags != nil {
		in, out := &in.Tags, &out.Tags
		*out = make(map[string]*string, len(*in))
		for key, val := range *in {
			var outVal *string
			if val == nil {
				(*out)[key] = nil
			} else {
				inVal := (*in)[key]
				in, out := &inVal, &outVal
				*out = new(string)
				**out = **in
			}
			(*out)[key] = outVal
		}
	}
	if in.VPCID != nil {
		in, out := &in.VPCID, &out.VPCID
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ClusterInitParameters.
func (in *ClusterInitParameters) DeepCopy() *ClusterInitParameters {
	if in == nil {
		return nil
	}
	out := new(ClusterInitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ClusterList) DeepCopyInto(out *ClusterList) {
	*out = *in
	out.TypeMeta = in.TypeMeta
	in.ListMeta.DeepCopyInto(&out.ListMeta)
	if in.Items != nil {
		in, out := &in.Items, &out.Items
		*out = make([]Cluster, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ClusterList.
func (in *ClusterList) DeepCopy() *ClusterList {
	if in == nil {
		return nil
	}
	out := new(ClusterList)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyObject is an autogenerated deepcopy function, copying the receiver, creating a new runtime.Object.
func (in *ClusterList) DeepCopyObject() runtime.Object {
	if c := in.DeepCopy(); c != nil {
		return c
	}
	return nil
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ClusterObservation) DeepCopyInto(out *ClusterObservation) {
	*out = *in
	if in.Alias != nil {
		in, out := &in.Alias, &out.Alias
		*out = new(string)
		**out = **in
	}
	if in.Annotations != nil {
		in, out := &in.Annotations, &out.Annotations
		*out = make(map[string]*string, len(*in))
		for key, val := range *in {
			var outVal *string
			if val == nil {
				(*out)[key] = nil
			} else {
				inVal := (*in)[key]
				in, out := &inVal, &outVal
				*out = new(string)
				**out = **in
			}
			(*out)[key] = outVal
		}
	}
	if in.AuthenticatingProxyCA != nil {
		in, out := &in.AuthenticatingProxyCA, &out.AuthenticatingProxyCA
		*out = new(string)
		**out = **in
	}
	if in.AuthenticatingProxyCert != nil {
		in, out := &in.AuthenticatingProxyCert, &out.AuthenticatingProxyCert
		*out = new(string)
		**out = **in
	}
	if in.AuthenticatingProxyPrivateKey != nil {
		in, out := &in.AuthenticatingProxyPrivateKey, &out.AuthenticatingProxyPrivateKey
		*out = new(string)
		**out = **in
	}
	if in.AuthenticationMode != nil {
		in, out := &in.AuthenticationMode, &out.AuthenticationMode
		*out = new(string)
		**out = **in
	}
	if in.AutoPay != nil {
		in, out := &in.AutoPay, &out.AutoPay
		*out = new(string)
		**out = **in
	}
	if in.AutoRenew != nil {
		in, out := &in.AutoRenew, &out.AutoRenew
		*out = new(string)
		**out = **in
	}
	if in.BillingMode != nil {
		in, out := &in.BillingMode, &out.BillingMode
		*out = new(float64)
		**out = **in
	}
	if in.Category != nil {
		in, out := &in.Category, &out.Category
		*out = new(string)
		**out = **in
	}
	if in.CertificateClusters != nil {
		in, out := &in.CertificateClusters, &out.CertificateClusters
		*out = make([]CertificateClustersObservation, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.CertificateUsers != nil {
		in, out := &in.CertificateUsers, &out.CertificateUsers
		*out = make([]CertificateUsersObservation, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.ChargingMode != nil {
		in, out := &in.ChargingMode, &out.ChargingMode
		*out = new(string)
		**out = **in
	}
	if in.ClusterType != nil {
		in, out := &in.ClusterType, &out.ClusterType
		*out = new(string)
		**out = **in
	}
	if in.ClusterVersion != nil {
		in, out := &in.ClusterVersion, &out.ClusterVersion
		*out = new(string)
		**out = **in
	}
	if in.ComponentConfigurations != nil {
		in, out := &in.ComponentConfigurations, &out.ComponentConfigurations
		*out = make([]ComponentConfigurationsObservation, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.ContainerNetworkCidr != nil {
		in, out := &in.ContainerNetworkCidr, &out.ContainerNetworkCidr
		*out = new(string)
		**out = **in
	}
	if in.ContainerNetworkType != nil {
		in, out := &in.ContainerNetworkType, &out.ContainerNetworkType
		*out = new(string)
		**out = **in
	}
	if in.CustomSan != nil {
		in, out := &in.CustomSan, &out.CustomSan
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.DeleteAll != nil {
		in, out := &in.DeleteAll, &out.DeleteAll
		*out = new(string)
		**out = **in
	}
	if in.DeleteEFS != nil {
		in, out := &in.DeleteEFS, &out.DeleteEFS
		*out = new(string)
		**out = **in
	}
	if in.DeleteEni != nil {
		in, out := &in.DeleteEni, &out.DeleteEni
		*out = new(string)
		**out = **in
	}
	if in.DeleteEvs != nil {
		in, out := &in.DeleteEvs, &out.DeleteEvs
		*out = new(string)
		**out = **in
	}
	if in.DeleteNet != nil {
		in, out := &in.DeleteNet, &out.DeleteNet
		*out = new(string)
		**out = **in
	}
	if in.DeleteObs != nil {
		in, out := &in.DeleteObs, &out.DeleteObs
		*out = new(string)
		**out = **in
	}
	if in.DeleteSfs != nil {
		in, out := &in.DeleteSfs, &out.DeleteSfs
		*out = new(string)
		**out = **in
	}
	if in.Description != nil {
		in, out := &in.Description, &out.Description
		*out = new(string)
		**out = **in
	}
	if in.EIP != nil {
		in, out := &in.EIP, &out.EIP
		*out = new(string)
		**out = **in
	}
	if in.EnableDistributeManagement != nil {
		in, out := &in.EnableDistributeManagement, &out.EnableDistributeManagement
		*out = new(bool)
		**out = **in
	}
	if in.EniSubnetCidr != nil {
		in, out := &in.EniSubnetCidr, &out.EniSubnetCidr
		*out = new(string)
		**out = **in
	}
	if in.EniSubnetID != nil {
		in, out := &in.EniSubnetID, &out.EniSubnetID
		*out = new(string)
		**out = **in
	}
	if in.EnterpriseProjectID != nil {
		in, out := &in.EnterpriseProjectID, &out.EnterpriseProjectID
		*out = new(string)
		**out = **in
	}
	if in.ExtendParam != nil {
		in, out := &in.ExtendParam, &out.ExtendParam
		*out = make(map[string]*string, len(*in))
		for key, val := range *in {
			var outVal *string
			if val == nil {
				(*out)[key] = nil
			} else {
				inVal := (*in)[key]
				in, out := &inVal, &outVal
				*out = new(string)
				**out = **in
			}
			(*out)[key] = outVal
		}
	}
	if in.ExtendParams != nil {
		in, out := &in.ExtendParams, &out.ExtendParams
		*out = make([]ExtendParamsObservation, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.FlavorID != nil {
		in, out := &in.FlavorID, &out.FlavorID
		*out = new(string)
		**out = **in
	}
	if in.Hibernate != nil {
		in, out := &in.Hibernate, &out.Hibernate
		*out = new(bool)
		**out = **in
	}
	if in.HighwaySubnetID != nil {
		in, out := &in.HighwaySubnetID, &out.HighwaySubnetID
		*out = new(string)
		**out = **in
	}
	if in.ID != nil {
		in, out := &in.ID, &out.ID
		*out = new(string)
		**out = **in
	}
	if in.IPv6Enable != nil {
		in, out := &in.IPv6Enable, &out.IPv6Enable
		*out = new(bool)
		**out = **in
	}
	if in.KubeConfigRaw != nil {
		in, out := &in.KubeConfigRaw, &out.KubeConfigRaw
		*out = new(string)
		**out = **in
	}
	if in.KubeProxyMode != nil {
		in, out := &in.KubeProxyMode, &out.KubeProxyMode
		*out = new(string)
		**out = **in
	}
	if in.Labels != nil {
		in, out := &in.Labels, &out.Labels
		*out = make(map[string]*string, len(*in))
		for key, val := range *in {
			var outVal *string
			if val == nil {
				(*out)[key] = nil
			} else {
				inVal := (*in)[key]
				in, out := &inVal, &outVal
				*out = new(string)
				**out = **in
			}
			(*out)[key] = outVal
		}
	}
	if in.Masters != nil {
		in, out := &in.Masters, &out.Masters
		*out = make([]MastersObservation, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.MultiAz != nil {
		in, out := &in.MultiAz, &out.MultiAz
		*out = new(bool)
		**out = **in
	}
	if in.Name != nil {
		in, out := &in.Name, &out.Name
		*out = new(string)
		**out = **in
	}
	if in.Period != nil {
		in, out := &in.Period, &out.Period
		*out = new(float64)
		**out = **in
	}
	if in.PeriodUnit != nil {
		in, out := &in.PeriodUnit, &out.PeriodUnit
		*out = new(string)
		**out = **in
	}
	if in.Region != nil {
		in, out := &in.Region, &out.Region
		*out = new(string)
		**out = **in
	}
	if in.SecurityGroupID != nil {
		in, out := &in.SecurityGroupID, &out.SecurityGroupID
		*out = new(string)
		**out = **in
	}
	if in.ServiceNetworkCidr != nil {
		in, out := &in.ServiceNetworkCidr, &out.ServiceNetworkCidr
		*out = new(string)
		**out = **in
	}
	if in.Status != nil {
		in, out := &in.Status, &out.Status
		*out = new(string)
		**out = **in
	}
	if in.SubnetID != nil {
		in, out := &in.SubnetID, &out.SubnetID
		*out = new(string)
		**out = **in
	}
	if in.SupportIstio != nil {
		in, out := &in.SupportIstio, &out.SupportIstio
		*out = new(bool)
		**out = **in
	}
	if in.Tags != nil {
		in, out := &in.Tags, &out.Tags
		*out = make(map[string]*string, len(*in))
		for key, val := range *in {
			var outVal *string
			if val == nil {
				(*out)[key] = nil
			} else {
				inVal := (*in)[key]
				in, out := &inVal, &outVal
				*out = new(string)
				**out = **in
			}
			(*out)[key] = outVal
		}
	}
	if in.VPCID != nil {
		in, out := &in.VPCID, &out.VPCID
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ClusterObservation.
func (in *ClusterObservation) DeepCopy() *ClusterObservation {
	if in == nil {
		return nil
	}
	out := new(ClusterObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ClusterParameters) DeepCopyInto(out *ClusterParameters) {
	*out = *in
	if in.Alias != nil {
		in, out := &in.Alias, &out.Alias
		*out = new(string)
		**out = **in
	}
	if in.Annotations != nil {
		in, out := &in.Annotations, &out.Annotations
		*out = make(map[string]*string, len(*in))
		for key, val := range *in {
			var outVal *string
			if val == nil {
				(*out)[key] = nil
			} else {
				inVal := (*in)[key]
				in, out := &inVal, &outVal
				*out = new(string)
				**out = **in
			}
			(*out)[key] = outVal
		}
	}
	if in.AuthenticatingProxyCA != nil {
		in, out := &in.AuthenticatingProxyCA, &out.AuthenticatingProxyCA
		*out = new(string)
		**out = **in
	}
	if in.AuthenticatingProxyCert != nil {
		in, out := &in.AuthenticatingProxyCert, &out.AuthenticatingProxyCert
		*out = new(string)
		**out = **in
	}
	if in.AuthenticatingProxyPrivateKey != nil {
		in, out := &in.AuthenticatingProxyPrivateKey, &out.AuthenticatingProxyPrivateKey
		*out = new(string)
		**out = **in
	}
	if in.AuthenticationMode != nil {
		in, out := &in.AuthenticationMode, &out.AuthenticationMode
		*out = new(string)
		**out = **in
	}
	if in.AutoPay != nil {
		in, out := &in.AutoPay, &out.AutoPay
		*out = new(string)
		**out = **in
	}
	if in.AutoRenew != nil {
		in, out := &in.AutoRenew, &out.AutoRenew
		*out = new(string)
		**out = **in
	}
	if in.BillingMode != nil {
		in, out := &in.BillingMode, &out.BillingMode
		*out = new(float64)
		**out = **in
	}
	if in.ChargingMode != nil {
		in, out := &in.ChargingMode, &out.ChargingMode
		*out = new(string)
		**out = **in
	}
	if in.ClusterType != nil {
		in, out := &in.ClusterType, &out.ClusterType
		*out = new(string)
		**out = **in
	}
	if in.ClusterVersion != nil {
		in, out := &in.ClusterVersion, &out.ClusterVersion
		*out = new(string)
		**out = **in
	}
	if in.ComponentConfigurations != nil {
		in, out := &in.ComponentConfigurations, &out.ComponentConfigurations
		*out = make([]ComponentConfigurationsParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.ContainerNetworkCidr != nil {
		in, out := &in.ContainerNetworkCidr, &out.ContainerNetworkCidr
		*out = new(string)
		**out = **in
	}
	if in.ContainerNetworkType != nil {
		in, out := &in.ContainerNetworkType, &out.ContainerNetworkType
		*out = new(string)
		**out = **in
	}
	if in.CustomSan != nil {
		in, out := &in.CustomSan, &out.CustomSan
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.DeleteAll != nil {
		in, out := &in.DeleteAll, &out.DeleteAll
		*out = new(string)
		**out = **in
	}
	if in.DeleteEFS != nil {
		in, out := &in.DeleteEFS, &out.DeleteEFS
		*out = new(string)
		**out = **in
	}
	if in.DeleteEni != nil {
		in, out := &in.DeleteEni, &out.DeleteEni
		*out = new(string)
		**out = **in
	}
	if in.DeleteEvs != nil {
		in, out := &in.DeleteEvs, &out.DeleteEvs
		*out = new(string)
		**out = **in
	}
	if in.DeleteNet != nil {
		in, out := &in.DeleteNet, &out.DeleteNet
		*out = new(string)
		**out = **in
	}
	if in.DeleteObs != nil {
		in, out := &in.DeleteObs, &out.DeleteObs
		*out = new(string)
		**out = **in
	}
	if in.DeleteSfs != nil {
		in, out := &in.DeleteSfs, &out.DeleteSfs
		*out = new(string)
		**out = **in
	}
	if in.Description != nil {
		in, out := &in.Description, &out.Description
		*out = new(string)
		**out = **in
	}
	if in.EIP != nil {
		in, out := &in.EIP, &out.EIP
		*out = new(string)
		**out = **in
	}
	if in.EnableDistributeManagement != nil {
		in, out := &in.EnableDistributeManagement, &out.EnableDistributeManagement
		*out = new(bool)
		**out = **in
	}
	if in.EniSubnetCidr != nil {
		in, out := &in.EniSubnetCidr, &out.EniSubnetCidr
		*out = new(string)
		**out = **in
	}
	if in.EniSubnetID != nil {
		in, out := &in.EniSubnetID, &out.EniSubnetID
		*out = new(string)
		**out = **in
	}
	if in.EnterpriseProjectID != nil {
		in, out := &in.EnterpriseProjectID, &out.EnterpriseProjectID
		*out = new(string)
		**out = **in
	}
	if in.ExtendParam != nil {
		in, out := &in.ExtendParam, &out.ExtendParam
		*out = make(map[string]*string, len(*in))
		for key, val := range *in {
			var outVal *string
			if val == nil {
				(*out)[key] = nil
			} else {
				inVal := (*in)[key]
				in, out := &inVal, &outVal
				*out = new(string)
				**out = **in
			}
			(*out)[key] = outVal
		}
	}
	if in.ExtendParams != nil {
		in, out := &in.ExtendParams, &out.ExtendParams
		*out = make([]ExtendParamsParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.FlavorID != nil {
		in, out := &in.FlavorID, &out.FlavorID
		*out = new(string)
		**out = **in
	}
	if in.Hibernate != nil {
		in, out := &in.Hibernate, &out.Hibernate
		*out = new(bool)
		**out = **in
	}
	if in.HighwaySubnetID != nil {
		in, out := &in.HighwaySubnetID, &out.HighwaySubnetID
		*out = new(string)
		**out = **in
	}
	if in.IPv6Enable != nil {
		in, out := &in.IPv6Enable, &out.IPv6Enable
		*out = new(bool)
		**out = **in
	}
	if in.KubeProxyMode != nil {
		in, out := &in.KubeProxyMode, &out.KubeProxyMode
		*out = new(string)
		**out = **in
	}
	if in.Labels != nil {
		in, out := &in.Labels, &out.Labels
		*out = make(map[string]*string, len(*in))
		for key, val := range *in {
			var outVal *string
			if val == nil {
				(*out)[key] = nil
			} else {
				inVal := (*in)[key]
				in, out := &inVal, &outVal
				*out = new(string)
				**out = **in
			}
			(*out)[key] = outVal
		}
	}
	if in.Masters != nil {
		in, out := &in.Masters, &out.Masters
		*out = make([]MastersParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.MultiAz != nil {
		in, out := &in.MultiAz, &out.MultiAz
		*out = new(bool)
		**out = **in
	}
	if in.Name != nil {
		in, out := &in.Name, &out.Name
		*out = new(string)
		**out = **in
	}
	if in.Period != nil {
		in, out := &in.Period, &out.Period
		*out = new(float64)
		**out = **in
	}
	if in.PeriodUnit != nil {
		in, out := &in.PeriodUnit, &out.PeriodUnit
		*out = new(string)
		**out = **in
	}
	if in.Region != nil {
		in, out := &in.Region, &out.Region
		*out = new(string)
		**out = **in
	}
	if in.SecurityGroupID != nil {
		in, out := &in.SecurityGroupID, &out.SecurityGroupID
		*out = new(string)
		**out = **in
	}
	if in.ServiceNetworkCidr != nil {
		in, out := &in.ServiceNetworkCidr, &out.ServiceNetworkCidr
		*out = new(string)
		**out = **in
	}
	if in.SubnetID != nil {
		in, out := &in.SubnetID, &out.SubnetID
		*out = new(string)
		**out = **in
	}
	if in.SupportIstio != nil {
		in, out := &in.SupportIstio, &out.SupportIstio
		*out = new(bool)
		**out = **in
	}
	if in.Tags != nil {
		in, out := &in.Tags, &out.Tags
		*out = make(map[string]*string, len(*in))
		for key, val := range *in {
			var outVal *string
			if val == nil {
				(*out)[key] = nil
			} else {
				inVal := (*in)[key]
				in, out := &inVal, &outVal
				*out = new(string)
				**out = **in
			}
			(*out)[key] = outVal
		}
	}
	if in.VPCID != nil {
		in, out := &in.VPCID, &out.VPCID
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ClusterParameters.
func (in *ClusterParameters) DeepCopy() *ClusterParameters {
	if in == nil {
		return nil
	}
	out := new(ClusterParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ClusterSpec) DeepCopyInto(out *ClusterSpec) {
	*out = *in
	in.ResourceSpec.DeepCopyInto(&out.ResourceSpec)
	in.ForProvider.DeepCopyInto(&out.ForProvider)
	in.InitProvider.DeepCopyInto(&out.InitProvider)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ClusterSpec.
func (in *ClusterSpec) DeepCopy() *ClusterSpec {
	if in == nil {
		return nil
	}
	out := new(ClusterSpec)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ClusterStatus) DeepCopyInto(out *ClusterStatus) {
	*out = *in
	in.ResourceStatus.DeepCopyInto(&out.ResourceStatus)
	in.AtProvider.DeepCopyInto(&out.AtProvider)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ClusterStatus.
func (in *ClusterStatus) DeepCopy() *ClusterStatus {
	if in == nil {
		return nil
	}
	out := new(ClusterStatus)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ComponentConfigurationsInitParameters) DeepCopyInto(out *ComponentConfigurationsInitParameters) {
	*out = *in
	if in.Configurations != nil {
		in, out := &in.Configurations, &out.Configurations
		*out = new(string)
		**out = **in
	}
	if in.Name != nil {
		in, out := &in.Name, &out.Name
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ComponentConfigurationsInitParameters.
func (in *ComponentConfigurationsInitParameters) DeepCopy() *ComponentConfigurationsInitParameters {
	if in == nil {
		return nil
	}
	out := new(ComponentConfigurationsInitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ComponentConfigurationsObservation) DeepCopyInto(out *ComponentConfigurationsObservation) {
	*out = *in
	if in.Configurations != nil {
		in, out := &in.Configurations, &out.Configurations
		*out = new(string)
		**out = **in
	}
	if in.Name != nil {
		in, out := &in.Name, &out.Name
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ComponentConfigurationsObservation.
func (in *ComponentConfigurationsObservation) DeepCopy() *ComponentConfigurationsObservation {
	if in == nil {
		return nil
	}
	out := new(ComponentConfigurationsObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ComponentConfigurationsParameters) DeepCopyInto(out *ComponentConfigurationsParameters) {
	*out = *in
	if in.Configurations != nil {
		in, out := &in.Configurations, &out.Configurations
		*out = new(string)
		**out = **in
	}
	if in.Name != nil {
		in, out := &in.Name, &out.Name
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ComponentConfigurationsParameters.
func (in *ComponentConfigurationsParameters) DeepCopy() *ComponentConfigurationsParameters {
	if in == nil {
		return nil
	}
	out := new(ComponentConfigurationsParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *DataVolumesInitParameters) DeepCopyInto(out *DataVolumesInitParameters) {
	*out = *in
	if in.DssPoolID != nil {
		in, out := &in.DssPoolID, &out.DssPoolID
		*out = new(string)
		**out = **in
	}
	if in.ExtendParam != nil {
		in, out := &in.ExtendParam, &out.ExtendParam
		*out = new(string)
		**out = **in
	}
	if in.ExtendParams != nil {
		in, out := &in.ExtendParams, &out.ExtendParams
		*out = make(map[string]*string, len(*in))
		for key, val := range *in {
			var outVal *string
			if val == nil {
				(*out)[key] = nil
			} else {
				inVal := (*in)[key]
				in, out := &inVal, &outVal
				*out = new(string)
				**out = **in
			}
			(*out)[key] = outVal
		}
	}
	if in.HwPassthrough != nil {
		in, out := &in.HwPassthrough, &out.HwPassthrough
		*out = new(bool)
		**out = **in
	}
	if in.KMSKeyID != nil {
		in, out := &in.KMSKeyID, &out.KMSKeyID
		*out = new(string)
		**out = **in
	}
	if in.Size != nil {
		in, out := &in.Size, &out.Size
		*out = new(float64)
		**out = **in
	}
	if in.Volumetype != nil {
		in, out := &in.Volumetype, &out.Volumetype
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new DataVolumesInitParameters.
func (in *DataVolumesInitParameters) DeepCopy() *DataVolumesInitParameters {
	if in == nil {
		return nil
	}
	out := new(DataVolumesInitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *DataVolumesObservation) DeepCopyInto(out *DataVolumesObservation) {
	*out = *in
	if in.DssPoolID != nil {
		in, out := &in.DssPoolID, &out.DssPoolID
		*out = new(string)
		**out = **in
	}
	if in.ExtendParam != nil {
		in, out := &in.ExtendParam, &out.ExtendParam
		*out = new(string)
		**out = **in
	}
	if in.ExtendParams != nil {
		in, out := &in.ExtendParams, &out.ExtendParams
		*out = make(map[string]*string, len(*in))
		for key, val := range *in {
			var outVal *string
			if val == nil {
				(*out)[key] = nil
			} else {
				inVal := (*in)[key]
				in, out := &inVal, &outVal
				*out = new(string)
				**out = **in
			}
			(*out)[key] = outVal
		}
	}
	if in.HwPassthrough != nil {
		in, out := &in.HwPassthrough, &out.HwPassthrough
		*out = new(bool)
		**out = **in
	}
	if in.KMSKeyID != nil {
		in, out := &in.KMSKeyID, &out.KMSKeyID
		*out = new(string)
		**out = **in
	}
	if in.Size != nil {
		in, out := &in.Size, &out.Size
		*out = new(float64)
		**out = **in
	}
	if in.Volumetype != nil {
		in, out := &in.Volumetype, &out.Volumetype
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new DataVolumesObservation.
func (in *DataVolumesObservation) DeepCopy() *DataVolumesObservation {
	if in == nil {
		return nil
	}
	out := new(DataVolumesObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *DataVolumesParameters) DeepCopyInto(out *DataVolumesParameters) {
	*out = *in
	if in.DssPoolID != nil {
		in, out := &in.DssPoolID, &out.DssPoolID
		*out = new(string)
		**out = **in
	}
	if in.ExtendParam != nil {
		in, out := &in.ExtendParam, &out.ExtendParam
		*out = new(string)
		**out = **in
	}
	if in.ExtendParams != nil {
		in, out := &in.ExtendParams, &out.ExtendParams
		*out = make(map[string]*string, len(*in))
		for key, val := range *in {
			var outVal *string
			if val == nil {
				(*out)[key] = nil
			} else {
				inVal := (*in)[key]
				in, out := &inVal, &outVal
				*out = new(string)
				**out = **in
			}
			(*out)[key] = outVal
		}
	}
	if in.HwPassthrough != nil {
		in, out := &in.HwPassthrough, &out.HwPassthrough
		*out = new(bool)
		**out = **in
	}
	if in.KMSKeyID != nil {
		in, out := &in.KMSKeyID, &out.KMSKeyID
		*out = new(string)
		**out = **in
	}
	if in.Size != nil {
		in, out := &in.Size, &out.Size
		*out = new(float64)
		**out = **in
	}
	if in.Volumetype != nil {
		in, out := &in.Volumetype, &out.Volumetype
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new DataVolumesParameters.
func (in *DataVolumesParameters) DeepCopy() *DataVolumesParameters {
	if in == nil {
		return nil
	}
	out := new(DataVolumesParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ExtendParamsInitParameters) DeepCopyInto(out *ExtendParamsInitParameters) {
	*out = *in
	if in.CPUManagerPolicy != nil {
		in, out := &in.CPUManagerPolicy, &out.CPUManagerPolicy
		*out = new(string)
		**out = **in
	}
	if in.ClusterAz != nil {
		in, out := &in.ClusterAz, &out.ClusterAz
		*out = new(string)
		**out = **in
	}
	if in.DecMasterFlavor != nil {
		in, out := &in.DecMasterFlavor, &out.DecMasterFlavor
		*out = new(string)
		**out = **in
	}
	if in.DockerUmaskMode != nil {
		in, out := &in.DockerUmaskMode, &out.DockerUmaskMode
		*out = new(string)
		**out = **in
	}
	if in.DssMasterVolumes != nil {
		in, out := &in.DssMasterVolumes, &out.DssMasterVolumes
		*out = new(string)
		**out = **in
	}
	if in.FixPoolMask != nil {
		in, out := &in.FixPoolMask, &out.FixPoolMask
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ExtendParamsInitParameters.
func (in *ExtendParamsInitParameters) DeepCopy() *ExtendParamsInitParameters {
	if in == nil {
		return nil
	}
	out := new(ExtendParamsInitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ExtendParamsObservation) DeepCopyInto(out *ExtendParamsObservation) {
	*out = *in
	if in.CPUManagerPolicy != nil {
		in, out := &in.CPUManagerPolicy, &out.CPUManagerPolicy
		*out = new(string)
		**out = **in
	}
	if in.ClusterAz != nil {
		in, out := &in.ClusterAz, &out.ClusterAz
		*out = new(string)
		**out = **in
	}
	if in.DecMasterFlavor != nil {
		in, out := &in.DecMasterFlavor, &out.DecMasterFlavor
		*out = new(string)
		**out = **in
	}
	if in.DockerUmaskMode != nil {
		in, out := &in.DockerUmaskMode, &out.DockerUmaskMode
		*out = new(string)
		**out = **in
	}
	if in.DssMasterVolumes != nil {
		in, out := &in.DssMasterVolumes, &out.DssMasterVolumes
		*out = new(string)
		**out = **in
	}
	if in.FixPoolMask != nil {
		in, out := &in.FixPoolMask, &out.FixPoolMask
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ExtendParamsObservation.
func (in *ExtendParamsObservation) DeepCopy() *ExtendParamsObservation {
	if in == nil {
		return nil
	}
	out := new(ExtendParamsObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ExtendParamsParameters) DeepCopyInto(out *ExtendParamsParameters) {
	*out = *in
	if in.CPUManagerPolicy != nil {
		in, out := &in.CPUManagerPolicy, &out.CPUManagerPolicy
		*out = new(string)
		**out = **in
	}
	if in.ClusterAz != nil {
		in, out := &in.ClusterAz, &out.ClusterAz
		*out = new(string)
		**out = **in
	}
	if in.DecMasterFlavor != nil {
		in, out := &in.DecMasterFlavor, &out.DecMasterFlavor
		*out = new(string)
		**out = **in
	}
	if in.DockerUmaskMode != nil {
		in, out := &in.DockerUmaskMode, &out.DockerUmaskMode
		*out = new(string)
		**out = **in
	}
	if in.DssMasterVolumes != nil {
		in, out := &in.DssMasterVolumes, &out.DssMasterVolumes
		*out = new(string)
		**out = **in
	}
	if in.FixPoolMask != nil {
		in, out := &in.FixPoolMask, &out.FixPoolMask
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ExtendParamsParameters.
func (in *ExtendParamsParameters) DeepCopy() *ExtendParamsParameters {
	if in == nil {
		return nil
	}
	out := new(ExtendParamsParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ExtensionNicsInitParameters) DeepCopyInto(out *ExtensionNicsInitParameters) {
	*out = *in
	if in.SubnetID != nil {
		in, out := &in.SubnetID, &out.SubnetID
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ExtensionNicsInitParameters.
func (in *ExtensionNicsInitParameters) DeepCopy() *ExtensionNicsInitParameters {
	if in == nil {
		return nil
	}
	out := new(ExtensionNicsInitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ExtensionNicsObservation) DeepCopyInto(out *ExtensionNicsObservation) {
	*out = *in
	if in.SubnetID != nil {
		in, out := &in.SubnetID, &out.SubnetID
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ExtensionNicsObservation.
func (in *ExtensionNicsObservation) DeepCopy() *ExtensionNicsObservation {
	if in == nil {
		return nil
	}
	out := new(ExtensionNicsObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ExtensionNicsParameters) DeepCopyInto(out *ExtensionNicsParameters) {
	*out = *in
	if in.SubnetID != nil {
		in, out := &in.SubnetID, &out.SubnetID
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ExtensionNicsParameters.
func (in *ExtensionNicsParameters) DeepCopy() *ExtensionNicsParameters {
	if in == nil {
		return nil
	}
	out := new(ExtensionNicsParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *GroupsInitParameters) DeepCopyInto(out *GroupsInitParameters) {
	*out = *in
	if in.CceManaged != nil {
		in, out := &in.CceManaged, &out.CceManaged
		*out = new(bool)
		**out = **in
	}
	if in.Name != nil {
		in, out := &in.Name, &out.Name
		*out = new(string)
		**out = **in
	}
	if in.SelectorNames != nil {
		in, out := &in.SelectorNames, &out.SelectorNames
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.VirtualSpaces != nil {
		in, out := &in.VirtualSpaces, &out.VirtualSpaces
		*out = make([]VirtualSpacesInitParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new GroupsInitParameters.
func (in *GroupsInitParameters) DeepCopy() *GroupsInitParameters {
	if in == nil {
		return nil
	}
	out := new(GroupsInitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *GroupsObservation) DeepCopyInto(out *GroupsObservation) {
	*out = *in
	if in.CceManaged != nil {
		in, out := &in.CceManaged, &out.CceManaged
		*out = new(bool)
		**out = **in
	}
	if in.Name != nil {
		in, out := &in.Name, &out.Name
		*out = new(string)
		**out = **in
	}
	if in.SelectorNames != nil {
		in, out := &in.SelectorNames, &out.SelectorNames
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.VirtualSpaces != nil {
		in, out := &in.VirtualSpaces, &out.VirtualSpaces
		*out = make([]VirtualSpacesObservation, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new GroupsObservation.
func (in *GroupsObservation) DeepCopy() *GroupsObservation {
	if in == nil {
		return nil
	}
	out := new(GroupsObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *GroupsParameters) DeepCopyInto(out *GroupsParameters) {
	*out = *in
	if in.CceManaged != nil {
		in, out := &in.CceManaged, &out.CceManaged
		*out = new(bool)
		**out = **in
	}
	if in.Name != nil {
		in, out := &in.Name, &out.Name
		*out = new(string)
		**out = **in
	}
	if in.SelectorNames != nil {
		in, out := &in.SelectorNames, &out.SelectorNames
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.VirtualSpaces != nil {
		in, out := &in.VirtualSpaces, &out.VirtualSpaces
		*out = make([]VirtualSpacesParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new GroupsParameters.
func (in *GroupsParameters) DeepCopy() *GroupsParameters {
	if in == nil {
		return nil
	}
	out := new(GroupsParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *MastersInitParameters) DeepCopyInto(out *MastersInitParameters) {
	*out = *in
	if in.AvailabilityZone != nil {
		in, out := &in.AvailabilityZone, &out.AvailabilityZone
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new MastersInitParameters.
func (in *MastersInitParameters) DeepCopy() *MastersInitParameters {
	if in == nil {
		return nil
	}
	out := new(MastersInitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *MastersObservation) DeepCopyInto(out *MastersObservation) {
	*out = *in
	if in.AvailabilityZone != nil {
		in, out := &in.AvailabilityZone, &out.AvailabilityZone
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new MastersObservation.
func (in *MastersObservation) DeepCopy() *MastersObservation {
	if in == nil {
		return nil
	}
	out := new(MastersObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *MastersParameters) DeepCopyInto(out *MastersParameters) {
	*out = *in
	if in.AvailabilityZone != nil {
		in, out := &in.AvailabilityZone, &out.AvailabilityZone
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new MastersParameters.
func (in *MastersParameters) DeepCopy() *MastersParameters {
	if in == nil {
		return nil
	}
	out := new(MastersParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *Node) DeepCopyInto(out *Node) {
	*out = *in
	out.TypeMeta = in.TypeMeta
	in.ObjectMeta.DeepCopyInto(&out.ObjectMeta)
	in.Spec.DeepCopyInto(&out.Spec)
	in.Status.DeepCopyInto(&out.Status)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new Node.
func (in *Node) DeepCopy() *Node {
	if in == nil {
		return nil
	}
	out := new(Node)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyObject is an autogenerated deepcopy function, copying the receiver, creating a new runtime.Object.
func (in *Node) DeepCopyObject() runtime.Object {
	if c := in.DeepCopy(); c != nil {
		return c
	}
	return nil
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *NodeExtendParamsInitParameters) DeepCopyInto(out *NodeExtendParamsInitParameters) {
	*out = *in
	if in.AgencyName != nil {
		in, out := &in.AgencyName, &out.AgencyName
		*out = new(string)
		**out = **in
	}
	if in.DockerBaseSize != nil {
		in, out := &in.DockerBaseSize, &out.DockerBaseSize
		*out = new(float64)
		**out = **in
	}
	if in.KubeReservedMem != nil {
		in, out := &in.KubeReservedMem, &out.KubeReservedMem
		*out = new(float64)
		**out = **in
	}
	if in.MaxPods != nil {
		in, out := &in.MaxPods, &out.MaxPods
		*out = new(float64)
		**out = **in
	}
	if in.NicThreshold != nil {
		in, out := &in.NicThreshold, &out.NicThreshold
		*out = new(string)
		**out = **in
	}
	if in.NodeImageID != nil {
		in, out := &in.NodeImageID, &out.NodeImageID
		*out = new(string)
		**out = **in
	}
	if in.NodeMultiQueue != nil {
		in, out := &in.NodeMultiQueue, &out.NodeMultiQueue
		*out = new(string)
		**out = **in
	}
	if in.Postinstall != nil {
		in, out := &in.Postinstall, &out.Postinstall
		*out = new(string)
		**out = **in
	}
	if in.Preinstall != nil {
		in, out := &in.Preinstall, &out.Preinstall
		*out = new(string)
		**out = **in
	}
	if in.SystemReservedMem != nil {
		in, out := &in.SystemReservedMem, &out.SystemReservedMem
		*out = new(float64)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new NodeExtendParamsInitParameters.
func (in *NodeExtendParamsInitParameters) DeepCopy() *NodeExtendParamsInitParameters {
	if in == nil {
		return nil
	}
	out := new(NodeExtendParamsInitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *NodeExtendParamsObservation) DeepCopyInto(out *NodeExtendParamsObservation) {
	*out = *in
	if in.AgencyName != nil {
		in, out := &in.AgencyName, &out.AgencyName
		*out = new(string)
		**out = **in
	}
	if in.DockerBaseSize != nil {
		in, out := &in.DockerBaseSize, &out.DockerBaseSize
		*out = new(float64)
		**out = **in
	}
	if in.KubeReservedMem != nil {
		in, out := &in.KubeReservedMem, &out.KubeReservedMem
		*out = new(float64)
		**out = **in
	}
	if in.MaxPods != nil {
		in, out := &in.MaxPods, &out.MaxPods
		*out = new(float64)
		**out = **in
	}
	if in.NicThreshold != nil {
		in, out := &in.NicThreshold, &out.NicThreshold
		*out = new(string)
		**out = **in
	}
	if in.NodeImageID != nil {
		in, out := &in.NodeImageID, &out.NodeImageID
		*out = new(string)
		**out = **in
	}
	if in.NodeMultiQueue != nil {
		in, out := &in.NodeMultiQueue, &out.NodeMultiQueue
		*out = new(string)
		**out = **in
	}
	if in.Postinstall != nil {
		in, out := &in.Postinstall, &out.Postinstall
		*out = new(string)
		**out = **in
	}
	if in.Preinstall != nil {
		in, out := &in.Preinstall, &out.Preinstall
		*out = new(string)
		**out = **in
	}
	if in.SystemReservedMem != nil {
		in, out := &in.SystemReservedMem, &out.SystemReservedMem
		*out = new(float64)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new NodeExtendParamsObservation.
func (in *NodeExtendParamsObservation) DeepCopy() *NodeExtendParamsObservation {
	if in == nil {
		return nil
	}
	out := new(NodeExtendParamsObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *NodeExtendParamsParameters) DeepCopyInto(out *NodeExtendParamsParameters) {
	*out = *in
	if in.AgencyName != nil {
		in, out := &in.AgencyName, &out.AgencyName
		*out = new(string)
		**out = **in
	}
	if in.DockerBaseSize != nil {
		in, out := &in.DockerBaseSize, &out.DockerBaseSize
		*out = new(float64)
		**out = **in
	}
	if in.KubeReservedMem != nil {
		in, out := &in.KubeReservedMem, &out.KubeReservedMem
		*out = new(float64)
		**out = **in
	}
	if in.MaxPods != nil {
		in, out := &in.MaxPods, &out.MaxPods
		*out = new(float64)
		**out = **in
	}
	if in.NicThreshold != nil {
		in, out := &in.NicThreshold, &out.NicThreshold
		*out = new(string)
		**out = **in
	}
	if in.NodeImageID != nil {
		in, out := &in.NodeImageID, &out.NodeImageID
		*out = new(string)
		**out = **in
	}
	if in.NodeMultiQueue != nil {
		in, out := &in.NodeMultiQueue, &out.NodeMultiQueue
		*out = new(string)
		**out = **in
	}
	if in.Postinstall != nil {
		in, out := &in.Postinstall, &out.Postinstall
		*out = new(string)
		**out = **in
	}
	if in.Preinstall != nil {
		in, out := &in.Preinstall, &out.Preinstall
		*out = new(string)
		**out = **in
	}
	if in.SystemReservedMem != nil {
		in, out := &in.SystemReservedMem, &out.SystemReservedMem
		*out = new(float64)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new NodeExtendParamsParameters.
func (in *NodeExtendParamsParameters) DeepCopy() *NodeExtendParamsParameters {
	if in == nil {
		return nil
	}
	out := new(NodeExtendParamsParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *NodeInitParameters) DeepCopyInto(out *NodeInitParameters) {
	*out = *in
	if in.Annotations != nil {
		in, out := &in.Annotations, &out.Annotations
		*out = make(map[string]*string, len(*in))
		for key, val := range *in {
			var outVal *string
			if val == nil {
				(*out)[key] = nil
			} else {
				inVal := (*in)[key]
				in, out := &inVal, &outVal
				*out = new(string)
				**out = **in
			}
			(*out)[key] = outVal
		}
	}
	if in.AutoPay != nil {
		in, out := &in.AutoPay, &out.AutoPay
		*out = new(string)
		**out = **in
	}
	if in.AutoRenew != nil {
		in, out := &in.AutoRenew, &out.AutoRenew
		*out = new(string)
		**out = **in
	}
	if in.AvailabilityZone != nil {
		in, out := &in.AvailabilityZone, &out.AvailabilityZone
		*out = new(string)
		**out = **in
	}
	if in.BandwidthChargeMode != nil {
		in, out := &in.BandwidthChargeMode, &out.BandwidthChargeMode
		*out = new(string)
		**out = **in
	}
	if in.BandwidthSize != nil {
		in, out := &in.BandwidthSize, &out.BandwidthSize
		*out = new(float64)
		**out = **in
	}
	if in.BillingMode != nil {
		in, out := &in.BillingMode, &out.BillingMode
		*out = new(float64)
		**out = **in
	}
	if in.ChargingMode != nil {
		in, out := &in.ChargingMode, &out.ChargingMode
		*out = new(string)
		**out = **in
	}
	if in.DataVolumes != nil {
		in, out := &in.DataVolumes, &out.DataVolumes
		*out = make([]DataVolumesInitParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.DedicatedHostID != nil {
		in, out := &in.DedicatedHostID, &out.DedicatedHostID
		*out = new(string)
		**out = **in
	}
	if in.EIPID != nil {
		in, out := &in.EIPID, &out.EIPID
		*out = new(string)
		**out = **in
	}
	if in.EIPIds != nil {
		in, out := &in.EIPIds, &out.EIPIds
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.EcsGroupID != nil {
		in, out := &in.EcsGroupID, &out.EcsGroupID
		*out = new(string)
		**out = **in
	}
	if in.EcsPerformanceType != nil {
		in, out := &in.EcsPerformanceType, &out.EcsPerformanceType
		*out = new(string)
		**out = **in
	}
	if in.ExtendParam != nil {
		in, out := &in.ExtendParam, &out.ExtendParam
		*out = make(map[string]*string, len(*in))
		for key, val := range *in {
			var outVal *string
			if val == nil {
				(*out)[key] = nil
			} else {
				inVal := (*in)[key]
				in, out := &inVal, &outVal
				*out = new(string)
				**out = **in
			}
			(*out)[key] = outVal
		}
	}
	if in.ExtendParamChargingMode != nil {
		in, out := &in.ExtendParamChargingMode, &out.ExtendParamChargingMode
		*out = new(float64)
		**out = **in
	}
	if in.ExtendParams != nil {
		in, out := &in.ExtendParams, &out.ExtendParams
		*out = make([]NodeExtendParamsInitParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.ExtensionNics != nil {
		in, out := &in.ExtensionNics, &out.ExtensionNics
		*out = make([]ExtensionNicsInitParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.FixedIP != nil {
		in, out := &in.FixedIP, &out.FixedIP
		*out = new(string)
		**out = **in
	}
	if in.FlavorID != nil {
		in, out := &in.FlavorID, &out.FlavorID
		*out = new(string)
		**out = **in
	}
	if in.InitializedConditions != nil {
		in, out := &in.InitializedConditions, &out.InitializedConditions
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.Iptype != nil {
		in, out := &in.Iptype, &out.Iptype
		*out = new(string)
		**out = **in
	}
	if in.KeepEcs != nil {
		in, out := &in.KeepEcs, &out.KeepEcs
		*out = new(bool)
		**out = **in
	}
	if in.KeyPair != nil {
		in, out := &in.KeyPair, &out.KeyPair
		*out = new(string)
		**out = **in
	}
	if in.Labels != nil {
		in, out := &in.Labels, &out.Labels
		*out = make(map[string]*string, len(*in))
		for key, val := range *in {
			var outVal *string
			if val == nil {
				(*out)[key] = nil
			} else {
				inVal := (*in)[key]
				in, out := &inVal, &outVal
				*out = new(string)
				**out = **in
			}
			(*out)[key] = outVal
		}
	}
	if in.MaxPods != nil {
		in, out := &in.MaxPods, &out.MaxPods
		*out = new(float64)
		**out = **in
	}
	if in.Name != nil {
		in, out := &in.Name, &out.Name
		*out = new(string)
		**out = **in
	}
	if in.OrderID != nil {
		in, out := &in.OrderID, &out.OrderID
		*out = new(string)
		**out = **in
	}
	if in.Os != nil {
		in, out := &in.Os, &out.Os
		*out = new(string)
		**out = **in
	}
	if in.Partition != nil {
		in, out := &in.Partition, &out.Partition
		*out = new(string)
		**out = **in
	}
	if in.Period != nil {
		in, out := &in.Period, &out.Period
		*out = new(float64)
		**out = **in
	}
	if in.PeriodUnit != nil {
		in, out := &in.PeriodUnit, &out.PeriodUnit
		*out = new(string)
		**out = **in
	}
	if in.Postinstall != nil {
		in, out := &in.Postinstall, &out.Postinstall
		*out = new(string)
		**out = **in
	}
	if in.Preinstall != nil {
		in, out := &in.Preinstall, &out.Preinstall
		*out = new(string)
		**out = **in
	}
	if in.ProductID != nil {
		in, out := &in.ProductID, &out.ProductID
		*out = new(string)
		**out = **in
	}
	if in.PublicKey != nil {
		in, out := &in.PublicKey, &out.PublicKey
		*out = new(string)
		**out = **in
	}
	if in.Region != nil {
		in, out := &in.Region, &out.Region
		*out = new(string)
		**out = **in
	}
	if in.RootVolume != nil {
		in, out := &in.RootVolume, &out.RootVolume
		*out = make([]RootVolumeInitParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.Runtime != nil {
		in, out := &in.Runtime, &out.Runtime
		*out = new(string)
		**out = **in
	}
	if in.Sharetype != nil {
		in, out := &in.Sharetype, &out.Sharetype
		*out = new(string)
		**out = **in
	}
	if in.Storage != nil {
		in, out := &in.Storage, &out.Storage
		*out = make([]StorageInitParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.SubnetID != nil {
		in, out := &in.SubnetID, &out.SubnetID
		*out = new(string)
		**out = **in
	}
	if in.Tags != nil {
		in, out := &in.Tags, &out.Tags
		*out = make(map[string]*string, len(*in))
		for key, val := range *in {
			var outVal *string
			if val == nil {
				(*out)[key] = nil
			} else {
				inVal := (*in)[key]
				in, out := &inVal, &outVal
				*out = new(string)
				**out = **in
			}
			(*out)[key] = outVal
		}
	}
	if in.Taints != nil {
		in, out := &in.Taints, &out.Taints
		*out = make([]TaintsInitParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new NodeInitParameters.
func (in *NodeInitParameters) DeepCopy() *NodeInitParameters {
	if in == nil {
		return nil
	}
	out := new(NodeInitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *NodeList) DeepCopyInto(out *NodeList) {
	*out = *in
	out.TypeMeta = in.TypeMeta
	in.ListMeta.DeepCopyInto(&out.ListMeta)
	if in.Items != nil {
		in, out := &in.Items, &out.Items
		*out = make([]Node, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new NodeList.
func (in *NodeList) DeepCopy() *NodeList {
	if in == nil {
		return nil
	}
	out := new(NodeList)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyObject is an autogenerated deepcopy function, copying the receiver, creating a new runtime.Object.
func (in *NodeList) DeepCopyObject() runtime.Object {
	if c := in.DeepCopy(); c != nil {
		return c
	}
	return nil
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *NodeObservation) DeepCopyInto(out *NodeObservation) {
	*out = *in
	if in.Annotations != nil {
		in, out := &in.Annotations, &out.Annotations
		*out = make(map[string]*string, len(*in))
		for key, val := range *in {
			var outVal *string
			if val == nil {
				(*out)[key] = nil
			} else {
				inVal := (*in)[key]
				in, out := &inVal, &outVal
				*out = new(string)
				**out = **in
			}
			(*out)[key] = outVal
		}
	}
	if in.AutoPay != nil {
		in, out := &in.AutoPay, &out.AutoPay
		*out = new(string)
		**out = **in
	}
	if in.AutoRenew != nil {
		in, out := &in.AutoRenew, &out.AutoRenew
		*out = new(string)
		**out = **in
	}
	if in.AvailabilityZone != nil {
		in, out := &in.AvailabilityZone, &out.AvailabilityZone
		*out = new(string)
		**out = **in
	}
	if in.BandwidthChargeMode != nil {
		in, out := &in.BandwidthChargeMode, &out.BandwidthChargeMode
		*out = new(string)
		**out = **in
	}
	if in.BandwidthSize != nil {
		in, out := &in.BandwidthSize, &out.BandwidthSize
		*out = new(float64)
		**out = **in
	}
	if in.BillingMode != nil {
		in, out := &in.BillingMode, &out.BillingMode
		*out = new(float64)
		**out = **in
	}
	if in.ChargingMode != nil {
		in, out := &in.ChargingMode, &out.ChargingMode
		*out = new(string)
		**out = **in
	}
	if in.ClusterID != nil {
		in, out := &in.ClusterID, &out.ClusterID
		*out = new(string)
		**out = **in
	}
	if in.DataVolumes != nil {
		in, out := &in.DataVolumes, &out.DataVolumes
		*out = make([]DataVolumesObservation, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.DedicatedHostID != nil {
		in, out := &in.DedicatedHostID, &out.DedicatedHostID
		*out = new(string)
		**out = **in
	}
	if in.EIPID != nil {
		in, out := &in.EIPID, &out.EIPID
		*out = new(string)
		**out = **in
	}
	if in.EIPIds != nil {
		in, out := &in.EIPIds, &out.EIPIds
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.EcsGroupID != nil {
		in, out := &in.EcsGroupID, &out.EcsGroupID
		*out = new(string)
		**out = **in
	}
	if in.EcsPerformanceType != nil {
		in, out := &in.EcsPerformanceType, &out.EcsPerformanceType
		*out = new(string)
		**out = **in
	}
	if in.ExtendParam != nil {
		in, out := &in.ExtendParam, &out.ExtendParam
		*out = make(map[string]*string, len(*in))
		for key, val := range *in {
			var outVal *string
			if val == nil {
				(*out)[key] = nil
			} else {
				inVal := (*in)[key]
				in, out := &inVal, &outVal
				*out = new(string)
				**out = **in
			}
			(*out)[key] = outVal
		}
	}
	if in.ExtendParamChargingMode != nil {
		in, out := &in.ExtendParamChargingMode, &out.ExtendParamChargingMode
		*out = new(float64)
		**out = **in
	}
	if in.ExtendParams != nil {
		in, out := &in.ExtendParams, &out.ExtendParams
		*out = make([]NodeExtendParamsObservation, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.ExtensionNics != nil {
		in, out := &in.ExtensionNics, &out.ExtensionNics
		*out = make([]ExtensionNicsObservation, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.FixedIP != nil {
		in, out := &in.FixedIP, &out.FixedIP
		*out = new(string)
		**out = **in
	}
	if in.FlavorID != nil {
		in, out := &in.FlavorID, &out.FlavorID
		*out = new(string)
		**out = **in
	}
	if in.ID != nil {
		in, out := &in.ID, &out.ID
		*out = new(string)
		**out = **in
	}
	if in.InitializedConditions != nil {
		in, out := &in.InitializedConditions, &out.InitializedConditions
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.Iptype != nil {
		in, out := &in.Iptype, &out.Iptype
		*out = new(string)
		**out = **in
	}
	if in.KeepEcs != nil {
		in, out := &in.KeepEcs, &out.KeepEcs
		*out = new(bool)
		**out = **in
	}
	if in.KeyPair != nil {
		in, out := &in.KeyPair, &out.KeyPair
		*out = new(string)
		**out = **in
	}
	if in.Labels != nil {
		in, out := &in.Labels, &out.Labels
		*out = make(map[string]*string, len(*in))
		for key, val := range *in {
			var outVal *string
			if val == nil {
				(*out)[key] = nil
			} else {
				inVal := (*in)[key]
				in, out := &inVal, &outVal
				*out = new(string)
				**out = **in
			}
			(*out)[key] = outVal
		}
	}
	if in.MaxPods != nil {
		in, out := &in.MaxPods, &out.MaxPods
		*out = new(float64)
		**out = **in
	}
	if in.Name != nil {
		in, out := &in.Name, &out.Name
		*out = new(string)
		**out = **in
	}
	if in.OrderID != nil {
		in, out := &in.OrderID, &out.OrderID
		*out = new(string)
		**out = **in
	}
	if in.Os != nil {
		in, out := &in.Os, &out.Os
		*out = new(string)
		**out = **in
	}
	if in.Partition != nil {
		in, out := &in.Partition, &out.Partition
		*out = new(string)
		**out = **in
	}
	if in.Period != nil {
		in, out := &in.Period, &out.Period
		*out = new(float64)
		**out = **in
	}
	if in.PeriodUnit != nil {
		in, out := &in.PeriodUnit, &out.PeriodUnit
		*out = new(string)
		**out = **in
	}
	if in.Postinstall != nil {
		in, out := &in.Postinstall, &out.Postinstall
		*out = new(string)
		**out = **in
	}
	if in.Preinstall != nil {
		in, out := &in.Preinstall, &out.Preinstall
		*out = new(string)
		**out = **in
	}
	if in.PrivateIP != nil {
		in, out := &in.PrivateIP, &out.PrivateIP
		*out = new(string)
		**out = **in
	}
	if in.ProductID != nil {
		in, out := &in.ProductID, &out.ProductID
		*out = new(string)
		**out = **in
	}
	if in.PublicIP != nil {
		in, out := &in.PublicIP, &out.PublicIP
		*out = new(string)
		**out = **in
	}
	if in.PublicKey != nil {
		in, out := &in.PublicKey, &out.PublicKey
		*out = new(string)
		**out = **in
	}
	if in.Region != nil {
		in, out := &in.Region, &out.Region
		*out = new(string)
		**out = **in
	}
	if in.RootVolume != nil {
		in, out := &in.RootVolume, &out.RootVolume
		*out = make([]RootVolumeObservation, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.Runtime != nil {
		in, out := &in.Runtime, &out.Runtime
		*out = new(string)
		**out = **in
	}
	if in.ServerID != nil {
		in, out := &in.ServerID, &out.ServerID
		*out = new(string)
		**out = **in
	}
	if in.Sharetype != nil {
		in, out := &in.Sharetype, &out.Sharetype
		*out = new(string)
		**out = **in
	}
	if in.Status != nil {
		in, out := &in.Status, &out.Status
		*out = new(string)
		**out = **in
	}
	if in.Storage != nil {
		in, out := &in.Storage, &out.Storage
		*out = make([]StorageObservation, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.SubnetID != nil {
		in, out := &in.SubnetID, &out.SubnetID
		*out = new(string)
		**out = **in
	}
	if in.Tags != nil {
		in, out := &in.Tags, &out.Tags
		*out = make(map[string]*string, len(*in))
		for key, val := range *in {
			var outVal *string
			if val == nil {
				(*out)[key] = nil
			} else {
				inVal := (*in)[key]
				in, out := &inVal, &outVal
				*out = new(string)
				**out = **in
			}
			(*out)[key] = outVal
		}
	}
	if in.Taints != nil {
		in, out := &in.Taints, &out.Taints
		*out = make([]TaintsObservation, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new NodeObservation.
func (in *NodeObservation) DeepCopy() *NodeObservation {
	if in == nil {
		return nil
	}
	out := new(NodeObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *NodeParameters) DeepCopyInto(out *NodeParameters) {
	*out = *in
	if in.Annotations != nil {
		in, out := &in.Annotations, &out.Annotations
		*out = make(map[string]*string, len(*in))
		for key, val := range *in {
			var outVal *string
			if val == nil {
				(*out)[key] = nil
			} else {
				inVal := (*in)[key]
				in, out := &inVal, &outVal
				*out = new(string)
				**out = **in
			}
			(*out)[key] = outVal
		}
	}
	if in.AutoPay != nil {
		in, out := &in.AutoPay, &out.AutoPay
		*out = new(string)
		**out = **in
	}
	if in.AutoRenew != nil {
		in, out := &in.AutoRenew, &out.AutoRenew
		*out = new(string)
		**out = **in
	}
	if in.AvailabilityZone != nil {
		in, out := &in.AvailabilityZone, &out.AvailabilityZone
		*out = new(string)
		**out = **in
	}
	if in.BandwidthChargeMode != nil {
		in, out := &in.BandwidthChargeMode, &out.BandwidthChargeMode
		*out = new(string)
		**out = **in
	}
	if in.BandwidthSize != nil {
		in, out := &in.BandwidthSize, &out.BandwidthSize
		*out = new(float64)
		**out = **in
	}
	if in.BillingMode != nil {
		in, out := &in.BillingMode, &out.BillingMode
		*out = new(float64)
		**out = **in
	}
	if in.ChargingMode != nil {
		in, out := &in.ChargingMode, &out.ChargingMode
		*out = new(string)
		**out = **in
	}
	if in.ClusterID != nil {
		in, out := &in.ClusterID, &out.ClusterID
		*out = new(string)
		**out = **in
	}
	if in.ClusterIDRef != nil {
		in, out := &in.ClusterIDRef, &out.ClusterIDRef
		*out = new(v1.Reference)
		(*in).DeepCopyInto(*out)
	}
	if in.ClusterIDSelector != nil {
		in, out := &in.ClusterIDSelector, &out.ClusterIDSelector
		*out = new(v1.Selector)
		(*in).DeepCopyInto(*out)
	}
	if in.DataVolumes != nil {
		in, out := &in.DataVolumes, &out.DataVolumes
		*out = make([]DataVolumesParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.DedicatedHostID != nil {
		in, out := &in.DedicatedHostID, &out.DedicatedHostID
		*out = new(string)
		**out = **in
	}
	if in.EIPID != nil {
		in, out := &in.EIPID, &out.EIPID
		*out = new(string)
		**out = **in
	}
	if in.EIPIds != nil {
		in, out := &in.EIPIds, &out.EIPIds
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.EcsGroupID != nil {
		in, out := &in.EcsGroupID, &out.EcsGroupID
		*out = new(string)
		**out = **in
	}
	if in.EcsPerformanceType != nil {
		in, out := &in.EcsPerformanceType, &out.EcsPerformanceType
		*out = new(string)
		**out = **in
	}
	if in.ExtendParam != nil {
		in, out := &in.ExtendParam, &out.ExtendParam
		*out = make(map[string]*string, len(*in))
		for key, val := range *in {
			var outVal *string
			if val == nil {
				(*out)[key] = nil
			} else {
				inVal := (*in)[key]
				in, out := &inVal, &outVal
				*out = new(string)
				**out = **in
			}
			(*out)[key] = outVal
		}
	}
	if in.ExtendParamChargingMode != nil {
		in, out := &in.ExtendParamChargingMode, &out.ExtendParamChargingMode
		*out = new(float64)
		**out = **in
	}
	if in.ExtendParams != nil {
		in, out := &in.ExtendParams, &out.ExtendParams
		*out = make([]NodeExtendParamsParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.ExtensionNics != nil {
		in, out := &in.ExtensionNics, &out.ExtensionNics
		*out = make([]ExtensionNicsParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.FixedIP != nil {
		in, out := &in.FixedIP, &out.FixedIP
		*out = new(string)
		**out = **in
	}
	if in.FlavorID != nil {
		in, out := &in.FlavorID, &out.FlavorID
		*out = new(string)
		**out = **in
	}
	if in.InitializedConditions != nil {
		in, out := &in.InitializedConditions, &out.InitializedConditions
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.Iptype != nil {
		in, out := &in.Iptype, &out.Iptype
		*out = new(string)
		**out = **in
	}
	if in.KeepEcs != nil {
		in, out := &in.KeepEcs, &out.KeepEcs
		*out = new(bool)
		**out = **in
	}
	if in.KeyPair != nil {
		in, out := &in.KeyPair, &out.KeyPair
		*out = new(string)
		**out = **in
	}
	if in.Labels != nil {
		in, out := &in.Labels, &out.Labels
		*out = make(map[string]*string, len(*in))
		for key, val := range *in {
			var outVal *string
			if val == nil {
				(*out)[key] = nil
			} else {
				inVal := (*in)[key]
				in, out := &inVal, &outVal
				*out = new(string)
				**out = **in
			}
			(*out)[key] = outVal
		}
	}
	if in.MaxPods != nil {
		in, out := &in.MaxPods, &out.MaxPods
		*out = new(float64)
		**out = **in
	}
	if in.Name != nil {
		in, out := &in.Name, &out.Name
		*out = new(string)
		**out = **in
	}
	if in.OrderID != nil {
		in, out := &in.OrderID, &out.OrderID
		*out = new(string)
		**out = **in
	}
	if in.Os != nil {
		in, out := &in.Os, &out.Os
		*out = new(string)
		**out = **in
	}
	if in.Partition != nil {
		in, out := &in.Partition, &out.Partition
		*out = new(string)
		**out = **in
	}
	if in.PasswordSecretRef != nil {
		in, out := &in.PasswordSecretRef, &out.PasswordSecretRef
		*out = new(v1.SecretKeySelector)
		**out = **in
	}
	if in.Period != nil {
		in, out := &in.Period, &out.Period
		*out = new(float64)
		**out = **in
	}
	if in.PeriodUnit != nil {
		in, out := &in.PeriodUnit, &out.PeriodUnit
		*out = new(string)
		**out = **in
	}
	if in.Postinstall != nil {
		in, out := &in.Postinstall, &out.Postinstall
		*out = new(string)
		**out = **in
	}
	if in.Preinstall != nil {
		in, out := &in.Preinstall, &out.Preinstall
		*out = new(string)
		**out = **in
	}
	if in.PrivateKeySecretRef != nil {
		in, out := &in.PrivateKeySecretRef, &out.PrivateKeySecretRef
		*out = new(v1.SecretKeySelector)
		**out = **in
	}
	if in.ProductID != nil {
		in, out := &in.ProductID, &out.ProductID
		*out = new(string)
		**out = **in
	}
	if in.PublicKey != nil {
		in, out := &in.PublicKey, &out.PublicKey
		*out = new(string)
		**out = **in
	}
	if in.Region != nil {
		in, out := &in.Region, &out.Region
		*out = new(string)
		**out = **in
	}
	if in.RootVolume != nil {
		in, out := &in.RootVolume, &out.RootVolume
		*out = make([]RootVolumeParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.Runtime != nil {
		in, out := &in.Runtime, &out.Runtime
		*out = new(string)
		**out = **in
	}
	if in.Sharetype != nil {
		in, out := &in.Sharetype, &out.Sharetype
		*out = new(string)
		**out = **in
	}
	if in.Storage != nil {
		in, out := &in.Storage, &out.Storage
		*out = make([]StorageParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.SubnetID != nil {
		in, out := &in.SubnetID, &out.SubnetID
		*out = new(string)
		**out = **in
	}
	if in.Tags != nil {
		in, out := &in.Tags, &out.Tags
		*out = make(map[string]*string, len(*in))
		for key, val := range *in {
			var outVal *string
			if val == nil {
				(*out)[key] = nil
			} else {
				inVal := (*in)[key]
				in, out := &inVal, &outVal
				*out = new(string)
				**out = **in
			}
			(*out)[key] = outVal
		}
	}
	if in.Taints != nil {
		in, out := &in.Taints, &out.Taints
		*out = make([]TaintsParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new NodeParameters.
func (in *NodeParameters) DeepCopy() *NodeParameters {
	if in == nil {
		return nil
	}
	out := new(NodeParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *NodeSpec) DeepCopyInto(out *NodeSpec) {
	*out = *in
	in.ResourceSpec.DeepCopyInto(&out.ResourceSpec)
	in.ForProvider.DeepCopyInto(&out.ForProvider)
	in.InitProvider.DeepCopyInto(&out.InitProvider)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new NodeSpec.
func (in *NodeSpec) DeepCopy() *NodeSpec {
	if in == nil {
		return nil
	}
	out := new(NodeSpec)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *NodeStatus) DeepCopyInto(out *NodeStatus) {
	*out = *in
	in.ResourceStatus.DeepCopyInto(&out.ResourceStatus)
	in.AtProvider.DeepCopyInto(&out.AtProvider)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new NodeStatus.
func (in *NodeStatus) DeepCopy() *NodeStatus {
	if in == nil {
		return nil
	}
	out := new(NodeStatus)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *RootVolumeInitParameters) DeepCopyInto(out *RootVolumeInitParameters) {
	*out = *in
	if in.DssPoolID != nil {
		in, out := &in.DssPoolID, &out.DssPoolID
		*out = new(string)
		**out = **in
	}
	if in.ExtendParam != nil {
		in, out := &in.ExtendParam, &out.ExtendParam
		*out = new(string)
		**out = **in
	}
	if in.ExtendParams != nil {
		in, out := &in.ExtendParams, &out.ExtendParams
		*out = make(map[string]*string, len(*in))
		for key, val := range *in {
			var outVal *string
			if val == nil {
				(*out)[key] = nil
			} else {
				inVal := (*in)[key]
				in, out := &inVal, &outVal
				*out = new(string)
				**out = **in
			}
			(*out)[key] = outVal
		}
	}
	if in.HwPassthrough != nil {
		in, out := &in.HwPassthrough, &out.HwPassthrough
		*out = new(bool)
		**out = **in
	}
	if in.KMSKeyID != nil {
		in, out := &in.KMSKeyID, &out.KMSKeyID
		*out = new(string)
		**out = **in
	}
	if in.Size != nil {
		in, out := &in.Size, &out.Size
		*out = new(float64)
		**out = **in
	}
	if in.Volumetype != nil {
		in, out := &in.Volumetype, &out.Volumetype
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new RootVolumeInitParameters.
func (in *RootVolumeInitParameters) DeepCopy() *RootVolumeInitParameters {
	if in == nil {
		return nil
	}
	out := new(RootVolumeInitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *RootVolumeObservation) DeepCopyInto(out *RootVolumeObservation) {
	*out = *in
	if in.DssPoolID != nil {
		in, out := &in.DssPoolID, &out.DssPoolID
		*out = new(string)
		**out = **in
	}
	if in.ExtendParam != nil {
		in, out := &in.ExtendParam, &out.ExtendParam
		*out = new(string)
		**out = **in
	}
	if in.ExtendParams != nil {
		in, out := &in.ExtendParams, &out.ExtendParams
		*out = make(map[string]*string, len(*in))
		for key, val := range *in {
			var outVal *string
			if val == nil {
				(*out)[key] = nil
			} else {
				inVal := (*in)[key]
				in, out := &inVal, &outVal
				*out = new(string)
				**out = **in
			}
			(*out)[key] = outVal
		}
	}
	if in.HwPassthrough != nil {
		in, out := &in.HwPassthrough, &out.HwPassthrough
		*out = new(bool)
		**out = **in
	}
	if in.KMSKeyID != nil {
		in, out := &in.KMSKeyID, &out.KMSKeyID
		*out = new(string)
		**out = **in
	}
	if in.Size != nil {
		in, out := &in.Size, &out.Size
		*out = new(float64)
		**out = **in
	}
	if in.Volumetype != nil {
		in, out := &in.Volumetype, &out.Volumetype
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new RootVolumeObservation.
func (in *RootVolumeObservation) DeepCopy() *RootVolumeObservation {
	if in == nil {
		return nil
	}
	out := new(RootVolumeObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *RootVolumeParameters) DeepCopyInto(out *RootVolumeParameters) {
	*out = *in
	if in.DssPoolID != nil {
		in, out := &in.DssPoolID, &out.DssPoolID
		*out = new(string)
		**out = **in
	}
	if in.ExtendParam != nil {
		in, out := &in.ExtendParam, &out.ExtendParam
		*out = new(string)
		**out = **in
	}
	if in.ExtendParams != nil {
		in, out := &in.ExtendParams, &out.ExtendParams
		*out = make(map[string]*string, len(*in))
		for key, val := range *in {
			var outVal *string
			if val == nil {
				(*out)[key] = nil
			} else {
				inVal := (*in)[key]
				in, out := &inVal, &outVal
				*out = new(string)
				**out = **in
			}
			(*out)[key] = outVal
		}
	}
	if in.HwPassthrough != nil {
		in, out := &in.HwPassthrough, &out.HwPassthrough
		*out = new(bool)
		**out = **in
	}
	if in.KMSKeyID != nil {
		in, out := &in.KMSKeyID, &out.KMSKeyID
		*out = new(string)
		**out = **in
	}
	if in.Size != nil {
		in, out := &in.Size, &out.Size
		*out = new(float64)
		**out = **in
	}
	if in.Volumetype != nil {
		in, out := &in.Volumetype, &out.Volumetype
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new RootVolumeParameters.
func (in *RootVolumeParameters) DeepCopy() *RootVolumeParameters {
	if in == nil {
		return nil
	}
	out := new(RootVolumeParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *SelectorsInitParameters) DeepCopyInto(out *SelectorsInitParameters) {
	*out = *in
	if in.MatchLabelCount != nil {
		in, out := &in.MatchLabelCount, &out.MatchLabelCount
		*out = new(string)
		**out = **in
	}
	if in.MatchLabelMetadataCmkid != nil {
		in, out := &in.MatchLabelMetadataCmkid, &out.MatchLabelMetadataCmkid
		*out = new(string)
		**out = **in
	}
	if in.MatchLabelMetadataEncrypted != nil {
		in, out := &in.MatchLabelMetadataEncrypted, &out.MatchLabelMetadataEncrypted
		*out = new(string)
		**out = **in
	}
	if in.MatchLabelSize != nil {
		in, out := &in.MatchLabelSize, &out.MatchLabelSize
		*out = new(string)
		**out = **in
	}
	if in.MatchLabelVolumeType != nil {
		in, out := &in.MatchLabelVolumeType, &out.MatchLabelVolumeType
		*out = new(string)
		**out = **in
	}
	if in.Name != nil {
		in, out := &in.Name, &out.Name
		*out = new(string)
		**out = **in
	}
	if in.Type != nil {
		in, out := &in.Type, &out.Type
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new SelectorsInitParameters.
func (in *SelectorsInitParameters) DeepCopy() *SelectorsInitParameters {
	if in == nil {
		return nil
	}
	out := new(SelectorsInitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *SelectorsObservation) DeepCopyInto(out *SelectorsObservation) {
	*out = *in
	if in.MatchLabelCount != nil {
		in, out := &in.MatchLabelCount, &out.MatchLabelCount
		*out = new(string)
		**out = **in
	}
	if in.MatchLabelMetadataCmkid != nil {
		in, out := &in.MatchLabelMetadataCmkid, &out.MatchLabelMetadataCmkid
		*out = new(string)
		**out = **in
	}
	if in.MatchLabelMetadataEncrypted != nil {
		in, out := &in.MatchLabelMetadataEncrypted, &out.MatchLabelMetadataEncrypted
		*out = new(string)
		**out = **in
	}
	if in.MatchLabelSize != nil {
		in, out := &in.MatchLabelSize, &out.MatchLabelSize
		*out = new(string)
		**out = **in
	}
	if in.MatchLabelVolumeType != nil {
		in, out := &in.MatchLabelVolumeType, &out.MatchLabelVolumeType
		*out = new(string)
		**out = **in
	}
	if in.Name != nil {
		in, out := &in.Name, &out.Name
		*out = new(string)
		**out = **in
	}
	if in.Type != nil {
		in, out := &in.Type, &out.Type
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new SelectorsObservation.
func (in *SelectorsObservation) DeepCopy() *SelectorsObservation {
	if in == nil {
		return nil
	}
	out := new(SelectorsObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *SelectorsParameters) DeepCopyInto(out *SelectorsParameters) {
	*out = *in
	if in.MatchLabelCount != nil {
		in, out := &in.MatchLabelCount, &out.MatchLabelCount
		*out = new(string)
		**out = **in
	}
	if in.MatchLabelMetadataCmkid != nil {
		in, out := &in.MatchLabelMetadataCmkid, &out.MatchLabelMetadataCmkid
		*out = new(string)
		**out = **in
	}
	if in.MatchLabelMetadataEncrypted != nil {
		in, out := &in.MatchLabelMetadataEncrypted, &out.MatchLabelMetadataEncrypted
		*out = new(string)
		**out = **in
	}
	if in.MatchLabelSize != nil {
		in, out := &in.MatchLabelSize, &out.MatchLabelSize
		*out = new(string)
		**out = **in
	}
	if in.MatchLabelVolumeType != nil {
		in, out := &in.MatchLabelVolumeType, &out.MatchLabelVolumeType
		*out = new(string)
		**out = **in
	}
	if in.Name != nil {
		in, out := &in.Name, &out.Name
		*out = new(string)
		**out = **in
	}
	if in.Type != nil {
		in, out := &in.Type, &out.Type
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new SelectorsParameters.
func (in *SelectorsParameters) DeepCopy() *SelectorsParameters {
	if in == nil {
		return nil
	}
	out := new(SelectorsParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *StorageInitParameters) DeepCopyInto(out *StorageInitParameters) {
	*out = *in
	if in.Groups != nil {
		in, out := &in.Groups, &out.Groups
		*out = make([]GroupsInitParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.Selectors != nil {
		in, out := &in.Selectors, &out.Selectors
		*out = make([]SelectorsInitParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new StorageInitParameters.
func (in *StorageInitParameters) DeepCopy() *StorageInitParameters {
	if in == nil {
		return nil
	}
	out := new(StorageInitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *StorageObservation) DeepCopyInto(out *StorageObservation) {
	*out = *in
	if in.Groups != nil {
		in, out := &in.Groups, &out.Groups
		*out = make([]GroupsObservation, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.Selectors != nil {
		in, out := &in.Selectors, &out.Selectors
		*out = make([]SelectorsObservation, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new StorageObservation.
func (in *StorageObservation) DeepCopy() *StorageObservation {
	if in == nil {
		return nil
	}
	out := new(StorageObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *StorageParameters) DeepCopyInto(out *StorageParameters) {
	*out = *in
	if in.Groups != nil {
		in, out := &in.Groups, &out.Groups
		*out = make([]GroupsParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.Selectors != nil {
		in, out := &in.Selectors, &out.Selectors
		*out = make([]SelectorsParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new StorageParameters.
func (in *StorageParameters) DeepCopy() *StorageParameters {
	if in == nil {
		return nil
	}
	out := new(StorageParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *TaintsInitParameters) DeepCopyInto(out *TaintsInitParameters) {
	*out = *in
	if in.Effect != nil {
		in, out := &in.Effect, &out.Effect
		*out = new(string)
		**out = **in
	}
	if in.Key != nil {
		in, out := &in.Key, &out.Key
		*out = new(string)
		**out = **in
	}
	if in.Value != nil {
		in, out := &in.Value, &out.Value
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new TaintsInitParameters.
func (in *TaintsInitParameters) DeepCopy() *TaintsInitParameters {
	if in == nil {
		return nil
	}
	out := new(TaintsInitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *TaintsObservation) DeepCopyInto(out *TaintsObservation) {
	*out = *in
	if in.Effect != nil {
		in, out := &in.Effect, &out.Effect
		*out = new(string)
		**out = **in
	}
	if in.Key != nil {
		in, out := &in.Key, &out.Key
		*out = new(string)
		**out = **in
	}
	if in.Value != nil {
		in, out := &in.Value, &out.Value
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new TaintsObservation.
func (in *TaintsObservation) DeepCopy() *TaintsObservation {
	if in == nil {
		return nil
	}
	out := new(TaintsObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *TaintsParameters) DeepCopyInto(out *TaintsParameters) {
	*out = *in
	if in.Effect != nil {
		in, out := &in.Effect, &out.Effect
		*out = new(string)
		**out = **in
	}
	if in.Key != nil {
		in, out := &in.Key, &out.Key
		*out = new(string)
		**out = **in
	}
	if in.Value != nil {
		in, out := &in.Value, &out.Value
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new TaintsParameters.
func (in *TaintsParameters) DeepCopy() *TaintsParameters {
	if in == nil {
		return nil
	}
	out := new(TaintsParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *VirtualSpacesInitParameters) DeepCopyInto(out *VirtualSpacesInitParameters) {
	*out = *in
	if in.LvmLvType != nil {
		in, out := &in.LvmLvType, &out.LvmLvType
		*out = new(string)
		**out = **in
	}
	if in.LvmPath != nil {
		in, out := &in.LvmPath, &out.LvmPath
		*out = new(string)
		**out = **in
	}
	if in.Name != nil {
		in, out := &in.Name, &out.Name
		*out = new(string)
		**out = **in
	}
	if in.RuntimeLvType != nil {
		in, out := &in.RuntimeLvType, &out.RuntimeLvType
		*out = new(string)
		**out = **in
	}
	if in.Size != nil {
		in, out := &in.Size, &out.Size
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new VirtualSpacesInitParameters.
func (in *VirtualSpacesInitParameters) DeepCopy() *VirtualSpacesInitParameters {
	if in == nil {
		return nil
	}
	out := new(VirtualSpacesInitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *VirtualSpacesObservation) DeepCopyInto(out *VirtualSpacesObservation) {
	*out = *in
	if in.LvmLvType != nil {
		in, out := &in.LvmLvType, &out.LvmLvType
		*out = new(string)
		**out = **in
	}
	if in.LvmPath != nil {
		in, out := &in.LvmPath, &out.LvmPath
		*out = new(string)
		**out = **in
	}
	if in.Name != nil {
		in, out := &in.Name, &out.Name
		*out = new(string)
		**out = **in
	}
	if in.RuntimeLvType != nil {
		in, out := &in.RuntimeLvType, &out.RuntimeLvType
		*out = new(string)
		**out = **in
	}
	if in.Size != nil {
		in, out := &in.Size, &out.Size
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new VirtualSpacesObservation.
func (in *VirtualSpacesObservation) DeepCopy() *VirtualSpacesObservation {
	if in == nil {
		return nil
	}
	out := new(VirtualSpacesObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *VirtualSpacesParameters) DeepCopyInto(out *VirtualSpacesParameters) {
	*out = *in
	if in.LvmLvType != nil {
		in, out := &in.LvmLvType, &out.LvmLvType
		*out = new(string)
		**out = **in
	}
	if in.LvmPath != nil {
		in, out := &in.LvmPath, &out.LvmPath
		*out = new(string)
		**out = **in
	}
	if in.Name != nil {
		in, out := &in.Name, &out.Name
		*out = new(string)
		**out = **in
	}
	if in.RuntimeLvType != nil {
		in, out := &in.RuntimeLvType, &out.RuntimeLvType
		*out = new(string)
		**out = **in
	}
	if in.Size != nil {
		in, out := &in.Size, &out.Size
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new VirtualSpacesParameters.
func (in *VirtualSpacesParameters) DeepCopy() *VirtualSpacesParameters {
	if in == nil {
		return nil
	}
	out := new(VirtualSpacesParameters)
	in.DeepCopyInto(out)
	return out
}
