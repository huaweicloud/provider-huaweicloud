// SPDX-FileCopyrightText: 2024 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type AddonInitParameters struct {

	// Specifies the cluster ID.
	// Changing this parameter will create a new resource.
	// +crossplane:generate:reference:type=github.com/huaweicloud/provider-huaweicloud/apis/cce/v1alpha1.Cluster
	// +crossplane:generate:reference:extractor=github.com/crossplane/upjet/pkg/resource.ExtractResourceID()
	ClusterID *string `json:"clusterId,omitempty" tf:"cluster_id,omitempty"`

	// Reference to a Cluster in cce to populate clusterId.
	// +kubebuilder:validation:Optional
	ClusterIDRef *v1.Reference `json:"clusterIdRef,omitempty" tf:"-"`

	// Selector for a Cluster in cce to populate clusterId.
	// +kubebuilder:validation:Optional
	ClusterIDSelector *v1.Selector `json:"clusterIdSelector,omitempty" tf:"-"`

	// Specifies the region in which to create the CCE add-on resource.
	// If omitted, the provider-level region will be used. Changing this creates a new CCE add-on resource.
	Region *string `json:"region,omitempty" tf:"region,omitempty"`

	// Specifies the name of the add-on template.
	// Changing this parameter will create a new resource.
	TemplateName *string `json:"templateName,omitempty" tf:"template_name,omitempty"`

	// Specifies the add-on template installation parameters.
	// These parameters vary depending on the add-on. The structure is documented below.
	Values []ValuesInitParameters `json:"values,omitempty" tf:"values,omitempty"`

	// Specifies the version of the add-on.
	Version *string `json:"version,omitempty" tf:"version,omitempty"`
}

type AddonObservation struct {

	// Specifies the cluster ID.
	// Changing this parameter will create a new resource.
	ClusterID *string `json:"clusterId,omitempty" tf:"cluster_id,omitempty"`

	// Description of add-on instance.
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// ID of the add-on instance.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// Specifies the region in which to create the CCE add-on resource.
	// If omitted, the provider-level region will be used. Changing this creates a new CCE add-on resource.
	Region *string `json:"region,omitempty" tf:"region,omitempty"`

	// Add-on status information.
	Status *string `json:"status,omitempty" tf:"status,omitempty"`

	// Specifies the name of the add-on template.
	// Changing this parameter will create a new resource.
	TemplateName *string `json:"templateName,omitempty" tf:"template_name,omitempty"`

	// Specifies the add-on template installation parameters.
	// These parameters vary depending on the add-on. The structure is documented below.
	Values []ValuesObservation `json:"values,omitempty" tf:"values,omitempty"`

	// Specifies the version of the add-on.
	Version *string `json:"version,omitempty" tf:"version,omitempty"`
}

type AddonParameters struct {

	// Specifies the cluster ID.
	// Changing this parameter will create a new resource.
	// +crossplane:generate:reference:type=github.com/huaweicloud/provider-huaweicloud/apis/cce/v1alpha1.Cluster
	// +crossplane:generate:reference:extractor=github.com/crossplane/upjet/pkg/resource.ExtractResourceID()
	// +kubebuilder:validation:Optional
	ClusterID *string `json:"clusterId,omitempty" tf:"cluster_id,omitempty"`

	// Reference to a Cluster in cce to populate clusterId.
	// +kubebuilder:validation:Optional
	ClusterIDRef *v1.Reference `json:"clusterIdRef,omitempty" tf:"-"`

	// Selector for a Cluster in cce to populate clusterId.
	// +kubebuilder:validation:Optional
	ClusterIDSelector *v1.Selector `json:"clusterIdSelector,omitempty" tf:"-"`

	// Specifies the region in which to create the CCE add-on resource.
	// If omitted, the provider-level region will be used. Changing this creates a new CCE add-on resource.
	// +kubebuilder:validation:Optional
	Region *string `json:"region,omitempty" tf:"region,omitempty"`

	// Specifies the name of the add-on template.
	// Changing this parameter will create a new resource.
	// +kubebuilder:validation:Optional
	TemplateName *string `json:"templateName,omitempty" tf:"template_name,omitempty"`

	// Specifies the add-on template installation parameters.
	// These parameters vary depending on the add-on. The structure is documented below.
	// +kubebuilder:validation:Optional
	Values []ValuesParameters `json:"values,omitempty" tf:"values,omitempty"`

	// Specifies the version of the add-on.
	// +kubebuilder:validation:Optional
	Version *string `json:"version,omitempty" tf:"version,omitempty"`
}

type ValuesInitParameters struct {

	// Specifies the key/value pairs vary depending on the add-on.
	// Only supports non-nested structure and only supports string type elements.
	// This is an alternative to basic_json, but it is not recommended.
	// +mapType=granular
	Basic map[string]*string `json:"basic,omitempty" tf:"basic,omitempty"`

	// Specifies the json string vary depending on the add-on.
	BasicJSON *string `json:"basicJson,omitempty" tf:"basic_json,omitempty"`

	// Specifies the key/value pairs vary depending on the add-on.
	// Only supports non-nested structure and only supports string type elements.
	// This is an alternative to custom_json, but it is not recommended.
	// +mapType=granular
	Custom map[string]*string `json:"custom,omitempty" tf:"custom,omitempty"`

	// Specifies the json string vary depending on the add-on.
	CustomJSON *string `json:"customJson,omitempty" tf:"custom_json,omitempty"`

	// Specifies the key/value pairs vary depending on the add-on.
	// Only supports non-nested structure and only supports string type elements.
	// This is an alternative to flavor_json, but it is not recommended.
	// +mapType=granular
	Flavor map[string]*string `json:"flavor,omitempty" tf:"flavor,omitempty"`

	// Specifies the json string vary depending on the add-on.
	FlavorJSON *string `json:"flavorJson,omitempty" tf:"flavor_json,omitempty"`
}

type ValuesObservation struct {

	// Specifies the key/value pairs vary depending on the add-on.
	// Only supports non-nested structure and only supports string type elements.
	// This is an alternative to basic_json, but it is not recommended.
	// +mapType=granular
	Basic map[string]*string `json:"basic,omitempty" tf:"basic,omitempty"`

	// Specifies the json string vary depending on the add-on.
	BasicJSON *string `json:"basicJson,omitempty" tf:"basic_json,omitempty"`

	// Specifies the key/value pairs vary depending on the add-on.
	// Only supports non-nested structure and only supports string type elements.
	// This is an alternative to custom_json, but it is not recommended.
	// +mapType=granular
	Custom map[string]*string `json:"custom,omitempty" tf:"custom,omitempty"`

	// Specifies the json string vary depending on the add-on.
	CustomJSON *string `json:"customJson,omitempty" tf:"custom_json,omitempty"`

	// Specifies the key/value pairs vary depending on the add-on.
	// Only supports non-nested structure and only supports string type elements.
	// This is an alternative to flavor_json, but it is not recommended.
	// +mapType=granular
	Flavor map[string]*string `json:"flavor,omitempty" tf:"flavor,omitempty"`

	// Specifies the json string vary depending on the add-on.
	FlavorJSON *string `json:"flavorJson,omitempty" tf:"flavor_json,omitempty"`
}

type ValuesParameters struct {

	// Specifies the key/value pairs vary depending on the add-on.
	// Only supports non-nested structure and only supports string type elements.
	// This is an alternative to basic_json, but it is not recommended.
	// +kubebuilder:validation:Optional
	// +mapType=granular
	Basic map[string]*string `json:"basic,omitempty" tf:"basic,omitempty"`

	// Specifies the json string vary depending on the add-on.
	// +kubebuilder:validation:Optional
	BasicJSON *string `json:"basicJson,omitempty" tf:"basic_json,omitempty"`

	// Specifies the key/value pairs vary depending on the add-on.
	// Only supports non-nested structure and only supports string type elements.
	// This is an alternative to custom_json, but it is not recommended.
	// +kubebuilder:validation:Optional
	// +mapType=granular
	Custom map[string]*string `json:"custom,omitempty" tf:"custom,omitempty"`

	// Specifies the json string vary depending on the add-on.
	// +kubebuilder:validation:Optional
	CustomJSON *string `json:"customJson,omitempty" tf:"custom_json,omitempty"`

	// Specifies the key/value pairs vary depending on the add-on.
	// Only supports non-nested structure and only supports string type elements.
	// This is an alternative to flavor_json, but it is not recommended.
	// +kubebuilder:validation:Optional
	// +mapType=granular
	Flavor map[string]*string `json:"flavor,omitempty" tf:"flavor,omitempty"`

	// Specifies the json string vary depending on the add-on.
	// +kubebuilder:validation:Optional
	FlavorJSON *string `json:"flavorJson,omitempty" tf:"flavor_json,omitempty"`
}

// AddonSpec defines the desired state of Addon
type AddonSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     AddonParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider AddonInitParameters `json:"initProvider,omitempty"`
}

// AddonStatus defines the observed state of Addon.
type AddonStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        AddonObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// Addon is the Schema for the Addons API. ""
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,huaweicloud}
type Addon struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.templateName) || (has(self.initProvider) && has(self.initProvider.templateName))",message="spec.forProvider.templateName is a required parameter"
	Spec   AddonSpec   `json:"spec"`
	Status AddonStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// AddonList contains a list of Addons
type AddonList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []Addon `json:"items"`
}

// Repository type metadata.
var (
	Addon_Kind             = "Addon"
	Addon_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: Addon_Kind}.String()
	Addon_KindAPIVersion   = Addon_Kind + "." + CRDGroupVersion.String()
	Addon_GroupVersionKind = CRDGroupVersion.WithKind(Addon_Kind)
)

func init() {
	SchemeBuilder.Register(&Addon{}, &AddonList{})
}
