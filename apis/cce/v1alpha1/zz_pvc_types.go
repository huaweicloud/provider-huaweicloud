// SPDX-FileCopyrightText: 2024 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type PvcInitParameters struct {

	// Specifies the desired access modes the volume should have.
	// The valid values are as follows:
	// +listType=set
	AccessModes []*string `json:"accessModes,omitempty" tf:"access_modes,omitempty"`

	// Specifies the unstructured key value map for external parameters.
	// Changing this will create a new PVC resource.
	// +mapType=granular
	Annotations map[string]*string `json:"annotations,omitempty" tf:"annotations,omitempty"`

	// Specifies the cluster ID to which the CCE PVC belongs.
	// +crossplane:generate:reference:type=github.com/huaweicloud/provider-huaweicloud/apis/cce/v1alpha1.Cluster
	// +crossplane:generate:reference:extractor=github.com/crossplane/upjet/pkg/resource.ExtractResourceID()
	ClusterID *string `json:"clusterId,omitempty" tf:"cluster_id,omitempty"`

	// Reference to a Cluster in cce to populate clusterId.
	// +kubebuilder:validation:Optional
	ClusterIDRef *v1.Reference `json:"clusterIdRef,omitempty" tf:"-"`

	// Selector for a Cluster in cce to populate clusterId.
	// +kubebuilder:validation:Optional
	ClusterIDSelector *v1.Selector `json:"clusterIdSelector,omitempty" tf:"-"`

	// Specifies the map of string keys and values for labels.
	// Changing this will create a new PVC resource.
	// +mapType=granular
	Labels map[string]*string `json:"labels,omitempty" tf:"labels,omitempty"`

	// Specifies the unique name of the PVC resource.
	// This parameter can contain a maximum of 63 characters, which may consist of lowercase letters, digits and
	// hyphens (-), and must start and end with lowercase letters and digits.
	// Changing this will create a new PVC resource.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// Specifies the namespace to logically divide your containers into different
	// group. Changing this will create a new PVC resource.
	Namespace *string `json:"namespace,omitempty" tf:"namespace,omitempty"`

	// Specifies the region in which to create the PVC resource.
	// If omitted, the provider-level region will be used. Changing this will create a new PVC resource.
	Region *string `json:"region,omitempty" tf:"region,omitempty"`

	// Specifies the minimum amount of storage resources required.
	// Changing this creates a new PVC resource.
	Storage *string `json:"storage,omitempty" tf:"storage,omitempty"`

	// Specifies the type of the storage bound to the CCE PVC.
	// The valid values are as follows:
	StorageClassName *string `json:"storageClassName,omitempty" tf:"storage_class_name,omitempty"`
}

type PvcObservation struct {

	// Specifies the desired access modes the volume should have.
	// The valid values are as follows:
	// +listType=set
	AccessModes []*string `json:"accessModes,omitempty" tf:"access_modes,omitempty"`

	// Specifies the unstructured key value map for external parameters.
	// Changing this will create a new PVC resource.
	// +mapType=granular
	Annotations map[string]*string `json:"annotations,omitempty" tf:"annotations,omitempty"`

	// Specifies the cluster ID to which the CCE PVC belongs.
	ClusterID *string `json:"clusterId,omitempty" tf:"cluster_id,omitempty"`

	// The server time when PVC was created.
	CreationTimestamp *string `json:"creationTimestamp,omitempty" tf:"creation_timestamp,omitempty"`

	// The PVC ID in UUID format.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// Specifies the map of string keys and values for labels.
	// Changing this will create a new PVC resource.
	// +mapType=granular
	Labels map[string]*string `json:"labels,omitempty" tf:"labels,omitempty"`

	// Specifies the unique name of the PVC resource.
	// This parameter can contain a maximum of 63 characters, which may consist of lowercase letters, digits and
	// hyphens (-), and must start and end with lowercase letters and digits.
	// Changing this will create a new PVC resource.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// Specifies the namespace to logically divide your containers into different
	// group. Changing this will create a new PVC resource.
	Namespace *string `json:"namespace,omitempty" tf:"namespace,omitempty"`

	// Specifies the region in which to create the PVC resource.
	// If omitted, the provider-level region will be used. Changing this will create a new PVC resource.
	Region *string `json:"region,omitempty" tf:"region,omitempty"`

	// The current phase of the PVC.
	Status *string `json:"status,omitempty" tf:"status,omitempty"`

	// Specifies the minimum amount of storage resources required.
	// Changing this creates a new PVC resource.
	Storage *string `json:"storage,omitempty" tf:"storage,omitempty"`

	// Specifies the type of the storage bound to the CCE PVC.
	// The valid values are as follows:
	StorageClassName *string `json:"storageClassName,omitempty" tf:"storage_class_name,omitempty"`
}

type PvcParameters struct {

	// Specifies the desired access modes the volume should have.
	// The valid values are as follows:
	// +kubebuilder:validation:Optional
	// +listType=set
	AccessModes []*string `json:"accessModes,omitempty" tf:"access_modes,omitempty"`

	// Specifies the unstructured key value map for external parameters.
	// Changing this will create a new PVC resource.
	// +kubebuilder:validation:Optional
	// +mapType=granular
	Annotations map[string]*string `json:"annotations,omitempty" tf:"annotations,omitempty"`

	// Specifies the cluster ID to which the CCE PVC belongs.
	// +crossplane:generate:reference:type=github.com/huaweicloud/provider-huaweicloud/apis/cce/v1alpha1.Cluster
	// +crossplane:generate:reference:extractor=github.com/crossplane/upjet/pkg/resource.ExtractResourceID()
	// +kubebuilder:validation:Optional
	ClusterID *string `json:"clusterId,omitempty" tf:"cluster_id,omitempty"`

	// Reference to a Cluster in cce to populate clusterId.
	// +kubebuilder:validation:Optional
	ClusterIDRef *v1.Reference `json:"clusterIdRef,omitempty" tf:"-"`

	// Selector for a Cluster in cce to populate clusterId.
	// +kubebuilder:validation:Optional
	ClusterIDSelector *v1.Selector `json:"clusterIdSelector,omitempty" tf:"-"`

	// Specifies the map of string keys and values for labels.
	// Changing this will create a new PVC resource.
	// +kubebuilder:validation:Optional
	// +mapType=granular
	Labels map[string]*string `json:"labels,omitempty" tf:"labels,omitempty"`

	// Specifies the unique name of the PVC resource.
	// This parameter can contain a maximum of 63 characters, which may consist of lowercase letters, digits and
	// hyphens (-), and must start and end with lowercase letters and digits.
	// Changing this will create a new PVC resource.
	// +kubebuilder:validation:Optional
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// Specifies the namespace to logically divide your containers into different
	// group. Changing this will create a new PVC resource.
	// +kubebuilder:validation:Optional
	Namespace *string `json:"namespace,omitempty" tf:"namespace,omitempty"`

	// Specifies the region in which to create the PVC resource.
	// If omitted, the provider-level region will be used. Changing this will create a new PVC resource.
	// +kubebuilder:validation:Optional
	Region *string `json:"region,omitempty" tf:"region,omitempty"`

	// Specifies the minimum amount of storage resources required.
	// Changing this creates a new PVC resource.
	// +kubebuilder:validation:Optional
	Storage *string `json:"storage,omitempty" tf:"storage,omitempty"`

	// Specifies the type of the storage bound to the CCE PVC.
	// The valid values are as follows:
	// +kubebuilder:validation:Optional
	StorageClassName *string `json:"storageClassName,omitempty" tf:"storage_class_name,omitempty"`
}

// PvcSpec defines the desired state of Pvc
type PvcSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     PvcParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider PvcInitParameters `json:"initProvider,omitempty"`
}

// PvcStatus defines the observed state of Pvc.
type PvcStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        PvcObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// Pvc is the Schema for the Pvcs API. ""
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,huaweicloud}
type Pvc struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.accessModes) || (has(self.initProvider) && has(self.initProvider.accessModes))",message="spec.forProvider.accessModes is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.name) || (has(self.initProvider) && has(self.initProvider.name))",message="spec.forProvider.name is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.__namespace__) || (has(self.initProvider) && has(self.initProvider.__namespace__))",message="spec.forProvider.namespace is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.storage) || (has(self.initProvider) && has(self.initProvider.storage))",message="spec.forProvider.storage is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.storageClassName) || (has(self.initProvider) && has(self.initProvider.storageClassName))",message="spec.forProvider.storageClassName is a required parameter"
	Spec   PvcSpec   `json:"spec"`
	Status PvcStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// PvcList contains a list of Pvcs
type PvcList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []Pvc `json:"items"`
}

// Repository type metadata.
var (
	Pvc_Kind             = "Pvc"
	Pvc_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: Pvc_Kind}.String()
	Pvc_KindAPIVersion   = Pvc_Kind + "." + CRDGroupVersion.String()
	Pvc_GroupVersionKind = CRDGroupVersion.WithKind(Pvc_Kind)
)

func init() {
	SchemeBuilder.Register(&Pvc{}, &PvcList{})
}
