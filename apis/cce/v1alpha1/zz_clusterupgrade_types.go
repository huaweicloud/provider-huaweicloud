// SPDX-FileCopyrightText: 2024 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type AddonsInitParameters struct {

	// Specifies the add-on name.
	AddonTemplateName *string `json:"addonTemplateName,omitempty" tf:"addon_template_name,omitempty"`

	// Specifies the execution action.
	// For current upgrades, the value can be patch.
	Operation *string `json:"operation,omitempty" tf:"operation,omitempty"`

	// Specifies the add-on template installation parameters.
	// These parameters vary depending on the add-on. The values is documented below.
	Values []AddonsValuesInitParameters `json:"values,omitempty" tf:"values,omitempty"`

	// Specifies the target add-on version.
	// The target add-on version must match the target cluster version.
	Version *string `json:"version,omitempty" tf:"version,omitempty"`
}

type AddonsObservation struct {

	// Specifies the add-on name.
	AddonTemplateName *string `json:"addonTemplateName,omitempty" tf:"addon_template_name,omitempty"`

	// Specifies the execution action.
	// For current upgrades, the value can be patch.
	Operation *string `json:"operation,omitempty" tf:"operation,omitempty"`

	// Specifies the add-on template installation parameters.
	// These parameters vary depending on the add-on. The values is documented below.
	Values []AddonsValuesObservation `json:"values,omitempty" tf:"values,omitempty"`

	// Specifies the target add-on version.
	// The target add-on version must match the target cluster version.
	Version *string `json:"version,omitempty" tf:"version,omitempty"`
}

type AddonsParameters struct {

	// Specifies the add-on name.
	// +kubebuilder:validation:Optional
	AddonTemplateName *string `json:"addonTemplateName" tf:"addon_template_name,omitempty"`

	// Specifies the execution action.
	// For current upgrades, the value can be patch.
	// +kubebuilder:validation:Optional
	Operation *string `json:"operation" tf:"operation,omitempty"`

	// Specifies the add-on template installation parameters.
	// These parameters vary depending on the add-on. The values is documented below.
	// +kubebuilder:validation:Optional
	Values []AddonsValuesParameters `json:"values,omitempty" tf:"values,omitempty"`

	// Specifies the target add-on version.
	// The target add-on version must match the target cluster version.
	// +kubebuilder:validation:Optional
	Version *string `json:"version" tf:"version,omitempty"`
}

type AddonsValuesInitParameters struct {

	// Specifies the json string vary depending on the add-on.
	BasicJSON *string `json:"basicJson,omitempty" tf:"basic_json,omitempty"`

	// Specifies the json string vary depending on the add-on.
	CustomJSON *string `json:"customJson,omitempty" tf:"custom_json,omitempty"`

	// Specifies the json string vary depending on the add-on.
	FlavorJSON *string `json:"flavorJson,omitempty" tf:"flavor_json,omitempty"`
}

type AddonsValuesObservation struct {

	// Specifies the json string vary depending on the add-on.
	BasicJSON *string `json:"basicJson,omitempty" tf:"basic_json,omitempty"`

	// Specifies the json string vary depending on the add-on.
	CustomJSON *string `json:"customJson,omitempty" tf:"custom_json,omitempty"`

	// Specifies the json string vary depending on the add-on.
	FlavorJSON *string `json:"flavorJson,omitempty" tf:"flavor_json,omitempty"`
}

type AddonsValuesParameters struct {

	// Specifies the json string vary depending on the add-on.
	// +kubebuilder:validation:Optional
	BasicJSON *string `json:"basicJson,omitempty" tf:"basic_json,omitempty"`

	// Specifies the json string vary depending on the add-on.
	// +kubebuilder:validation:Optional
	CustomJSON *string `json:"customJson,omitempty" tf:"custom_json,omitempty"`

	// Specifies the json string vary depending on the add-on.
	// +kubebuilder:validation:Optional
	FlavorJSON *string `json:"flavorJson,omitempty" tf:"flavor_json,omitempty"`
}

type ClusterUpgradeInitParameters struct {

	// Specifies the add-on configuration list
	// The addons structure is documented below.
	Addons []AddonsInitParameters `json:"addons,omitempty" tf:"addons,omitempty"`

	// Specifies the cluster ID.
	// +crossplane:generate:reference:type=github.com/huaweicloud/provider-huaweicloud/apis/cce/v1alpha1.Cluster
	// +crossplane:generate:reference:extractor=github.com/crossplane/upjet/pkg/resource.ExtractResourceID()
	ClusterID *string `json:"clusterId,omitempty" tf:"cluster_id,omitempty"`

	// Reference to a Cluster in cce to populate clusterId.
	// +kubebuilder:validation:Optional
	ClusterIDRef *v1.Reference `json:"clusterIdRef,omitempty" tf:"-"`

	// Selector for a Cluster in cce to populate clusterId.
	// +kubebuilder:validation:Optional
	ClusterIDSelector *v1.Selector `json:"clusterIdSelector,omitempty" tf:"-"`

	EnableForceNew *string `json:"enableForceNew,omitempty" tf:"enable_force_new,omitempty"`

	// Specifies the upgrade sequence of nodes in the node pools.
	// The key is the node pool ID, DefaultPool indicates the default pool.
	// The value is a json string which indicates the priority of nodes in this pool. Please check the example.
	// +mapType=granular
	NodeOrder map[string]*string `json:"nodeOrder,omitempty" tf:"node_order,omitempty"`

	// Specifies the upgrade sequence of node pools, in key-value pairs.
	// The key is the node pool ID, DefaultPool indicates the default pool.
	// The value is the priority of the node pool. 0 indicating the lowest priority.
	// A larger value indicates a higher priority.
	// +mapType=granular
	NodepoolOrder map[string]*float64 `json:"nodepoolOrder,omitempty" tf:"nodepool_order,omitempty"`

	// The region in which to create the CCE cluster upgrade resource.
	// If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
	Region *string `json:"region,omitempty" tf:"region,omitempty"`

	// Specifies the upgrade strategy.
	// The strategy structure is documented below.
	Strategy []StrategyInitParameters `json:"strategy,omitempty" tf:"strategy,omitempty"`

	// Specifies the target version.
	TargetVersion *string `json:"targetVersion,omitempty" tf:"target_version,omitempty"`
}

type ClusterUpgradeObservation struct {

	// Specifies the add-on configuration list
	// The addons structure is documented below.
	Addons []AddonsObservation `json:"addons,omitempty" tf:"addons,omitempty"`

	// Specifies the cluster ID.
	ClusterID *string `json:"clusterId,omitempty" tf:"cluster_id,omitempty"`

	EnableForceNew *string `json:"enableForceNew,omitempty" tf:"enable_force_new,omitempty"`

	// The resource ID in UUID format.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// Specifies the upgrade sequence of nodes in the node pools.
	// The key is the node pool ID, DefaultPool indicates the default pool.
	// The value is a json string which indicates the priority of nodes in this pool. Please check the example.
	// +mapType=granular
	NodeOrder map[string]*string `json:"nodeOrder,omitempty" tf:"node_order,omitempty"`

	// Specifies the upgrade sequence of node pools, in key-value pairs.
	// The key is the node pool ID, DefaultPool indicates the default pool.
	// The value is the priority of the node pool. 0 indicating the lowest priority.
	// A larger value indicates a higher priority.
	// +mapType=granular
	NodepoolOrder map[string]*float64 `json:"nodepoolOrder,omitempty" tf:"nodepool_order,omitempty"`

	// The region in which to create the CCE cluster upgrade resource.
	// If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
	Region *string `json:"region,omitempty" tf:"region,omitempty"`

	// Specifies the upgrade strategy.
	// The strategy structure is documented below.
	Strategy []StrategyObservation `json:"strategy,omitempty" tf:"strategy,omitempty"`

	// Specifies the target version.
	TargetVersion *string `json:"targetVersion,omitempty" tf:"target_version,omitempty"`
}

type ClusterUpgradeParameters struct {

	// Specifies the add-on configuration list
	// The addons structure is documented below.
	// +kubebuilder:validation:Optional
	Addons []AddonsParameters `json:"addons,omitempty" tf:"addons,omitempty"`

	// Specifies the cluster ID.
	// +crossplane:generate:reference:type=github.com/huaweicloud/provider-huaweicloud/apis/cce/v1alpha1.Cluster
	// +crossplane:generate:reference:extractor=github.com/crossplane/upjet/pkg/resource.ExtractResourceID()
	// +kubebuilder:validation:Optional
	ClusterID *string `json:"clusterId,omitempty" tf:"cluster_id,omitempty"`

	// Reference to a Cluster in cce to populate clusterId.
	// +kubebuilder:validation:Optional
	ClusterIDRef *v1.Reference `json:"clusterIdRef,omitempty" tf:"-"`

	// Selector for a Cluster in cce to populate clusterId.
	// +kubebuilder:validation:Optional
	ClusterIDSelector *v1.Selector `json:"clusterIdSelector,omitempty" tf:"-"`

	// +kubebuilder:validation:Optional
	EnableForceNew *string `json:"enableForceNew,omitempty" tf:"enable_force_new,omitempty"`

	// Specifies the upgrade sequence of nodes in the node pools.
	// The key is the node pool ID, DefaultPool indicates the default pool.
	// The value is a json string which indicates the priority of nodes in this pool. Please check the example.
	// +kubebuilder:validation:Optional
	// +mapType=granular
	NodeOrder map[string]*string `json:"nodeOrder,omitempty" tf:"node_order,omitempty"`

	// Specifies the upgrade sequence of node pools, in key-value pairs.
	// The key is the node pool ID, DefaultPool indicates the default pool.
	// The value is the priority of the node pool. 0 indicating the lowest priority.
	// A larger value indicates a higher priority.
	// +kubebuilder:validation:Optional
	// +mapType=granular
	NodepoolOrder map[string]*float64 `json:"nodepoolOrder,omitempty" tf:"nodepool_order,omitempty"`

	// The region in which to create the CCE cluster upgrade resource.
	// If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
	// +kubebuilder:validation:Optional
	Region *string `json:"region,omitempty" tf:"region,omitempty"`

	// Specifies the upgrade strategy.
	// The strategy structure is documented below.
	// +kubebuilder:validation:Optional
	Strategy []StrategyParameters `json:"strategy,omitempty" tf:"strategy,omitempty"`

	// Specifies the target version.
	// +kubebuilder:validation:Optional
	TargetVersion *string `json:"targetVersion,omitempty" tf:"target_version,omitempty"`
}

type InPlaceRollingUpdateInitParameters struct {

	// Specifies the node upgrade step.
	// The value ranges from 1 to 40. The recommended value is 20.
	UserDefinedStep *float64 `json:"userDefinedStep,omitempty" tf:"user_defined_step,omitempty"`
}

type InPlaceRollingUpdateObservation struct {

	// Specifies the node upgrade step.
	// The value ranges from 1 to 40. The recommended value is 20.
	UserDefinedStep *float64 `json:"userDefinedStep,omitempty" tf:"user_defined_step,omitempty"`
}

type InPlaceRollingUpdateParameters struct {

	// Specifies the node upgrade step.
	// The value ranges from 1 to 40. The recommended value is 20.
	// +kubebuilder:validation:Optional
	UserDefinedStep *float64 `json:"userDefinedStep,omitempty" tf:"user_defined_step,omitempty"`
}

type StrategyInitParameters struct {

	// Specifies the in-place upgrade settings.
	// It's mandatory when the type is set to inPlaceRollingUpdate.
	// The in_place_rolling_update structure is documented below.
	InPlaceRollingUpdate []InPlaceRollingUpdateInitParameters `json:"inPlaceRollingUpdate,omitempty" tf:"in_place_rolling_update,omitempty"`

	// Specifies the upgrade strategy type.
	// The value can be inPlaceRollingUpdate.
	Type *string `json:"type,omitempty" tf:"type,omitempty"`
}

type StrategyObservation struct {

	// Specifies the in-place upgrade settings.
	// It's mandatory when the type is set to inPlaceRollingUpdate.
	// The in_place_rolling_update structure is documented below.
	InPlaceRollingUpdate []InPlaceRollingUpdateObservation `json:"inPlaceRollingUpdate,omitempty" tf:"in_place_rolling_update,omitempty"`

	// Specifies the upgrade strategy type.
	// The value can be inPlaceRollingUpdate.
	Type *string `json:"type,omitempty" tf:"type,omitempty"`
}

type StrategyParameters struct {

	// Specifies the in-place upgrade settings.
	// It's mandatory when the type is set to inPlaceRollingUpdate.
	// The in_place_rolling_update structure is documented below.
	// +kubebuilder:validation:Optional
	InPlaceRollingUpdate []InPlaceRollingUpdateParameters `json:"inPlaceRollingUpdate,omitempty" tf:"in_place_rolling_update,omitempty"`

	// Specifies the upgrade strategy type.
	// The value can be inPlaceRollingUpdate.
	// +kubebuilder:validation:Optional
	Type *string `json:"type" tf:"type,omitempty"`
}

// ClusterUpgradeSpec defines the desired state of ClusterUpgrade
type ClusterUpgradeSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     ClusterUpgradeParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider ClusterUpgradeInitParameters `json:"initProvider,omitempty"`
}

// ClusterUpgradeStatus defines the observed state of ClusterUpgrade.
type ClusterUpgradeStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        ClusterUpgradeObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// ClusterUpgrade is the Schema for the ClusterUpgrades API. Use this resource to upgrade a CCE cluster within HuaweiCloud.
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,huaweicloud}
type ClusterUpgrade struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.strategy) || (has(self.initProvider) && has(self.initProvider.strategy))",message="spec.forProvider.strategy is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.targetVersion) || (has(self.initProvider) && has(self.initProvider.targetVersion))",message="spec.forProvider.targetVersion is a required parameter"
	Spec   ClusterUpgradeSpec   `json:"spec"`
	Status ClusterUpgradeStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// ClusterUpgradeList contains a list of ClusterUpgrades
type ClusterUpgradeList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []ClusterUpgrade `json:"items"`
}

// Repository type metadata.
var (
	ClusterUpgrade_Kind             = "ClusterUpgrade"
	ClusterUpgrade_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: ClusterUpgrade_Kind}.String()
	ClusterUpgrade_KindAPIVersion   = ClusterUpgrade_Kind + "." + CRDGroupVersion.String()
	ClusterUpgrade_GroupVersionKind = CRDGroupVersion.WithKind(ClusterUpgrade_Kind)
)

func init() {
	SchemeBuilder.Register(&ClusterUpgrade{}, &ClusterUpgradeList{})
}
