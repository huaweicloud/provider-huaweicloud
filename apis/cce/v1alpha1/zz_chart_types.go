// SPDX-FileCopyrightText: 2024 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type ChartInitParameters struct {

	// Specifies the path of the chart package to be uploaded.
	Content *string `json:"content,omitempty" tf:"content,omitempty"`

	// Specifies the parameters of the CCE chart.
	Parameters *string `json:"parameters,omitempty" tf:"parameters,omitempty"`

	// Specifies the region in which to create the CCE chart resource.
	// If omitted, the provider-level region will be used. Changing this creates a new CCE chart resource.
	Region *string `json:"region,omitempty" tf:"region,omitempty"`
}

type ChartObservation struct {

	// The chart url.
	ChartURL *string `json:"chartUrl,omitempty" tf:"chart_url,omitempty"`

	// Specifies the path of the chart package to be uploaded.
	Content *string `json:"content,omitempty" tf:"content,omitempty"`

	// The create time.
	CreatedAt *string `json:"createdAt,omitempty" tf:"created_at,omitempty"`

	// The description of the chart.
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// The instruction of the chart.
	Instruction *string `json:"instruction,omitempty" tf:"instruction,omitempty"`

	// The chart name.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// Specifies the parameters of the CCE chart.
	Parameters *string `json:"parameters,omitempty" tf:"parameters,omitempty"`

	// Whether the chart is public.
	Public *bool `json:"public,omitempty" tf:"public,omitempty"`

	// Specifies the region in which to create the CCE chart resource.
	// If omitted, the provider-level region will be used. Changing this creates a new CCE chart resource.
	Region *string `json:"region,omitempty" tf:"region,omitempty"`

	// The source of the chart.
	Source *string `json:"source,omitempty" tf:"source,omitempty"`

	// The traslate source of the chart.
	Translate *string `json:"translate,omitempty" tf:"translate,omitempty"`

	// The update time.
	UpdatedAt *string `json:"updatedAt,omitempty" tf:"updated_at,omitempty"`

	// The value of the chart.
	Value *string `json:"value,omitempty" tf:"value,omitempty"`

	// The chart version.
	Version *string `json:"version,omitempty" tf:"version,omitempty"`
}

type ChartParameters struct {

	// Specifies the path of the chart package to be uploaded.
	// +kubebuilder:validation:Optional
	Content *string `json:"content,omitempty" tf:"content,omitempty"`

	// Specifies the parameters of the CCE chart.
	// +kubebuilder:validation:Optional
	Parameters *string `json:"parameters,omitempty" tf:"parameters,omitempty"`

	// Specifies the region in which to create the CCE chart resource.
	// If omitted, the provider-level region will be used. Changing this creates a new CCE chart resource.
	// +kubebuilder:validation:Optional
	Region *string `json:"region,omitempty" tf:"region,omitempty"`
}

// ChartSpec defines the desired state of Chart
type ChartSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     ChartParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider ChartInitParameters `json:"initProvider,omitempty"`
}

// ChartStatus defines the observed state of Chart.
type ChartStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        ChartObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// Chart is the Schema for the Charts API. ""
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,huaweicloud}
type Chart struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.content) || (has(self.initProvider) && has(self.initProvider.content))",message="spec.forProvider.content is a required parameter"
	Spec   ChartSpec   `json:"spec"`
	Status ChartStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// ChartList contains a list of Charts
type ChartList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []Chart `json:"items"`
}

// Repository type metadata.
var (
	Chart_Kind             = "Chart"
	Chart_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: Chart_Kind}.String()
	Chart_KindAPIVersion   = Chart_Kind + "." + CRDGroupVersion.String()
	Chart_GroupVersionKind = CRDGroupVersion.WithKind(Chart_Kind)
)

func init() {
	SchemeBuilder.Register(&Chart{}, &ChartList{})
}
