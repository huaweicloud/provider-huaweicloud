// SPDX-FileCopyrightText: 2024 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type MountStoragesInitParameters struct {
}

type MountStoragesObservation struct {

	// The mount ID.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// The local mount path.
	MountPath *string `json:"mountPath,omitempty" tf:"mount_path,omitempty"`

	// The path of storage which be mounted.
	Path *string `json:"path,omitempty" tf:"path,omitempty"`

	// The status of mount.
	Status *string `json:"status,omitempty" tf:"status,omitempty"`

	// The type of storage which be mounted.
	Type *string `json:"type,omitempty" tf:"type,omitempty"`
}

type MountStoragesParameters struct {
}

type NotebookInitParameters struct {

	// Specifies public IP addresses that are allowed for remote SSH access.
	// If the parameter is not specified, all IP addresses will be allowed for remote SSH access.
	AllowedAccessIps []*string `json:"allowedAccessIps,omitempty" tf:"allowed_access_ips,omitempty"`

	// Specifies the description of notebook. It contains a maximum of 512 characters and
	// cannot contain special characters &<>"'/.
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// Specifies the flavor ID. The options are as follows:
	FlavorID *string `json:"flavorId,omitempty" tf:"flavor_id,omitempty"`

	// Specifies the image ID of notebook.
	ImageID *string `json:"imageId,omitempty" tf:"image_id,omitempty"`

	// Specifies the key pair name for remote SSH access.
	// Changing this parameter will create a new resource.
	KeyPair *string `json:"keyPair,omitempty" tf:"key_pair,omitempty"`

	// Specifies the name of the notebook. The name consists of 1 to 64 characters,
	// starting with a letter. Only letters, digits and underscores (_) are allowed.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// Specifies the ID of Dedicated resource pool which the notebook used.
	// Changing this parameter will create a new resource.
	// +crossplane:generate:reference:type=github.com/huaweicloud/provider-huaweicloud/apis/modelarts/v1alpha1.ResourcePool
	// +crossplane:generate:reference:extractor=github.com/crossplane/upjet/pkg/resource.ExtractResourceID()
	PoolID *string `json:"poolId,omitempty" tf:"pool_id,omitempty"`

	// Reference to a ResourcePool in modelarts to populate poolId.
	// +kubebuilder:validation:Optional
	PoolIDRef *v1.Reference `json:"poolIdRef,omitempty" tf:"-"`

	// Selector for a ResourcePool in modelarts to populate poolId.
	// +kubebuilder:validation:Optional
	PoolIDSelector *v1.Selector `json:"poolIdSelector,omitempty" tf:"-"`

	// The region in which to create the resource. If omitted, the
	// provider-level region will be used. Changing this parameter will create a new resource.
	Region *string `json:"region,omitempty" tf:"region,omitempty"`

	// Specifies the volume information. Structure is documented below.
	Volume []VolumeInitParameters `json:"volume,omitempty" tf:"volume,omitempty"`

	// Specifies the workspace ID which the notebook belongs to.
	// The default value is 0. Changing this parameter will create a new resource.
	// +crossplane:generate:reference:type=github.com/huaweicloud/provider-huaweicloud/apis/modelarts/v1alpha1.Workspace
	// +crossplane:generate:reference:extractor=github.com/crossplane/upjet/pkg/resource.ExtractResourceID()
	WorkspaceID *string `json:"workspaceId,omitempty" tf:"workspace_id,omitempty"`

	// Reference to a Workspace in modelarts to populate workspaceId.
	// +kubebuilder:validation:Optional
	WorkspaceIDRef *v1.Reference `json:"workspaceIdRef,omitempty" tf:"-"`

	// Selector for a Workspace in modelarts to populate workspaceId.
	// +kubebuilder:validation:Optional
	WorkspaceIDSelector *v1.Selector `json:"workspaceIdSelector,omitempty" tf:"-"`
}

type NotebookObservation struct {

	// Specifies public IP addresses that are allowed for remote SSH access.
	// If the parameter is not specified, all IP addresses will be allowed for remote SSH access.
	AllowedAccessIps []*string `json:"allowedAccessIps,omitempty" tf:"allowed_access_ips,omitempty"`

	// Whether enabled the notebook instance to automatically stop.
	AutoStopEnabled *bool `json:"autoStopEnabled,omitempty" tf:"auto_stop_enabled,omitempty"`

	// The notebook creation time.
	CreatedAt *string `json:"createdAt,omitempty" tf:"created_at,omitempty"`

	// Specifies the description of notebook. It contains a maximum of 512 characters and
	// cannot contain special characters &<>"'/.
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// Specifies the flavor ID. The options are as follows:
	FlavorID *string `json:"flavorId,omitempty" tf:"flavor_id,omitempty"`

	// The resource ID in UUID format.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// Specifies the image ID of notebook.
	ImageID *string `json:"imageId,omitempty" tf:"image_id,omitempty"`

	// The image name.
	ImageName *string `json:"imageName,omitempty" tf:"image_name,omitempty"`

	// The image path in swr.
	ImageSwrPath *string `json:"imageSwrPath,omitempty" tf:"image_swr_path,omitempty"`

	// The image type. Valid values include: BUILD_IN, DEDICATED.
	ImageType *string `json:"imageType,omitempty" tf:"image_type,omitempty"`

	// Specifies the key pair name for remote SSH access.
	// Changing this parameter will create a new resource.
	KeyPair *string `json:"keyPair,omitempty" tf:"key_pair,omitempty"`

	// An array of storages which mount to the notebook. Structure is documented below.
	MountStorages []MountStoragesObservation `json:"mountStorages,omitempty" tf:"mount_storages,omitempty"`

	// Specifies the name of the notebook. The name consists of 1 to 64 characters,
	// starting with a letter. Only letters, digits and underscores (_) are allowed.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// Specifies the ID of Dedicated resource pool which the notebook used.
	// Changing this parameter will create a new resource.
	PoolID *string `json:"poolId,omitempty" tf:"pool_id,omitempty"`

	// The name of Dedicated resource pool which the notebook used.
	PoolName *string `json:"poolName,omitempty" tf:"pool_name,omitempty"`

	// The region in which to create the resource. If omitted, the
	// provider-level region will be used. Changing this parameter will create a new resource.
	Region *string `json:"region,omitempty" tf:"region,omitempty"`

	// The uri for remote SSH access.
	SSHURI *string `json:"sshUri,omitempty" tf:"ssh_uri,omitempty"`

	// Notebook status. Valid values include: INIT, CREATING, STARTING, STOPPING, DELETING, RUNNING,
	// STOPPED, SNAPSHOTTING, CREATE_FAILED, START_FAILED, DELETE_FAILED, ERROR, DELETED, FROZEN.
	Status *string `json:"status,omitempty" tf:"status,omitempty"`

	// The web url of the notebook.
	URL *string `json:"url,omitempty" tf:"url,omitempty"`

	// The notebook update time.
	UpdatedAt *string `json:"updatedAt,omitempty" tf:"updated_at,omitempty"`

	// Specifies the volume information. Structure is documented below.
	Volume []VolumeObservation `json:"volume,omitempty" tf:"volume,omitempty"`

	// Specifies the workspace ID which the notebook belongs to.
	// The default value is 0. Changing this parameter will create a new resource.
	WorkspaceID *string `json:"workspaceId,omitempty" tf:"workspace_id,omitempty"`
}

type NotebookParameters struct {

	// Specifies public IP addresses that are allowed for remote SSH access.
	// If the parameter is not specified, all IP addresses will be allowed for remote SSH access.
	// +kubebuilder:validation:Optional
	AllowedAccessIps []*string `json:"allowedAccessIps,omitempty" tf:"allowed_access_ips,omitempty"`

	// Specifies the description of notebook. It contains a maximum of 512 characters and
	// cannot contain special characters &<>"'/.
	// +kubebuilder:validation:Optional
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// Specifies the flavor ID. The options are as follows:
	// +kubebuilder:validation:Optional
	FlavorID *string `json:"flavorId,omitempty" tf:"flavor_id,omitempty"`

	// Specifies the image ID of notebook.
	// +kubebuilder:validation:Optional
	ImageID *string `json:"imageId,omitempty" tf:"image_id,omitempty"`

	// Specifies the key pair name for remote SSH access.
	// Changing this parameter will create a new resource.
	// +kubebuilder:validation:Optional
	KeyPair *string `json:"keyPair,omitempty" tf:"key_pair,omitempty"`

	// Specifies the name of the notebook. The name consists of 1 to 64 characters,
	// starting with a letter. Only letters, digits and underscores (_) are allowed.
	// +kubebuilder:validation:Optional
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// Specifies the ID of Dedicated resource pool which the notebook used.
	// Changing this parameter will create a new resource.
	// +crossplane:generate:reference:type=github.com/huaweicloud/provider-huaweicloud/apis/modelarts/v1alpha1.ResourcePool
	// +crossplane:generate:reference:extractor=github.com/crossplane/upjet/pkg/resource.ExtractResourceID()
	// +kubebuilder:validation:Optional
	PoolID *string `json:"poolId,omitempty" tf:"pool_id,omitempty"`

	// Reference to a ResourcePool in modelarts to populate poolId.
	// +kubebuilder:validation:Optional
	PoolIDRef *v1.Reference `json:"poolIdRef,omitempty" tf:"-"`

	// Selector for a ResourcePool in modelarts to populate poolId.
	// +kubebuilder:validation:Optional
	PoolIDSelector *v1.Selector `json:"poolIdSelector,omitempty" tf:"-"`

	// The region in which to create the resource. If omitted, the
	// provider-level region will be used. Changing this parameter will create a new resource.
	// +kubebuilder:validation:Optional
	Region *string `json:"region,omitempty" tf:"region,omitempty"`

	// Specifies the volume information. Structure is documented below.
	// +kubebuilder:validation:Optional
	Volume []VolumeParameters `json:"volume,omitempty" tf:"volume,omitempty"`

	// Specifies the workspace ID which the notebook belongs to.
	// The default value is 0. Changing this parameter will create a new resource.
	// +crossplane:generate:reference:type=github.com/huaweicloud/provider-huaweicloud/apis/modelarts/v1alpha1.Workspace
	// +crossplane:generate:reference:extractor=github.com/crossplane/upjet/pkg/resource.ExtractResourceID()
	// +kubebuilder:validation:Optional
	WorkspaceID *string `json:"workspaceId,omitempty" tf:"workspace_id,omitempty"`

	// Reference to a Workspace in modelarts to populate workspaceId.
	// +kubebuilder:validation:Optional
	WorkspaceIDRef *v1.Reference `json:"workspaceIdRef,omitempty" tf:"-"`

	// Selector for a Workspace in modelarts to populate workspaceId.
	// +kubebuilder:validation:Optional
	WorkspaceIDSelector *v1.Selector `json:"workspaceIdSelector,omitempty" tf:"-"`
}

type VolumeInitParameters struct {

	// Specifies the ID of dedicated storage disk, which is mandatory when the type
	// is EFS and the ownership is DEDICATED.
	// Changing this parameter will create a new resource.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// The local mount path.
	// schema: Computed
	MountPath *string `json:"mountPath,omitempty" tf:"mount_path,omitempty"`

	// Specifies the volume ownership. The options are as follows:
	Ownership *string `json:"ownership,omitempty" tf:"ownership,omitempty"`

	// Specifies the volume size. Its value range is from 5 GB to 4,096 GB.
	Size *float64 `json:"size,omitempty" tf:"size,omitempty"`

	// Specifies the volume type. The options are as follows:
	Type *string `json:"type,omitempty" tf:"type,omitempty"`

	// Specifies the URL of dedicated storage disk, which is mandatory when the type
	// is EFS and the ownership is DEDICATED. Example: 192.168.0.1:/user-9sfdsdgdfgh5ea4d56871e75d6966aa274/mount/.
	// Changing this parameter will create a new resource.
	URI *string `json:"uri,omitempty" tf:"uri,omitempty"`
}

type VolumeObservation struct {

	// Specifies the ID of dedicated storage disk, which is mandatory when the type
	// is EFS and the ownership is DEDICATED.
	// Changing this parameter will create a new resource.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// The local mount path.
	// schema: Computed
	MountPath *string `json:"mountPath,omitempty" tf:"mount_path,omitempty"`

	// Specifies the volume ownership. The options are as follows:
	Ownership *string `json:"ownership,omitempty" tf:"ownership,omitempty"`

	// Specifies the volume size. Its value range is from 5 GB to 4,096 GB.
	Size *float64 `json:"size,omitempty" tf:"size,omitempty"`

	// Specifies the volume type. The options are as follows:
	Type *string `json:"type,omitempty" tf:"type,omitempty"`

	// Specifies the URL of dedicated storage disk, which is mandatory when the type
	// is EFS and the ownership is DEDICATED. Example: 192.168.0.1:/user-9sfdsdgdfgh5ea4d56871e75d6966aa274/mount/.
	// Changing this parameter will create a new resource.
	URI *string `json:"uri,omitempty" tf:"uri,omitempty"`
}

type VolumeParameters struct {

	// Specifies the ID of dedicated storage disk, which is mandatory when the type
	// is EFS and the ownership is DEDICATED.
	// Changing this parameter will create a new resource.
	// +kubebuilder:validation:Optional
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// The local mount path.
	// schema: Computed
	// +kubebuilder:validation:Optional
	MountPath *string `json:"mountPath,omitempty" tf:"mount_path,omitempty"`

	// Specifies the volume ownership. The options are as follows:
	// +kubebuilder:validation:Optional
	Ownership *string `json:"ownership,omitempty" tf:"ownership,omitempty"`

	// Specifies the volume size. Its value range is from 5 GB to 4,096 GB.
	// +kubebuilder:validation:Optional
	Size *float64 `json:"size,omitempty" tf:"size,omitempty"`

	// Specifies the volume type. The options are as follows:
	// +kubebuilder:validation:Optional
	Type *string `json:"type" tf:"type,omitempty"`

	// Specifies the URL of dedicated storage disk, which is mandatory when the type
	// is EFS and the ownership is DEDICATED. Example: 192.168.0.1:/user-9sfdsdgdfgh5ea4d56871e75d6966aa274/mount/.
	// Changing this parameter will create a new resource.
	// +kubebuilder:validation:Optional
	URI *string `json:"uri,omitempty" tf:"uri,omitempty"`
}

// NotebookSpec defines the desired state of Notebook
type NotebookSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     NotebookParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider NotebookInitParameters `json:"initProvider,omitempty"`
}

// NotebookStatus defines the observed state of Notebook.
type NotebookStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        NotebookObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// Notebook is the Schema for the Notebooks API. ""
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,huaweicloud}
type Notebook struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.flavorId) || (has(self.initProvider) && has(self.initProvider.flavorId))",message="spec.forProvider.flavorId is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.imageId) || (has(self.initProvider) && has(self.initProvider.imageId))",message="spec.forProvider.imageId is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.name) || (has(self.initProvider) && has(self.initProvider.name))",message="spec.forProvider.name is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.volume) || (has(self.initProvider) && has(self.initProvider.volume))",message="spec.forProvider.volume is a required parameter"
	Spec   NotebookSpec   `json:"spec"`
	Status NotebookStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// NotebookList contains a list of Notebooks
type NotebookList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []Notebook `json:"items"`
}

// Repository type metadata.
var (
	Notebook_Kind             = "Notebook"
	Notebook_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: Notebook_Kind}.String()
	Notebook_KindAPIVersion   = Notebook_Kind + "." + CRDGroupVersion.String()
	Notebook_GroupVersionKind = CRDGroupVersion.WithKind(Notebook_Kind)
)

func init() {
	SchemeBuilder.Register(&Notebook{}, &NotebookList{})
}
