// SPDX-FileCopyrightText: 2024 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type AuthorizationInitParameters struct {

	// Agency name.
	// If the agency does not exist, it will be created automatically,
	// the agency name can be modelarts_agency or prefixed with ma_agency_.
	// Agency name.
	AgencyName *string `json:"agencyName,omitempty" tf:"agency_name,omitempty"`

	// Specifies the region in which to create the resource.
	// If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
	Region *string `json:"region,omitempty" tf:"region,omitempty"`

	// Authorization type. The valid value is agency.
	// Authorization type. The valid value is **agency**.
	Type *string `json:"type,omitempty" tf:"type,omitempty"`

	// User ID.
	// If user_id is set to all-users, all IAM users are authorized.
	// If this user has been authorized, the authorization setting will be updated.
	// User ID.
	// +crossplane:generate:reference:type=github.com/huaweicloud/provider-huaweicloud/apis/iam/v1alpha1.User
	// +crossplane:generate:reference:extractor=github.com/crossplane/upjet/pkg/resource.ExtractResourceID()
	UserID *string `json:"userId,omitempty" tf:"user_id,omitempty"`

	// Reference to a User in iam to populate userId.
	// +kubebuilder:validation:Optional
	UserIDRef *v1.Reference `json:"userIdRef,omitempty" tf:"-"`

	// Selector for a User in iam to populate userId.
	// +kubebuilder:validation:Optional
	UserIDSelector *v1.Selector `json:"userIdSelector,omitempty" tf:"-"`
}

type AuthorizationObservation struct {

	// Agency name.
	// If the agency does not exist, it will be created automatically,
	// the agency name can be modelarts_agency or prefixed with ma_agency_.
	// Agency name.
	AgencyName *string `json:"agencyName,omitempty" tf:"agency_name,omitempty"`

	// The resource ID which equals the user_id.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// Specifies the region in which to create the resource.
	// If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
	Region *string `json:"region,omitempty" tf:"region,omitempty"`

	// Authorization type. The valid value is agency.
	// Authorization type. The valid value is **agency**.
	Type *string `json:"type,omitempty" tf:"type,omitempty"`

	// User ID.
	// If user_id is set to all-users, all IAM users are authorized.
	// If this user has been authorized, the authorization setting will be updated.
	// User ID.
	UserID *string `json:"userId,omitempty" tf:"user_id,omitempty"`

	// User Name.
	// The value is all-users if user_id is set to all-users.
	// User Name.
	UserName *string `json:"userName,omitempty" tf:"user_name,omitempty"`
}

type AuthorizationParameters struct {

	// Agency name.
	// If the agency does not exist, it will be created automatically,
	// the agency name can be modelarts_agency or prefixed with ma_agency_.
	// Agency name.
	// +kubebuilder:validation:Optional
	AgencyName *string `json:"agencyName,omitempty" tf:"agency_name,omitempty"`

	// Specifies the region in which to create the resource.
	// If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
	// +kubebuilder:validation:Optional
	Region *string `json:"region,omitempty" tf:"region,omitempty"`

	// Authorization type. The valid value is agency.
	// Authorization type. The valid value is **agency**.
	// +kubebuilder:validation:Optional
	Type *string `json:"type,omitempty" tf:"type,omitempty"`

	// User ID.
	// If user_id is set to all-users, all IAM users are authorized.
	// If this user has been authorized, the authorization setting will be updated.
	// User ID.
	// +crossplane:generate:reference:type=github.com/huaweicloud/provider-huaweicloud/apis/iam/v1alpha1.User
	// +crossplane:generate:reference:extractor=github.com/crossplane/upjet/pkg/resource.ExtractResourceID()
	// +kubebuilder:validation:Optional
	UserID *string `json:"userId,omitempty" tf:"user_id,omitempty"`

	// Reference to a User in iam to populate userId.
	// +kubebuilder:validation:Optional
	UserIDRef *v1.Reference `json:"userIdRef,omitempty" tf:"-"`

	// Selector for a User in iam to populate userId.
	// +kubebuilder:validation:Optional
	UserIDSelector *v1.Selector `json:"userIdSelector,omitempty" tf:"-"`
}

// AuthorizationSpec defines the desired state of Authorization
type AuthorizationSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     AuthorizationParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider AuthorizationInitParameters `json:"initProvider,omitempty"`
}

// AuthorizationStatus defines the observed state of Authorization.
type AuthorizationStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        AuthorizationObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// Authorization is the Schema for the Authorizations API. ""
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,huaweicloud}
type Authorization struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.agencyName) || (has(self.initProvider) && has(self.initProvider.agencyName))",message="spec.forProvider.agencyName is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.type) || (has(self.initProvider) && has(self.initProvider.type))",message="spec.forProvider.type is a required parameter"
	Spec   AuthorizationSpec   `json:"spec"`
	Status AuthorizationStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// AuthorizationList contains a list of Authorizations
type AuthorizationList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []Authorization `json:"items"`
}

// Repository type metadata.
var (
	Authorization_Kind             = "Authorization"
	Authorization_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: Authorization_Kind}.String()
	Authorization_KindAPIVersion   = Authorization_Kind + "." + CRDGroupVersion.String()
	Authorization_GroupVersionKind = CRDGroupVersion.WithKind(Authorization_Kind)
)

func init() {
	SchemeBuilder.Register(&Authorization{}, &AuthorizationList{})
}
